
boost_converter_f030r8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004de4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004ea4  08004ea4  00005ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004edc  08004edc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004edc  08004edc  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004edc  08004edc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004edc  08004edc  00005edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ee0  08004ee0  00005ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ee4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000000c  08004ef0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08004ef0  000061f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0fd  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb4  00000000  00000000  00014131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00015de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  00016a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff58  00000000  00000000  00017680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef26  00000000  00000000  000275d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064580  00000000  00000000  000364fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009aa7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  0009aac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004e8c 	.word	0x08004e8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004e8c 	.word	0x08004e8c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fa35 	bl	8000698 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f9b5 	bl	80005a8 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fa27 	bl	8000698 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fa1d 	bl	8000698 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f9c3 	bl	80005f8 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f9b9 	bl	80005f8 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_fadd>:
 8000294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000296:	46ce      	mov	lr, r9
 8000298:	4647      	mov	r7, r8
 800029a:	0243      	lsls	r3, r0, #9
 800029c:	0a5a      	lsrs	r2, r3, #9
 800029e:	024e      	lsls	r6, r1, #9
 80002a0:	0045      	lsls	r5, r0, #1
 80002a2:	0fc4      	lsrs	r4, r0, #31
 80002a4:	0048      	lsls	r0, r1, #1
 80002a6:	4691      	mov	r9, r2
 80002a8:	0e2d      	lsrs	r5, r5, #24
 80002aa:	0a72      	lsrs	r2, r6, #9
 80002ac:	0e00      	lsrs	r0, r0, #24
 80002ae:	4694      	mov	ip, r2
 80002b0:	b580      	push	{r7, lr}
 80002b2:	099b      	lsrs	r3, r3, #6
 80002b4:	0fc9      	lsrs	r1, r1, #31
 80002b6:	09b6      	lsrs	r6, r6, #6
 80002b8:	1a2a      	subs	r2, r5, r0
 80002ba:	428c      	cmp	r4, r1
 80002bc:	d021      	beq.n	8000302 <__aeabi_fadd+0x6e>
 80002be:	2a00      	cmp	r2, #0
 80002c0:	dd0d      	ble.n	80002de <__aeabi_fadd+0x4a>
 80002c2:	2800      	cmp	r0, #0
 80002c4:	d12d      	bne.n	8000322 <__aeabi_fadd+0x8e>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d100      	bne.n	80002cc <__aeabi_fadd+0x38>
 80002ca:	e08d      	b.n	80003e8 <__aeabi_fadd+0x154>
 80002cc:	1e51      	subs	r1, r2, #1
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	d100      	bne.n	80002d4 <__aeabi_fadd+0x40>
 80002d2:	e11d      	b.n	8000510 <__aeabi_fadd+0x27c>
 80002d4:	2aff      	cmp	r2, #255	@ 0xff
 80002d6:	d100      	bne.n	80002da <__aeabi_fadd+0x46>
 80002d8:	e0ab      	b.n	8000432 <__aeabi_fadd+0x19e>
 80002da:	000a      	movs	r2, r1
 80002dc:	e027      	b.n	800032e <__aeabi_fadd+0x9a>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d04d      	beq.n	800037e <__aeabi_fadd+0xea>
 80002e2:	1b42      	subs	r2, r0, r5
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d000      	beq.n	80002ea <__aeabi_fadd+0x56>
 80002e8:	e0cc      	b.n	8000484 <__aeabi_fadd+0x1f0>
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d100      	bne.n	80002f0 <__aeabi_fadd+0x5c>
 80002ee:	e079      	b.n	80003e4 <__aeabi_fadd+0x150>
 80002f0:	1e54      	subs	r4, r2, #1
 80002f2:	2a01      	cmp	r2, #1
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fadd+0x64>
 80002f6:	e128      	b.n	800054a <__aeabi_fadd+0x2b6>
 80002f8:	2aff      	cmp	r2, #255	@ 0xff
 80002fa:	d100      	bne.n	80002fe <__aeabi_fadd+0x6a>
 80002fc:	e097      	b.n	800042e <__aeabi_fadd+0x19a>
 80002fe:	0022      	movs	r2, r4
 8000300:	e0c5      	b.n	800048e <__aeabi_fadd+0x1fa>
 8000302:	2a00      	cmp	r2, #0
 8000304:	dc00      	bgt.n	8000308 <__aeabi_fadd+0x74>
 8000306:	e096      	b.n	8000436 <__aeabi_fadd+0x1a2>
 8000308:	2800      	cmp	r0, #0
 800030a:	d04f      	beq.n	80003ac <__aeabi_fadd+0x118>
 800030c:	2dff      	cmp	r5, #255	@ 0xff
 800030e:	d100      	bne.n	8000312 <__aeabi_fadd+0x7e>
 8000310:	e08f      	b.n	8000432 <__aeabi_fadd+0x19e>
 8000312:	2180      	movs	r1, #128	@ 0x80
 8000314:	04c9      	lsls	r1, r1, #19
 8000316:	430e      	orrs	r6, r1
 8000318:	2a1b      	cmp	r2, #27
 800031a:	dd51      	ble.n	80003c0 <__aeabi_fadd+0x12c>
 800031c:	002a      	movs	r2, r5
 800031e:	3301      	adds	r3, #1
 8000320:	e018      	b.n	8000354 <__aeabi_fadd+0xc0>
 8000322:	2dff      	cmp	r5, #255	@ 0xff
 8000324:	d100      	bne.n	8000328 <__aeabi_fadd+0x94>
 8000326:	e084      	b.n	8000432 <__aeabi_fadd+0x19e>
 8000328:	2180      	movs	r1, #128	@ 0x80
 800032a:	04c9      	lsls	r1, r1, #19
 800032c:	430e      	orrs	r6, r1
 800032e:	2101      	movs	r1, #1
 8000330:	2a1b      	cmp	r2, #27
 8000332:	dc08      	bgt.n	8000346 <__aeabi_fadd+0xb2>
 8000334:	0031      	movs	r1, r6
 8000336:	2020      	movs	r0, #32
 8000338:	40d1      	lsrs	r1, r2
 800033a:	1a82      	subs	r2, r0, r2
 800033c:	4096      	lsls	r6, r2
 800033e:	0032      	movs	r2, r6
 8000340:	1e50      	subs	r0, r2, #1
 8000342:	4182      	sbcs	r2, r0
 8000344:	4311      	orrs	r1, r2
 8000346:	1a5b      	subs	r3, r3, r1
 8000348:	015a      	lsls	r2, r3, #5
 800034a:	d459      	bmi.n	8000400 <__aeabi_fadd+0x16c>
 800034c:	2107      	movs	r1, #7
 800034e:	002a      	movs	r2, r5
 8000350:	4019      	ands	r1, r3
 8000352:	d049      	beq.n	80003e8 <__aeabi_fadd+0x154>
 8000354:	210f      	movs	r1, #15
 8000356:	4019      	ands	r1, r3
 8000358:	2904      	cmp	r1, #4
 800035a:	d000      	beq.n	800035e <__aeabi_fadd+0xca>
 800035c:	3304      	adds	r3, #4
 800035e:	0159      	lsls	r1, r3, #5
 8000360:	d542      	bpl.n	80003e8 <__aeabi_fadd+0x154>
 8000362:	1c50      	adds	r0, r2, #1
 8000364:	2afe      	cmp	r2, #254	@ 0xfe
 8000366:	d03a      	beq.n	80003de <__aeabi_fadd+0x14a>
 8000368:	019b      	lsls	r3, r3, #6
 800036a:	b2c0      	uxtb	r0, r0
 800036c:	0a5b      	lsrs	r3, r3, #9
 800036e:	05c0      	lsls	r0, r0, #23
 8000370:	4318      	orrs	r0, r3
 8000372:	07e4      	lsls	r4, r4, #31
 8000374:	4320      	orrs	r0, r4
 8000376:	bcc0      	pop	{r6, r7}
 8000378:	46b9      	mov	r9, r7
 800037a:	46b0      	mov	r8, r6
 800037c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800037e:	20fe      	movs	r0, #254	@ 0xfe
 8000380:	4680      	mov	r8, r0
 8000382:	1c6f      	adds	r7, r5, #1
 8000384:	0038      	movs	r0, r7
 8000386:	4647      	mov	r7, r8
 8000388:	4207      	tst	r7, r0
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0xfa>
 800038c:	e08e      	b.n	80004ac <__aeabi_fadd+0x218>
 800038e:	2d00      	cmp	r5, #0
 8000390:	d000      	beq.n	8000394 <__aeabi_fadd+0x100>
 8000392:	e0b4      	b.n	80004fe <__aeabi_fadd+0x26a>
 8000394:	2b00      	cmp	r3, #0
 8000396:	d100      	bne.n	800039a <__aeabi_fadd+0x106>
 8000398:	e0db      	b.n	8000552 <__aeabi_fadd+0x2be>
 800039a:	2e00      	cmp	r6, #0
 800039c:	d06c      	beq.n	8000478 <__aeabi_fadd+0x1e4>
 800039e:	1b98      	subs	r0, r3, r6
 80003a0:	0145      	lsls	r5, r0, #5
 80003a2:	d400      	bmi.n	80003a6 <__aeabi_fadd+0x112>
 80003a4:	e0f7      	b.n	8000596 <__aeabi_fadd+0x302>
 80003a6:	000c      	movs	r4, r1
 80003a8:	1af3      	subs	r3, r6, r3
 80003aa:	e03d      	b.n	8000428 <__aeabi_fadd+0x194>
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d01b      	beq.n	80003e8 <__aeabi_fadd+0x154>
 80003b0:	1e51      	subs	r1, r2, #1
 80003b2:	2a01      	cmp	r2, #1
 80003b4:	d100      	bne.n	80003b8 <__aeabi_fadd+0x124>
 80003b6:	e082      	b.n	80004be <__aeabi_fadd+0x22a>
 80003b8:	2aff      	cmp	r2, #255	@ 0xff
 80003ba:	d03a      	beq.n	8000432 <__aeabi_fadd+0x19e>
 80003bc:	000a      	movs	r2, r1
 80003be:	e7ab      	b.n	8000318 <__aeabi_fadd+0x84>
 80003c0:	0031      	movs	r1, r6
 80003c2:	2020      	movs	r0, #32
 80003c4:	40d1      	lsrs	r1, r2
 80003c6:	1a82      	subs	r2, r0, r2
 80003c8:	4096      	lsls	r6, r2
 80003ca:	0032      	movs	r2, r6
 80003cc:	1e50      	subs	r0, r2, #1
 80003ce:	4182      	sbcs	r2, r0
 80003d0:	430a      	orrs	r2, r1
 80003d2:	189b      	adds	r3, r3, r2
 80003d4:	015a      	lsls	r2, r3, #5
 80003d6:	d5b9      	bpl.n	800034c <__aeabi_fadd+0xb8>
 80003d8:	1c6a      	adds	r2, r5, #1
 80003da:	2dfe      	cmp	r5, #254	@ 0xfe
 80003dc:	d175      	bne.n	80004ca <__aeabi_fadd+0x236>
 80003de:	20ff      	movs	r0, #255	@ 0xff
 80003e0:	2300      	movs	r3, #0
 80003e2:	e7c4      	b.n	800036e <__aeabi_fadd+0xda>
 80003e4:	000c      	movs	r4, r1
 80003e6:	0033      	movs	r3, r6
 80003e8:	08db      	lsrs	r3, r3, #3
 80003ea:	2aff      	cmp	r2, #255	@ 0xff
 80003ec:	d146      	bne.n	800047c <__aeabi_fadd+0x1e8>
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f5      	beq.n	80003de <__aeabi_fadd+0x14a>
 80003f2:	2280      	movs	r2, #128	@ 0x80
 80003f4:	03d2      	lsls	r2, r2, #15
 80003f6:	4313      	orrs	r3, r2
 80003f8:	025b      	lsls	r3, r3, #9
 80003fa:	20ff      	movs	r0, #255	@ 0xff
 80003fc:	0a5b      	lsrs	r3, r3, #9
 80003fe:	e7b6      	b.n	800036e <__aeabi_fadd+0xda>
 8000400:	019f      	lsls	r7, r3, #6
 8000402:	09bf      	lsrs	r7, r7, #6
 8000404:	0038      	movs	r0, r7
 8000406:	f001 f82f 	bl	8001468 <__clzsi2>
 800040a:	3805      	subs	r0, #5
 800040c:	4087      	lsls	r7, r0
 800040e:	4285      	cmp	r5, r0
 8000410:	dc24      	bgt.n	800045c <__aeabi_fadd+0x1c8>
 8000412:	003b      	movs	r3, r7
 8000414:	2120      	movs	r1, #32
 8000416:	1b42      	subs	r2, r0, r5
 8000418:	3201      	adds	r2, #1
 800041a:	40d3      	lsrs	r3, r2
 800041c:	1a8a      	subs	r2, r1, r2
 800041e:	4097      	lsls	r7, r2
 8000420:	1e7a      	subs	r2, r7, #1
 8000422:	4197      	sbcs	r7, r2
 8000424:	2200      	movs	r2, #0
 8000426:	433b      	orrs	r3, r7
 8000428:	0759      	lsls	r1, r3, #29
 800042a:	d193      	bne.n	8000354 <__aeabi_fadd+0xc0>
 800042c:	e797      	b.n	800035e <__aeabi_fadd+0xca>
 800042e:	000c      	movs	r4, r1
 8000430:	0033      	movs	r3, r6
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	e7db      	b.n	80003ee <__aeabi_fadd+0x15a>
 8000436:	2a00      	cmp	r2, #0
 8000438:	d014      	beq.n	8000464 <__aeabi_fadd+0x1d0>
 800043a:	1b42      	subs	r2, r0, r5
 800043c:	2d00      	cmp	r5, #0
 800043e:	d14b      	bne.n	80004d8 <__aeabi_fadd+0x244>
 8000440:	2b00      	cmp	r3, #0
 8000442:	d0d0      	beq.n	80003e6 <__aeabi_fadd+0x152>
 8000444:	1e51      	subs	r1, r2, #1
 8000446:	2a01      	cmp	r2, #1
 8000448:	d100      	bne.n	800044c <__aeabi_fadd+0x1b8>
 800044a:	e09e      	b.n	800058a <__aeabi_fadd+0x2f6>
 800044c:	2aff      	cmp	r2, #255	@ 0xff
 800044e:	d0ef      	beq.n	8000430 <__aeabi_fadd+0x19c>
 8000450:	000a      	movs	r2, r1
 8000452:	2a1b      	cmp	r2, #27
 8000454:	dd5f      	ble.n	8000516 <__aeabi_fadd+0x282>
 8000456:	0002      	movs	r2, r0
 8000458:	1c73      	adds	r3, r6, #1
 800045a:	e77b      	b.n	8000354 <__aeabi_fadd+0xc0>
 800045c:	4b50      	ldr	r3, [pc, #320]	@ (80005a0 <__aeabi_fadd+0x30c>)
 800045e:	1a2a      	subs	r2, r5, r0
 8000460:	403b      	ands	r3, r7
 8000462:	e7e1      	b.n	8000428 <__aeabi_fadd+0x194>
 8000464:	21fe      	movs	r1, #254	@ 0xfe
 8000466:	1c6a      	adds	r2, r5, #1
 8000468:	4211      	tst	r1, r2
 800046a:	d13b      	bne.n	80004e4 <__aeabi_fadd+0x250>
 800046c:	2d00      	cmp	r5, #0
 800046e:	d15d      	bne.n	800052c <__aeabi_fadd+0x298>
 8000470:	2b00      	cmp	r3, #0
 8000472:	d07f      	beq.n	8000574 <__aeabi_fadd+0x2e0>
 8000474:	2e00      	cmp	r6, #0
 8000476:	d17f      	bne.n	8000578 <__aeabi_fadd+0x2e4>
 8000478:	2200      	movs	r2, #0
 800047a:	08db      	lsrs	r3, r3, #3
 800047c:	025b      	lsls	r3, r3, #9
 800047e:	0a5b      	lsrs	r3, r3, #9
 8000480:	b2d0      	uxtb	r0, r2
 8000482:	e774      	b.n	800036e <__aeabi_fadd+0xda>
 8000484:	28ff      	cmp	r0, #255	@ 0xff
 8000486:	d0d2      	beq.n	800042e <__aeabi_fadd+0x19a>
 8000488:	2480      	movs	r4, #128	@ 0x80
 800048a:	04e4      	lsls	r4, r4, #19
 800048c:	4323      	orrs	r3, r4
 800048e:	2401      	movs	r4, #1
 8000490:	2a1b      	cmp	r2, #27
 8000492:	dc07      	bgt.n	80004a4 <__aeabi_fadd+0x210>
 8000494:	001c      	movs	r4, r3
 8000496:	2520      	movs	r5, #32
 8000498:	40d4      	lsrs	r4, r2
 800049a:	1aaa      	subs	r2, r5, r2
 800049c:	4093      	lsls	r3, r2
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	4193      	sbcs	r3, r2
 80004a2:	431c      	orrs	r4, r3
 80004a4:	1b33      	subs	r3, r6, r4
 80004a6:	0005      	movs	r5, r0
 80004a8:	000c      	movs	r4, r1
 80004aa:	e74d      	b.n	8000348 <__aeabi_fadd+0xb4>
 80004ac:	1b9f      	subs	r7, r3, r6
 80004ae:	017a      	lsls	r2, r7, #5
 80004b0:	d422      	bmi.n	80004f8 <__aeabi_fadd+0x264>
 80004b2:	2f00      	cmp	r7, #0
 80004b4:	d1a6      	bne.n	8000404 <__aeabi_fadd+0x170>
 80004b6:	2400      	movs	r4, #0
 80004b8:	2000      	movs	r0, #0
 80004ba:	2300      	movs	r3, #0
 80004bc:	e757      	b.n	800036e <__aeabi_fadd+0xda>
 80004be:	199b      	adds	r3, r3, r6
 80004c0:	2501      	movs	r5, #1
 80004c2:	3201      	adds	r2, #1
 80004c4:	0159      	lsls	r1, r3, #5
 80004c6:	d400      	bmi.n	80004ca <__aeabi_fadd+0x236>
 80004c8:	e740      	b.n	800034c <__aeabi_fadd+0xb8>
 80004ca:	2101      	movs	r1, #1
 80004cc:	4835      	ldr	r0, [pc, #212]	@ (80005a4 <__aeabi_fadd+0x310>)
 80004ce:	4019      	ands	r1, r3
 80004d0:	085b      	lsrs	r3, r3, #1
 80004d2:	4003      	ands	r3, r0
 80004d4:	430b      	orrs	r3, r1
 80004d6:	e7a7      	b.n	8000428 <__aeabi_fadd+0x194>
 80004d8:	28ff      	cmp	r0, #255	@ 0xff
 80004da:	d0a9      	beq.n	8000430 <__aeabi_fadd+0x19c>
 80004dc:	2180      	movs	r1, #128	@ 0x80
 80004de:	04c9      	lsls	r1, r1, #19
 80004e0:	430b      	orrs	r3, r1
 80004e2:	e7b6      	b.n	8000452 <__aeabi_fadd+0x1be>
 80004e4:	2aff      	cmp	r2, #255	@ 0xff
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x256>
 80004e8:	e779      	b.n	80003de <__aeabi_fadd+0x14a>
 80004ea:	199b      	adds	r3, r3, r6
 80004ec:	085b      	lsrs	r3, r3, #1
 80004ee:	0759      	lsls	r1, r3, #29
 80004f0:	d000      	beq.n	80004f4 <__aeabi_fadd+0x260>
 80004f2:	e72f      	b.n	8000354 <__aeabi_fadd+0xc0>
 80004f4:	08db      	lsrs	r3, r3, #3
 80004f6:	e7c1      	b.n	800047c <__aeabi_fadd+0x1e8>
 80004f8:	000c      	movs	r4, r1
 80004fa:	1af7      	subs	r7, r6, r3
 80004fc:	e782      	b.n	8000404 <__aeabi_fadd+0x170>
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d12c      	bne.n	800055c <__aeabi_fadd+0x2c8>
 8000502:	2e00      	cmp	r6, #0
 8000504:	d193      	bne.n	800042e <__aeabi_fadd+0x19a>
 8000506:	2380      	movs	r3, #128	@ 0x80
 8000508:	2400      	movs	r4, #0
 800050a:	20ff      	movs	r0, #255	@ 0xff
 800050c:	03db      	lsls	r3, r3, #15
 800050e:	e72e      	b.n	800036e <__aeabi_fadd+0xda>
 8000510:	2501      	movs	r5, #1
 8000512:	1b9b      	subs	r3, r3, r6
 8000514:	e718      	b.n	8000348 <__aeabi_fadd+0xb4>
 8000516:	0019      	movs	r1, r3
 8000518:	2520      	movs	r5, #32
 800051a:	40d1      	lsrs	r1, r2
 800051c:	1aaa      	subs	r2, r5, r2
 800051e:	4093      	lsls	r3, r2
 8000520:	1e5a      	subs	r2, r3, #1
 8000522:	4193      	sbcs	r3, r2
 8000524:	430b      	orrs	r3, r1
 8000526:	0005      	movs	r5, r0
 8000528:	199b      	adds	r3, r3, r6
 800052a:	e753      	b.n	80003d4 <__aeabi_fadd+0x140>
 800052c:	2b00      	cmp	r3, #0
 800052e:	d100      	bne.n	8000532 <__aeabi_fadd+0x29e>
 8000530:	e77e      	b.n	8000430 <__aeabi_fadd+0x19c>
 8000532:	2e00      	cmp	r6, #0
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x2a4>
 8000536:	e77c      	b.n	8000432 <__aeabi_fadd+0x19e>
 8000538:	2280      	movs	r2, #128	@ 0x80
 800053a:	03d2      	lsls	r2, r2, #15
 800053c:	4591      	cmp	r9, r2
 800053e:	d302      	bcc.n	8000546 <__aeabi_fadd+0x2b2>
 8000540:	4594      	cmp	ip, r2
 8000542:	d200      	bcs.n	8000546 <__aeabi_fadd+0x2b2>
 8000544:	0033      	movs	r3, r6
 8000546:	08db      	lsrs	r3, r3, #3
 8000548:	e753      	b.n	80003f2 <__aeabi_fadd+0x15e>
 800054a:	000c      	movs	r4, r1
 800054c:	1af3      	subs	r3, r6, r3
 800054e:	3501      	adds	r5, #1
 8000550:	e6fa      	b.n	8000348 <__aeabi_fadd+0xb4>
 8000552:	2e00      	cmp	r6, #0
 8000554:	d0af      	beq.n	80004b6 <__aeabi_fadd+0x222>
 8000556:	000c      	movs	r4, r1
 8000558:	0033      	movs	r3, r6
 800055a:	e78d      	b.n	8000478 <__aeabi_fadd+0x1e4>
 800055c:	2e00      	cmp	r6, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x2ce>
 8000560:	e767      	b.n	8000432 <__aeabi_fadd+0x19e>
 8000562:	2280      	movs	r2, #128	@ 0x80
 8000564:	03d2      	lsls	r2, r2, #15
 8000566:	4591      	cmp	r9, r2
 8000568:	d3ed      	bcc.n	8000546 <__aeabi_fadd+0x2b2>
 800056a:	4594      	cmp	ip, r2
 800056c:	d2eb      	bcs.n	8000546 <__aeabi_fadd+0x2b2>
 800056e:	000c      	movs	r4, r1
 8000570:	0033      	movs	r3, r6
 8000572:	e7e8      	b.n	8000546 <__aeabi_fadd+0x2b2>
 8000574:	0033      	movs	r3, r6
 8000576:	e77f      	b.n	8000478 <__aeabi_fadd+0x1e4>
 8000578:	199b      	adds	r3, r3, r6
 800057a:	2200      	movs	r2, #0
 800057c:	0159      	lsls	r1, r3, #5
 800057e:	d5b9      	bpl.n	80004f4 <__aeabi_fadd+0x260>
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <__aeabi_fadd+0x30c>)
 8000582:	4013      	ands	r3, r2
 8000584:	08db      	lsrs	r3, r3, #3
 8000586:	2201      	movs	r2, #1
 8000588:	e778      	b.n	800047c <__aeabi_fadd+0x1e8>
 800058a:	199b      	adds	r3, r3, r6
 800058c:	3201      	adds	r2, #1
 800058e:	3501      	adds	r5, #1
 8000590:	0159      	lsls	r1, r3, #5
 8000592:	d49a      	bmi.n	80004ca <__aeabi_fadd+0x236>
 8000594:	e6da      	b.n	800034c <__aeabi_fadd+0xb8>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d08d      	beq.n	80004b6 <__aeabi_fadd+0x222>
 800059a:	08db      	lsrs	r3, r3, #3
 800059c:	e76e      	b.n	800047c <__aeabi_fadd+0x1e8>
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	fbffffff 	.word	0xfbffffff
 80005a4:	7dffffff 	.word	0x7dffffff

080005a8 <__eqsf2>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	0042      	lsls	r2, r0, #1
 80005ac:	024e      	lsls	r6, r1, #9
 80005ae:	004c      	lsls	r4, r1, #1
 80005b0:	0245      	lsls	r5, r0, #9
 80005b2:	0a6d      	lsrs	r5, r5, #9
 80005b4:	0e12      	lsrs	r2, r2, #24
 80005b6:	0fc3      	lsrs	r3, r0, #31
 80005b8:	0a76      	lsrs	r6, r6, #9
 80005ba:	0e24      	lsrs	r4, r4, #24
 80005bc:	0fc9      	lsrs	r1, r1, #31
 80005be:	2aff      	cmp	r2, #255	@ 0xff
 80005c0:	d010      	beq.n	80005e4 <__eqsf2+0x3c>
 80005c2:	2cff      	cmp	r4, #255	@ 0xff
 80005c4:	d00c      	beq.n	80005e0 <__eqsf2+0x38>
 80005c6:	2001      	movs	r0, #1
 80005c8:	42a2      	cmp	r2, r4
 80005ca:	d10a      	bne.n	80005e2 <__eqsf2+0x3a>
 80005cc:	42b5      	cmp	r5, r6
 80005ce:	d108      	bne.n	80005e2 <__eqsf2+0x3a>
 80005d0:	428b      	cmp	r3, r1
 80005d2:	d00f      	beq.n	80005f4 <__eqsf2+0x4c>
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d104      	bne.n	80005e2 <__eqsf2+0x3a>
 80005d8:	0028      	movs	r0, r5
 80005da:	1e43      	subs	r3, r0, #1
 80005dc:	4198      	sbcs	r0, r3
 80005de:	e000      	b.n	80005e2 <__eqsf2+0x3a>
 80005e0:	2001      	movs	r0, #1
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	2001      	movs	r0, #1
 80005e6:	2cff      	cmp	r4, #255	@ 0xff
 80005e8:	d1fb      	bne.n	80005e2 <__eqsf2+0x3a>
 80005ea:	4335      	orrs	r5, r6
 80005ec:	d1f9      	bne.n	80005e2 <__eqsf2+0x3a>
 80005ee:	404b      	eors	r3, r1
 80005f0:	0018      	movs	r0, r3
 80005f2:	e7f6      	b.n	80005e2 <__eqsf2+0x3a>
 80005f4:	2000      	movs	r0, #0
 80005f6:	e7f4      	b.n	80005e2 <__eqsf2+0x3a>

080005f8 <__gesf2>:
 80005f8:	b530      	push	{r4, r5, lr}
 80005fa:	0042      	lsls	r2, r0, #1
 80005fc:	0244      	lsls	r4, r0, #9
 80005fe:	024d      	lsls	r5, r1, #9
 8000600:	0fc3      	lsrs	r3, r0, #31
 8000602:	0048      	lsls	r0, r1, #1
 8000604:	0a64      	lsrs	r4, r4, #9
 8000606:	0e12      	lsrs	r2, r2, #24
 8000608:	0a6d      	lsrs	r5, r5, #9
 800060a:	0e00      	lsrs	r0, r0, #24
 800060c:	0fc9      	lsrs	r1, r1, #31
 800060e:	2aff      	cmp	r2, #255	@ 0xff
 8000610:	d019      	beq.n	8000646 <__gesf2+0x4e>
 8000612:	28ff      	cmp	r0, #255	@ 0xff
 8000614:	d00b      	beq.n	800062e <__gesf2+0x36>
 8000616:	2a00      	cmp	r2, #0
 8000618:	d11e      	bne.n	8000658 <__gesf2+0x60>
 800061a:	2800      	cmp	r0, #0
 800061c:	d10b      	bne.n	8000636 <__gesf2+0x3e>
 800061e:	2d00      	cmp	r5, #0
 8000620:	d027      	beq.n	8000672 <__gesf2+0x7a>
 8000622:	2c00      	cmp	r4, #0
 8000624:	d134      	bne.n	8000690 <__gesf2+0x98>
 8000626:	2900      	cmp	r1, #0
 8000628:	d02f      	beq.n	800068a <__gesf2+0x92>
 800062a:	0008      	movs	r0, r1
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	2d00      	cmp	r5, #0
 8000630:	d128      	bne.n	8000684 <__gesf2+0x8c>
 8000632:	2a00      	cmp	r2, #0
 8000634:	d101      	bne.n	800063a <__gesf2+0x42>
 8000636:	2c00      	cmp	r4, #0
 8000638:	d0f5      	beq.n	8000626 <__gesf2+0x2e>
 800063a:	428b      	cmp	r3, r1
 800063c:	d107      	bne.n	800064e <__gesf2+0x56>
 800063e:	2b00      	cmp	r3, #0
 8000640:	d023      	beq.n	800068a <__gesf2+0x92>
 8000642:	0018      	movs	r0, r3
 8000644:	e7f2      	b.n	800062c <__gesf2+0x34>
 8000646:	2c00      	cmp	r4, #0
 8000648:	d11c      	bne.n	8000684 <__gesf2+0x8c>
 800064a:	28ff      	cmp	r0, #255	@ 0xff
 800064c:	d014      	beq.n	8000678 <__gesf2+0x80>
 800064e:	1e58      	subs	r0, r3, #1
 8000650:	2302      	movs	r3, #2
 8000652:	4018      	ands	r0, r3
 8000654:	3801      	subs	r0, #1
 8000656:	e7e9      	b.n	800062c <__gesf2+0x34>
 8000658:	2800      	cmp	r0, #0
 800065a:	d0f8      	beq.n	800064e <__gesf2+0x56>
 800065c:	428b      	cmp	r3, r1
 800065e:	d1f6      	bne.n	800064e <__gesf2+0x56>
 8000660:	4282      	cmp	r2, r0
 8000662:	dcf4      	bgt.n	800064e <__gesf2+0x56>
 8000664:	dbeb      	blt.n	800063e <__gesf2+0x46>
 8000666:	42ac      	cmp	r4, r5
 8000668:	d8f1      	bhi.n	800064e <__gesf2+0x56>
 800066a:	2000      	movs	r0, #0
 800066c:	42ac      	cmp	r4, r5
 800066e:	d2dd      	bcs.n	800062c <__gesf2+0x34>
 8000670:	e7e5      	b.n	800063e <__gesf2+0x46>
 8000672:	2c00      	cmp	r4, #0
 8000674:	d0da      	beq.n	800062c <__gesf2+0x34>
 8000676:	e7ea      	b.n	800064e <__gesf2+0x56>
 8000678:	2d00      	cmp	r5, #0
 800067a:	d103      	bne.n	8000684 <__gesf2+0x8c>
 800067c:	428b      	cmp	r3, r1
 800067e:	d1e6      	bne.n	800064e <__gesf2+0x56>
 8000680:	2000      	movs	r0, #0
 8000682:	e7d3      	b.n	800062c <__gesf2+0x34>
 8000684:	2002      	movs	r0, #2
 8000686:	4240      	negs	r0, r0
 8000688:	e7d0      	b.n	800062c <__gesf2+0x34>
 800068a:	2001      	movs	r0, #1
 800068c:	4240      	negs	r0, r0
 800068e:	e7cd      	b.n	800062c <__gesf2+0x34>
 8000690:	428b      	cmp	r3, r1
 8000692:	d0e8      	beq.n	8000666 <__gesf2+0x6e>
 8000694:	e7db      	b.n	800064e <__gesf2+0x56>
 8000696:	46c0      	nop			@ (mov r8, r8)

08000698 <__lesf2>:
 8000698:	b530      	push	{r4, r5, lr}
 800069a:	0042      	lsls	r2, r0, #1
 800069c:	0244      	lsls	r4, r0, #9
 800069e:	024d      	lsls	r5, r1, #9
 80006a0:	0fc3      	lsrs	r3, r0, #31
 80006a2:	0048      	lsls	r0, r1, #1
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	0e12      	lsrs	r2, r2, #24
 80006a8:	0a6d      	lsrs	r5, r5, #9
 80006aa:	0e00      	lsrs	r0, r0, #24
 80006ac:	0fc9      	lsrs	r1, r1, #31
 80006ae:	2aff      	cmp	r2, #255	@ 0xff
 80006b0:	d01a      	beq.n	80006e8 <__lesf2+0x50>
 80006b2:	28ff      	cmp	r0, #255	@ 0xff
 80006b4:	d00e      	beq.n	80006d4 <__lesf2+0x3c>
 80006b6:	2a00      	cmp	r2, #0
 80006b8:	d11e      	bne.n	80006f8 <__lesf2+0x60>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d10e      	bne.n	80006dc <__lesf2+0x44>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d02a      	beq.n	8000718 <__lesf2+0x80>
 80006c2:	2c00      	cmp	r4, #0
 80006c4:	d00c      	beq.n	80006e0 <__lesf2+0x48>
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d01d      	beq.n	8000706 <__lesf2+0x6e>
 80006ca:	1e58      	subs	r0, r3, #1
 80006cc:	2302      	movs	r3, #2
 80006ce:	4018      	ands	r0, r3
 80006d0:	3801      	subs	r0, #1
 80006d2:	e010      	b.n	80006f6 <__lesf2+0x5e>
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d10d      	bne.n	80006f4 <__lesf2+0x5c>
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d120      	bne.n	800071e <__lesf2+0x86>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d11e      	bne.n	800071e <__lesf2+0x86>
 80006e0:	2900      	cmp	r1, #0
 80006e2:	d023      	beq.n	800072c <__lesf2+0x94>
 80006e4:	0008      	movs	r0, r1
 80006e6:	e006      	b.n	80006f6 <__lesf2+0x5e>
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d103      	bne.n	80006f4 <__lesf2+0x5c>
 80006ec:	28ff      	cmp	r0, #255	@ 0xff
 80006ee:	d1ec      	bne.n	80006ca <__lesf2+0x32>
 80006f0:	2d00      	cmp	r5, #0
 80006f2:	d017      	beq.n	8000724 <__lesf2+0x8c>
 80006f4:	2002      	movs	r0, #2
 80006f6:	bd30      	pop	{r4, r5, pc}
 80006f8:	2800      	cmp	r0, #0
 80006fa:	d0e6      	beq.n	80006ca <__lesf2+0x32>
 80006fc:	428b      	cmp	r3, r1
 80006fe:	d1e4      	bne.n	80006ca <__lesf2+0x32>
 8000700:	4282      	cmp	r2, r0
 8000702:	dce2      	bgt.n	80006ca <__lesf2+0x32>
 8000704:	db04      	blt.n	8000710 <__lesf2+0x78>
 8000706:	42ac      	cmp	r4, r5
 8000708:	d8df      	bhi.n	80006ca <__lesf2+0x32>
 800070a:	2000      	movs	r0, #0
 800070c:	42ac      	cmp	r4, r5
 800070e:	d2f2      	bcs.n	80006f6 <__lesf2+0x5e>
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <__lesf2+0x94>
 8000714:	0018      	movs	r0, r3
 8000716:	e7ee      	b.n	80006f6 <__lesf2+0x5e>
 8000718:	2c00      	cmp	r4, #0
 800071a:	d0ec      	beq.n	80006f6 <__lesf2+0x5e>
 800071c:	e7d5      	b.n	80006ca <__lesf2+0x32>
 800071e:	428b      	cmp	r3, r1
 8000720:	d1d3      	bne.n	80006ca <__lesf2+0x32>
 8000722:	e7f5      	b.n	8000710 <__lesf2+0x78>
 8000724:	2000      	movs	r0, #0
 8000726:	428b      	cmp	r3, r1
 8000728:	d0e5      	beq.n	80006f6 <__lesf2+0x5e>
 800072a:	e7ce      	b.n	80006ca <__lesf2+0x32>
 800072c:	2001      	movs	r0, #1
 800072e:	4240      	negs	r0, r0
 8000730:	e7e1      	b.n	80006f6 <__lesf2+0x5e>
 8000732:	46c0      	nop			@ (mov r8, r8)

08000734 <__aeabi_fmul>:
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000736:	464f      	mov	r7, r9
 8000738:	4646      	mov	r6, r8
 800073a:	46d6      	mov	lr, sl
 800073c:	0243      	lsls	r3, r0, #9
 800073e:	0a5b      	lsrs	r3, r3, #9
 8000740:	0045      	lsls	r5, r0, #1
 8000742:	b5c0      	push	{r6, r7, lr}
 8000744:	4699      	mov	r9, r3
 8000746:	1c0f      	adds	r7, r1, #0
 8000748:	0e2d      	lsrs	r5, r5, #24
 800074a:	0fc6      	lsrs	r6, r0, #31
 800074c:	2d00      	cmp	r5, #0
 800074e:	d100      	bne.n	8000752 <__aeabi_fmul+0x1e>
 8000750:	e088      	b.n	8000864 <__aeabi_fmul+0x130>
 8000752:	2dff      	cmp	r5, #255	@ 0xff
 8000754:	d100      	bne.n	8000758 <__aeabi_fmul+0x24>
 8000756:	e08d      	b.n	8000874 <__aeabi_fmul+0x140>
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	04d2      	lsls	r2, r2, #19
 800075e:	431a      	orrs	r2, r3
 8000760:	2300      	movs	r3, #0
 8000762:	4691      	mov	r9, r2
 8000764:	4698      	mov	r8, r3
 8000766:	469a      	mov	sl, r3
 8000768:	3d7f      	subs	r5, #127	@ 0x7f
 800076a:	027c      	lsls	r4, r7, #9
 800076c:	007b      	lsls	r3, r7, #1
 800076e:	0a64      	lsrs	r4, r4, #9
 8000770:	0e1b      	lsrs	r3, r3, #24
 8000772:	0fff      	lsrs	r7, r7, #31
 8000774:	2b00      	cmp	r3, #0
 8000776:	d068      	beq.n	800084a <__aeabi_fmul+0x116>
 8000778:	2bff      	cmp	r3, #255	@ 0xff
 800077a:	d021      	beq.n	80007c0 <__aeabi_fmul+0x8c>
 800077c:	2280      	movs	r2, #128	@ 0x80
 800077e:	00e4      	lsls	r4, r4, #3
 8000780:	04d2      	lsls	r2, r2, #19
 8000782:	4314      	orrs	r4, r2
 8000784:	4642      	mov	r2, r8
 8000786:	3b7f      	subs	r3, #127	@ 0x7f
 8000788:	195b      	adds	r3, r3, r5
 800078a:	2100      	movs	r1, #0
 800078c:	1c5d      	adds	r5, r3, #1
 800078e:	2a0a      	cmp	r2, #10
 8000790:	dc2e      	bgt.n	80007f0 <__aeabi_fmul+0xbc>
 8000792:	407e      	eors	r6, r7
 8000794:	4642      	mov	r2, r8
 8000796:	2a02      	cmp	r2, #2
 8000798:	dc23      	bgt.n	80007e2 <__aeabi_fmul+0xae>
 800079a:	3a01      	subs	r2, #1
 800079c:	2a01      	cmp	r2, #1
 800079e:	d900      	bls.n	80007a2 <__aeabi_fmul+0x6e>
 80007a0:	e0bd      	b.n	800091e <__aeabi_fmul+0x1ea>
 80007a2:	2902      	cmp	r1, #2
 80007a4:	d06e      	beq.n	8000884 <__aeabi_fmul+0x150>
 80007a6:	2901      	cmp	r1, #1
 80007a8:	d12c      	bne.n	8000804 <__aeabi_fmul+0xd0>
 80007aa:	2000      	movs	r0, #0
 80007ac:	2200      	movs	r2, #0
 80007ae:	05c0      	lsls	r0, r0, #23
 80007b0:	07f6      	lsls	r6, r6, #31
 80007b2:	4310      	orrs	r0, r2
 80007b4:	4330      	orrs	r0, r6
 80007b6:	bce0      	pop	{r5, r6, r7}
 80007b8:	46ba      	mov	sl, r7
 80007ba:	46b1      	mov	r9, r6
 80007bc:	46a8      	mov	r8, r5
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	002b      	movs	r3, r5
 80007c2:	33ff      	adds	r3, #255	@ 0xff
 80007c4:	2c00      	cmp	r4, #0
 80007c6:	d065      	beq.n	8000894 <__aeabi_fmul+0x160>
 80007c8:	2203      	movs	r2, #3
 80007ca:	4641      	mov	r1, r8
 80007cc:	4311      	orrs	r1, r2
 80007ce:	0032      	movs	r2, r6
 80007d0:	3501      	adds	r5, #1
 80007d2:	4688      	mov	r8, r1
 80007d4:	407a      	eors	r2, r7
 80007d6:	35ff      	adds	r5, #255	@ 0xff
 80007d8:	290a      	cmp	r1, #10
 80007da:	dd00      	ble.n	80007de <__aeabi_fmul+0xaa>
 80007dc:	e0d8      	b.n	8000990 <__aeabi_fmul+0x25c>
 80007de:	0016      	movs	r6, r2
 80007e0:	2103      	movs	r1, #3
 80007e2:	4640      	mov	r0, r8
 80007e4:	2201      	movs	r2, #1
 80007e6:	4082      	lsls	r2, r0
 80007e8:	20a6      	movs	r0, #166	@ 0xa6
 80007ea:	00c0      	lsls	r0, r0, #3
 80007ec:	4202      	tst	r2, r0
 80007ee:	d020      	beq.n	8000832 <__aeabi_fmul+0xfe>
 80007f0:	4653      	mov	r3, sl
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d046      	beq.n	8000884 <__aeabi_fmul+0x150>
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d100      	bne.n	80007fc <__aeabi_fmul+0xc8>
 80007fa:	e0bb      	b.n	8000974 <__aeabi_fmul+0x240>
 80007fc:	4651      	mov	r1, sl
 80007fe:	464c      	mov	r4, r9
 8000800:	2901      	cmp	r1, #1
 8000802:	d0d2      	beq.n	80007aa <__aeabi_fmul+0x76>
 8000804:	002b      	movs	r3, r5
 8000806:	337f      	adds	r3, #127	@ 0x7f
 8000808:	2b00      	cmp	r3, #0
 800080a:	dd70      	ble.n	80008ee <__aeabi_fmul+0x1ba>
 800080c:	0762      	lsls	r2, r4, #29
 800080e:	d004      	beq.n	800081a <__aeabi_fmul+0xe6>
 8000810:	220f      	movs	r2, #15
 8000812:	4022      	ands	r2, r4
 8000814:	2a04      	cmp	r2, #4
 8000816:	d000      	beq.n	800081a <__aeabi_fmul+0xe6>
 8000818:	3404      	adds	r4, #4
 800081a:	0122      	lsls	r2, r4, #4
 800081c:	d503      	bpl.n	8000826 <__aeabi_fmul+0xf2>
 800081e:	4b63      	ldr	r3, [pc, #396]	@ (80009ac <__aeabi_fmul+0x278>)
 8000820:	401c      	ands	r4, r3
 8000822:	002b      	movs	r3, r5
 8000824:	3380      	adds	r3, #128	@ 0x80
 8000826:	2bfe      	cmp	r3, #254	@ 0xfe
 8000828:	dc2c      	bgt.n	8000884 <__aeabi_fmul+0x150>
 800082a:	01a2      	lsls	r2, r4, #6
 800082c:	0a52      	lsrs	r2, r2, #9
 800082e:	b2d8      	uxtb	r0, r3
 8000830:	e7bd      	b.n	80007ae <__aeabi_fmul+0x7a>
 8000832:	2090      	movs	r0, #144	@ 0x90
 8000834:	0080      	lsls	r0, r0, #2
 8000836:	4202      	tst	r2, r0
 8000838:	d127      	bne.n	800088a <__aeabi_fmul+0x156>
 800083a:	38b9      	subs	r0, #185	@ 0xb9
 800083c:	38ff      	subs	r0, #255	@ 0xff
 800083e:	4210      	tst	r0, r2
 8000840:	d06d      	beq.n	800091e <__aeabi_fmul+0x1ea>
 8000842:	003e      	movs	r6, r7
 8000844:	46a1      	mov	r9, r4
 8000846:	468a      	mov	sl, r1
 8000848:	e7d2      	b.n	80007f0 <__aeabi_fmul+0xbc>
 800084a:	2c00      	cmp	r4, #0
 800084c:	d141      	bne.n	80008d2 <__aeabi_fmul+0x19e>
 800084e:	2301      	movs	r3, #1
 8000850:	4642      	mov	r2, r8
 8000852:	431a      	orrs	r2, r3
 8000854:	4690      	mov	r8, r2
 8000856:	002b      	movs	r3, r5
 8000858:	4642      	mov	r2, r8
 800085a:	2101      	movs	r1, #1
 800085c:	1c5d      	adds	r5, r3, #1
 800085e:	2a0a      	cmp	r2, #10
 8000860:	dd97      	ble.n	8000792 <__aeabi_fmul+0x5e>
 8000862:	e7c5      	b.n	80007f0 <__aeabi_fmul+0xbc>
 8000864:	2b00      	cmp	r3, #0
 8000866:	d126      	bne.n	80008b6 <__aeabi_fmul+0x182>
 8000868:	2304      	movs	r3, #4
 800086a:	4698      	mov	r8, r3
 800086c:	3b03      	subs	r3, #3
 800086e:	2500      	movs	r5, #0
 8000870:	469a      	mov	sl, r3
 8000872:	e77a      	b.n	800076a <__aeabi_fmul+0x36>
 8000874:	2b00      	cmp	r3, #0
 8000876:	d118      	bne.n	80008aa <__aeabi_fmul+0x176>
 8000878:	2308      	movs	r3, #8
 800087a:	4698      	mov	r8, r3
 800087c:	3b06      	subs	r3, #6
 800087e:	25ff      	movs	r5, #255	@ 0xff
 8000880:	469a      	mov	sl, r3
 8000882:	e772      	b.n	800076a <__aeabi_fmul+0x36>
 8000884:	20ff      	movs	r0, #255	@ 0xff
 8000886:	2200      	movs	r2, #0
 8000888:	e791      	b.n	80007ae <__aeabi_fmul+0x7a>
 800088a:	2280      	movs	r2, #128	@ 0x80
 800088c:	2600      	movs	r6, #0
 800088e:	20ff      	movs	r0, #255	@ 0xff
 8000890:	03d2      	lsls	r2, r2, #15
 8000892:	e78c      	b.n	80007ae <__aeabi_fmul+0x7a>
 8000894:	4641      	mov	r1, r8
 8000896:	2202      	movs	r2, #2
 8000898:	3501      	adds	r5, #1
 800089a:	4311      	orrs	r1, r2
 800089c:	4688      	mov	r8, r1
 800089e:	35ff      	adds	r5, #255	@ 0xff
 80008a0:	290a      	cmp	r1, #10
 80008a2:	dca5      	bgt.n	80007f0 <__aeabi_fmul+0xbc>
 80008a4:	2102      	movs	r1, #2
 80008a6:	407e      	eors	r6, r7
 80008a8:	e774      	b.n	8000794 <__aeabi_fmul+0x60>
 80008aa:	230c      	movs	r3, #12
 80008ac:	4698      	mov	r8, r3
 80008ae:	3b09      	subs	r3, #9
 80008b0:	25ff      	movs	r5, #255	@ 0xff
 80008b2:	469a      	mov	sl, r3
 80008b4:	e759      	b.n	800076a <__aeabi_fmul+0x36>
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fdd6 	bl	8001468 <__clzsi2>
 80008bc:	464a      	mov	r2, r9
 80008be:	1f43      	subs	r3, r0, #5
 80008c0:	2576      	movs	r5, #118	@ 0x76
 80008c2:	409a      	lsls	r2, r3
 80008c4:	2300      	movs	r3, #0
 80008c6:	426d      	negs	r5, r5
 80008c8:	4691      	mov	r9, r2
 80008ca:	4698      	mov	r8, r3
 80008cc:	469a      	mov	sl, r3
 80008ce:	1a2d      	subs	r5, r5, r0
 80008d0:	e74b      	b.n	800076a <__aeabi_fmul+0x36>
 80008d2:	0020      	movs	r0, r4
 80008d4:	f000 fdc8 	bl	8001468 <__clzsi2>
 80008d8:	4642      	mov	r2, r8
 80008da:	1f43      	subs	r3, r0, #5
 80008dc:	409c      	lsls	r4, r3
 80008de:	1a2b      	subs	r3, r5, r0
 80008e0:	3b76      	subs	r3, #118	@ 0x76
 80008e2:	2100      	movs	r1, #0
 80008e4:	1c5d      	adds	r5, r3, #1
 80008e6:	2a0a      	cmp	r2, #10
 80008e8:	dc00      	bgt.n	80008ec <__aeabi_fmul+0x1b8>
 80008ea:	e752      	b.n	8000792 <__aeabi_fmul+0x5e>
 80008ec:	e780      	b.n	80007f0 <__aeabi_fmul+0xbc>
 80008ee:	2201      	movs	r2, #1
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	2b1b      	cmp	r3, #27
 80008f4:	dd00      	ble.n	80008f8 <__aeabi_fmul+0x1c4>
 80008f6:	e758      	b.n	80007aa <__aeabi_fmul+0x76>
 80008f8:	359e      	adds	r5, #158	@ 0x9e
 80008fa:	0022      	movs	r2, r4
 80008fc:	40ac      	lsls	r4, r5
 80008fe:	40da      	lsrs	r2, r3
 8000900:	1e63      	subs	r3, r4, #1
 8000902:	419c      	sbcs	r4, r3
 8000904:	4322      	orrs	r2, r4
 8000906:	0753      	lsls	r3, r2, #29
 8000908:	d004      	beq.n	8000914 <__aeabi_fmul+0x1e0>
 800090a:	230f      	movs	r3, #15
 800090c:	4013      	ands	r3, r2
 800090e:	2b04      	cmp	r3, #4
 8000910:	d000      	beq.n	8000914 <__aeabi_fmul+0x1e0>
 8000912:	3204      	adds	r2, #4
 8000914:	0153      	lsls	r3, r2, #5
 8000916:	d537      	bpl.n	8000988 <__aeabi_fmul+0x254>
 8000918:	2001      	movs	r0, #1
 800091a:	2200      	movs	r2, #0
 800091c:	e747      	b.n	80007ae <__aeabi_fmul+0x7a>
 800091e:	0c21      	lsrs	r1, r4, #16
 8000920:	464a      	mov	r2, r9
 8000922:	0424      	lsls	r4, r4, #16
 8000924:	0c24      	lsrs	r4, r4, #16
 8000926:	0027      	movs	r7, r4
 8000928:	0c10      	lsrs	r0, r2, #16
 800092a:	0412      	lsls	r2, r2, #16
 800092c:	0c12      	lsrs	r2, r2, #16
 800092e:	4344      	muls	r4, r0
 8000930:	4357      	muls	r7, r2
 8000932:	4348      	muls	r0, r1
 8000934:	4351      	muls	r1, r2
 8000936:	0c3a      	lsrs	r2, r7, #16
 8000938:	1909      	adds	r1, r1, r4
 800093a:	1852      	adds	r2, r2, r1
 800093c:	4294      	cmp	r4, r2
 800093e:	d903      	bls.n	8000948 <__aeabi_fmul+0x214>
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	0249      	lsls	r1, r1, #9
 8000944:	468c      	mov	ip, r1
 8000946:	4460      	add	r0, ip
 8000948:	043f      	lsls	r7, r7, #16
 800094a:	0411      	lsls	r1, r2, #16
 800094c:	0c3f      	lsrs	r7, r7, #16
 800094e:	19c9      	adds	r1, r1, r7
 8000950:	018c      	lsls	r4, r1, #6
 8000952:	1e67      	subs	r7, r4, #1
 8000954:	41bc      	sbcs	r4, r7
 8000956:	0c12      	lsrs	r2, r2, #16
 8000958:	0e89      	lsrs	r1, r1, #26
 800095a:	1812      	adds	r2, r2, r0
 800095c:	430c      	orrs	r4, r1
 800095e:	0192      	lsls	r2, r2, #6
 8000960:	4314      	orrs	r4, r2
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	d50e      	bpl.n	8000984 <__aeabi_fmul+0x250>
 8000966:	2301      	movs	r3, #1
 8000968:	0862      	lsrs	r2, r4, #1
 800096a:	401c      	ands	r4, r3
 800096c:	4314      	orrs	r4, r2
 800096e:	e749      	b.n	8000804 <__aeabi_fmul+0xd0>
 8000970:	003e      	movs	r6, r7
 8000972:	46a1      	mov	r9, r4
 8000974:	2280      	movs	r2, #128	@ 0x80
 8000976:	464b      	mov	r3, r9
 8000978:	03d2      	lsls	r2, r2, #15
 800097a:	431a      	orrs	r2, r3
 800097c:	0252      	lsls	r2, r2, #9
 800097e:	20ff      	movs	r0, #255	@ 0xff
 8000980:	0a52      	lsrs	r2, r2, #9
 8000982:	e714      	b.n	80007ae <__aeabi_fmul+0x7a>
 8000984:	001d      	movs	r5, r3
 8000986:	e73d      	b.n	8000804 <__aeabi_fmul+0xd0>
 8000988:	0192      	lsls	r2, r2, #6
 800098a:	2000      	movs	r0, #0
 800098c:	0a52      	lsrs	r2, r2, #9
 800098e:	e70e      	b.n	80007ae <__aeabi_fmul+0x7a>
 8000990:	290f      	cmp	r1, #15
 8000992:	d1ed      	bne.n	8000970 <__aeabi_fmul+0x23c>
 8000994:	2280      	movs	r2, #128	@ 0x80
 8000996:	464b      	mov	r3, r9
 8000998:	03d2      	lsls	r2, r2, #15
 800099a:	4213      	tst	r3, r2
 800099c:	d0ea      	beq.n	8000974 <__aeabi_fmul+0x240>
 800099e:	4214      	tst	r4, r2
 80009a0:	d1e8      	bne.n	8000974 <__aeabi_fmul+0x240>
 80009a2:	003e      	movs	r6, r7
 80009a4:	20ff      	movs	r0, #255	@ 0xff
 80009a6:	4322      	orrs	r2, r4
 80009a8:	e701      	b.n	80007ae <__aeabi_fmul+0x7a>
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	f7ffffff 	.word	0xf7ffffff

080009b0 <__aeabi_fsub>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	4647      	mov	r7, r8
 80009b4:	46ce      	mov	lr, r9
 80009b6:	024e      	lsls	r6, r1, #9
 80009b8:	0243      	lsls	r3, r0, #9
 80009ba:	0045      	lsls	r5, r0, #1
 80009bc:	0a72      	lsrs	r2, r6, #9
 80009be:	0fc4      	lsrs	r4, r0, #31
 80009c0:	0048      	lsls	r0, r1, #1
 80009c2:	b580      	push	{r7, lr}
 80009c4:	4694      	mov	ip, r2
 80009c6:	0a5f      	lsrs	r7, r3, #9
 80009c8:	0e2d      	lsrs	r5, r5, #24
 80009ca:	099b      	lsrs	r3, r3, #6
 80009cc:	0e00      	lsrs	r0, r0, #24
 80009ce:	0fc9      	lsrs	r1, r1, #31
 80009d0:	09b6      	lsrs	r6, r6, #6
 80009d2:	28ff      	cmp	r0, #255	@ 0xff
 80009d4:	d024      	beq.n	8000a20 <__aeabi_fsub+0x70>
 80009d6:	2201      	movs	r2, #1
 80009d8:	4051      	eors	r1, r2
 80009da:	1a2a      	subs	r2, r5, r0
 80009dc:	428c      	cmp	r4, r1
 80009de:	d00f      	beq.n	8000a00 <__aeabi_fsub+0x50>
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	dc00      	bgt.n	80009e6 <__aeabi_fsub+0x36>
 80009e4:	e16a      	b.n	8000cbc <__aeabi_fsub+0x30c>
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d135      	bne.n	8000a56 <__aeabi_fsub+0xa6>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_fsub+0x40>
 80009ee:	e0a2      	b.n	8000b36 <__aeabi_fsub+0x186>
 80009f0:	1e51      	subs	r1, r2, #1
 80009f2:	2a01      	cmp	r2, #1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_fsub+0x48>
 80009f6:	e124      	b.n	8000c42 <__aeabi_fsub+0x292>
 80009f8:	2aff      	cmp	r2, #255	@ 0xff
 80009fa:	d021      	beq.n	8000a40 <__aeabi_fsub+0x90>
 80009fc:	000a      	movs	r2, r1
 80009fe:	e02f      	b.n	8000a60 <__aeabi_fsub+0xb0>
 8000a00:	2a00      	cmp	r2, #0
 8000a02:	dc00      	bgt.n	8000a06 <__aeabi_fsub+0x56>
 8000a04:	e167      	b.n	8000cd6 <__aeabi_fsub+0x326>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d05e      	beq.n	8000ac8 <__aeabi_fsub+0x118>
 8000a0a:	2dff      	cmp	r5, #255	@ 0xff
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_fsub+0x90>
 8000a0e:	2180      	movs	r1, #128	@ 0x80
 8000a10:	04c9      	lsls	r1, r1, #19
 8000a12:	430e      	orrs	r6, r1
 8000a14:	2a1b      	cmp	r2, #27
 8000a16:	dc00      	bgt.n	8000a1a <__aeabi_fsub+0x6a>
 8000a18:	e076      	b.n	8000b08 <__aeabi_fsub+0x158>
 8000a1a:	002a      	movs	r2, r5
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	e032      	b.n	8000a86 <__aeabi_fsub+0xd6>
 8000a20:	002a      	movs	r2, r5
 8000a22:	3aff      	subs	r2, #255	@ 0xff
 8000a24:	4691      	mov	r9, r2
 8000a26:	2e00      	cmp	r6, #0
 8000a28:	d042      	beq.n	8000ab0 <__aeabi_fsub+0x100>
 8000a2a:	428c      	cmp	r4, r1
 8000a2c:	d055      	beq.n	8000ada <__aeabi_fsub+0x12a>
 8000a2e:	464a      	mov	r2, r9
 8000a30:	2a00      	cmp	r2, #0
 8000a32:	d100      	bne.n	8000a36 <__aeabi_fsub+0x86>
 8000a34:	e09c      	b.n	8000b70 <__aeabi_fsub+0x1c0>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x8c>
 8000a3a:	e077      	b.n	8000b2c <__aeabi_fsub+0x17c>
 8000a3c:	000c      	movs	r4, r1
 8000a3e:	0033      	movs	r3, r6
 8000a40:	08db      	lsrs	r3, r3, #3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fsub+0x98>
 8000a46:	e06e      	b.n	8000b26 <__aeabi_fsub+0x176>
 8000a48:	2280      	movs	r2, #128	@ 0x80
 8000a4a:	03d2      	lsls	r2, r2, #15
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	025b      	lsls	r3, r3, #9
 8000a50:	20ff      	movs	r0, #255	@ 0xff
 8000a52:	0a5b      	lsrs	r3, r3, #9
 8000a54:	e024      	b.n	8000aa0 <__aeabi_fsub+0xf0>
 8000a56:	2dff      	cmp	r5, #255	@ 0xff
 8000a58:	d0f2      	beq.n	8000a40 <__aeabi_fsub+0x90>
 8000a5a:	2180      	movs	r1, #128	@ 0x80
 8000a5c:	04c9      	lsls	r1, r1, #19
 8000a5e:	430e      	orrs	r6, r1
 8000a60:	2101      	movs	r1, #1
 8000a62:	2a1b      	cmp	r2, #27
 8000a64:	dc08      	bgt.n	8000a78 <__aeabi_fsub+0xc8>
 8000a66:	0031      	movs	r1, r6
 8000a68:	2020      	movs	r0, #32
 8000a6a:	40d1      	lsrs	r1, r2
 8000a6c:	1a82      	subs	r2, r0, r2
 8000a6e:	4096      	lsls	r6, r2
 8000a70:	0032      	movs	r2, r6
 8000a72:	1e50      	subs	r0, r2, #1
 8000a74:	4182      	sbcs	r2, r0
 8000a76:	4311      	orrs	r1, r2
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	015a      	lsls	r2, r3, #5
 8000a7c:	d460      	bmi.n	8000b40 <__aeabi_fsub+0x190>
 8000a7e:	2107      	movs	r1, #7
 8000a80:	002a      	movs	r2, r5
 8000a82:	4019      	ands	r1, r3
 8000a84:	d057      	beq.n	8000b36 <__aeabi_fsub+0x186>
 8000a86:	210f      	movs	r1, #15
 8000a88:	4019      	ands	r1, r3
 8000a8a:	2904      	cmp	r1, #4
 8000a8c:	d000      	beq.n	8000a90 <__aeabi_fsub+0xe0>
 8000a8e:	3304      	adds	r3, #4
 8000a90:	0159      	lsls	r1, r3, #5
 8000a92:	d550      	bpl.n	8000b36 <__aeabi_fsub+0x186>
 8000a94:	1c50      	adds	r0, r2, #1
 8000a96:	2afe      	cmp	r2, #254	@ 0xfe
 8000a98:	d045      	beq.n	8000b26 <__aeabi_fsub+0x176>
 8000a9a:	019b      	lsls	r3, r3, #6
 8000a9c:	b2c0      	uxtb	r0, r0
 8000a9e:	0a5b      	lsrs	r3, r3, #9
 8000aa0:	05c0      	lsls	r0, r0, #23
 8000aa2:	4318      	orrs	r0, r3
 8000aa4:	07e4      	lsls	r4, r4, #31
 8000aa6:	4320      	orrs	r0, r4
 8000aa8:	bcc0      	pop	{r6, r7}
 8000aaa:	46b9      	mov	r9, r7
 8000aac:	46b0      	mov	r8, r6
 8000aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4051      	eors	r1, r2
 8000ab4:	428c      	cmp	r4, r1
 8000ab6:	d1ba      	bne.n	8000a2e <__aeabi_fsub+0x7e>
 8000ab8:	464a      	mov	r2, r9
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d010      	beq.n	8000ae0 <__aeabi_fsub+0x130>
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fsub+0x114>
 8000ac2:	e098      	b.n	8000bf6 <__aeabi_fsub+0x246>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e7bb      	b.n	8000a40 <__aeabi_fsub+0x90>
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d034      	beq.n	8000b36 <__aeabi_fsub+0x186>
 8000acc:	1e51      	subs	r1, r2, #1
 8000ace:	2a01      	cmp	r2, #1
 8000ad0:	d06e      	beq.n	8000bb0 <__aeabi_fsub+0x200>
 8000ad2:	2aff      	cmp	r2, #255	@ 0xff
 8000ad4:	d0b4      	beq.n	8000a40 <__aeabi_fsub+0x90>
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	e79c      	b.n	8000a14 <__aeabi_fsub+0x64>
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_fsub+0x130>
 8000ade:	e088      	b.n	8000bf2 <__aeabi_fsub+0x242>
 8000ae0:	20fe      	movs	r0, #254	@ 0xfe
 8000ae2:	1c6a      	adds	r2, r5, #1
 8000ae4:	4210      	tst	r0, r2
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fsub+0x13a>
 8000ae8:	e092      	b.n	8000c10 <__aeabi_fsub+0x260>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d000      	beq.n	8000af0 <__aeabi_fsub+0x140>
 8000aee:	e0a4      	b.n	8000c3a <__aeabi_fsub+0x28a>
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d100      	bne.n	8000af6 <__aeabi_fsub+0x146>
 8000af4:	e0cb      	b.n	8000c8e <__aeabi_fsub+0x2de>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	d000      	beq.n	8000afc <__aeabi_fsub+0x14c>
 8000afa:	e0ca      	b.n	8000c92 <__aeabi_fsub+0x2e2>
 8000afc:	2200      	movs	r2, #0
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	025b      	lsls	r3, r3, #9
 8000b02:	0a5b      	lsrs	r3, r3, #9
 8000b04:	b2d0      	uxtb	r0, r2
 8000b06:	e7cb      	b.n	8000aa0 <__aeabi_fsub+0xf0>
 8000b08:	0031      	movs	r1, r6
 8000b0a:	2020      	movs	r0, #32
 8000b0c:	40d1      	lsrs	r1, r2
 8000b0e:	1a82      	subs	r2, r0, r2
 8000b10:	4096      	lsls	r6, r2
 8000b12:	0032      	movs	r2, r6
 8000b14:	1e50      	subs	r0, r2, #1
 8000b16:	4182      	sbcs	r2, r0
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	189b      	adds	r3, r3, r2
 8000b1c:	015a      	lsls	r2, r3, #5
 8000b1e:	d5ae      	bpl.n	8000a7e <__aeabi_fsub+0xce>
 8000b20:	1c6a      	adds	r2, r5, #1
 8000b22:	2dfe      	cmp	r5, #254	@ 0xfe
 8000b24:	d14a      	bne.n	8000bbc <__aeabi_fsub+0x20c>
 8000b26:	20ff      	movs	r0, #255	@ 0xff
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e7b9      	b.n	8000aa0 <__aeabi_fsub+0xf0>
 8000b2c:	22ff      	movs	r2, #255	@ 0xff
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d14b      	bne.n	8000bca <__aeabi_fsub+0x21a>
 8000b32:	000c      	movs	r4, r1
 8000b34:	0033      	movs	r3, r6
 8000b36:	08db      	lsrs	r3, r3, #3
 8000b38:	2aff      	cmp	r2, #255	@ 0xff
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_fsub+0x18e>
 8000b3c:	e781      	b.n	8000a42 <__aeabi_fsub+0x92>
 8000b3e:	e7df      	b.n	8000b00 <__aeabi_fsub+0x150>
 8000b40:	019f      	lsls	r7, r3, #6
 8000b42:	09bf      	lsrs	r7, r7, #6
 8000b44:	0038      	movs	r0, r7
 8000b46:	f000 fc8f 	bl	8001468 <__clzsi2>
 8000b4a:	3805      	subs	r0, #5
 8000b4c:	4087      	lsls	r7, r0
 8000b4e:	4285      	cmp	r5, r0
 8000b50:	dc21      	bgt.n	8000b96 <__aeabi_fsub+0x1e6>
 8000b52:	003b      	movs	r3, r7
 8000b54:	2120      	movs	r1, #32
 8000b56:	1b42      	subs	r2, r0, r5
 8000b58:	3201      	adds	r2, #1
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	1a8a      	subs	r2, r1, r2
 8000b5e:	4097      	lsls	r7, r2
 8000b60:	1e7a      	subs	r2, r7, #1
 8000b62:	4197      	sbcs	r7, r2
 8000b64:	2200      	movs	r2, #0
 8000b66:	433b      	orrs	r3, r7
 8000b68:	0759      	lsls	r1, r3, #29
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_fsub+0x1be>
 8000b6c:	e78b      	b.n	8000a86 <__aeabi_fsub+0xd6>
 8000b6e:	e78f      	b.n	8000a90 <__aeabi_fsub+0xe0>
 8000b70:	20fe      	movs	r0, #254	@ 0xfe
 8000b72:	1c6a      	adds	r2, r5, #1
 8000b74:	4210      	tst	r0, r2
 8000b76:	d112      	bne.n	8000b9e <__aeabi_fsub+0x1ee>
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d152      	bne.n	8000c22 <__aeabi_fsub+0x272>
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d07c      	beq.n	8000c7a <__aeabi_fsub+0x2ca>
 8000b80:	2e00      	cmp	r6, #0
 8000b82:	d0bb      	beq.n	8000afc <__aeabi_fsub+0x14c>
 8000b84:	1b9a      	subs	r2, r3, r6
 8000b86:	0150      	lsls	r0, r2, #5
 8000b88:	d400      	bmi.n	8000b8c <__aeabi_fsub+0x1dc>
 8000b8a:	e08b      	b.n	8000ca4 <__aeabi_fsub+0x2f4>
 8000b8c:	2401      	movs	r4, #1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	1af3      	subs	r3, r6, r3
 8000b92:	400c      	ands	r4, r1
 8000b94:	e7e8      	b.n	8000b68 <__aeabi_fsub+0x1b8>
 8000b96:	4b56      	ldr	r3, [pc, #344]	@ (8000cf0 <__aeabi_fsub+0x340>)
 8000b98:	1a2a      	subs	r2, r5, r0
 8000b9a:	403b      	ands	r3, r7
 8000b9c:	e7e4      	b.n	8000b68 <__aeabi_fsub+0x1b8>
 8000b9e:	1b9f      	subs	r7, r3, r6
 8000ba0:	017a      	lsls	r2, r7, #5
 8000ba2:	d446      	bmi.n	8000c32 <__aeabi_fsub+0x282>
 8000ba4:	2f00      	cmp	r7, #0
 8000ba6:	d1cd      	bne.n	8000b44 <__aeabi_fsub+0x194>
 8000ba8:	2400      	movs	r4, #0
 8000baa:	2000      	movs	r0, #0
 8000bac:	2300      	movs	r3, #0
 8000bae:	e777      	b.n	8000aa0 <__aeabi_fsub+0xf0>
 8000bb0:	199b      	adds	r3, r3, r6
 8000bb2:	2501      	movs	r5, #1
 8000bb4:	3201      	adds	r2, #1
 8000bb6:	0159      	lsls	r1, r3, #5
 8000bb8:	d400      	bmi.n	8000bbc <__aeabi_fsub+0x20c>
 8000bba:	e760      	b.n	8000a7e <__aeabi_fsub+0xce>
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	484d      	ldr	r0, [pc, #308]	@ (8000cf4 <__aeabi_fsub+0x344>)
 8000bc0:	4019      	ands	r1, r3
 8000bc2:	085b      	lsrs	r3, r3, #1
 8000bc4:	4003      	ands	r3, r0
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	e7ce      	b.n	8000b68 <__aeabi_fsub+0x1b8>
 8000bca:	1e57      	subs	r7, r2, #1
 8000bcc:	2a01      	cmp	r2, #1
 8000bce:	d05a      	beq.n	8000c86 <__aeabi_fsub+0x2d6>
 8000bd0:	000c      	movs	r4, r1
 8000bd2:	2aff      	cmp	r2, #255	@ 0xff
 8000bd4:	d033      	beq.n	8000c3e <__aeabi_fsub+0x28e>
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2f1b      	cmp	r7, #27
 8000bda:	dc07      	bgt.n	8000bec <__aeabi_fsub+0x23c>
 8000bdc:	2120      	movs	r1, #32
 8000bde:	1bc9      	subs	r1, r1, r7
 8000be0:	001a      	movs	r2, r3
 8000be2:	408b      	lsls	r3, r1
 8000be4:	40fa      	lsrs	r2, r7
 8000be6:	1e59      	subs	r1, r3, #1
 8000be8:	418b      	sbcs	r3, r1
 8000bea:	431a      	orrs	r2, r3
 8000bec:	0005      	movs	r5, r0
 8000bee:	1ab3      	subs	r3, r6, r2
 8000bf0:	e743      	b.n	8000a7a <__aeabi_fsub+0xca>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	d123      	bne.n	8000c3e <__aeabi_fsub+0x28e>
 8000bf6:	22ff      	movs	r2, #255	@ 0xff
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d09b      	beq.n	8000b34 <__aeabi_fsub+0x184>
 8000bfc:	1e51      	subs	r1, r2, #1
 8000bfe:	2a01      	cmp	r2, #1
 8000c00:	d0d6      	beq.n	8000bb0 <__aeabi_fsub+0x200>
 8000c02:	2aff      	cmp	r2, #255	@ 0xff
 8000c04:	d01b      	beq.n	8000c3e <__aeabi_fsub+0x28e>
 8000c06:	291b      	cmp	r1, #27
 8000c08:	dd2c      	ble.n	8000c64 <__aeabi_fsub+0x2b4>
 8000c0a:	0002      	movs	r2, r0
 8000c0c:	1c73      	adds	r3, r6, #1
 8000c0e:	e73a      	b.n	8000a86 <__aeabi_fsub+0xd6>
 8000c10:	2aff      	cmp	r2, #255	@ 0xff
 8000c12:	d088      	beq.n	8000b26 <__aeabi_fsub+0x176>
 8000c14:	199b      	adds	r3, r3, r6
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	0759      	lsls	r1, r3, #29
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_fsub+0x26e>
 8000c1c:	e733      	b.n	8000a86 <__aeabi_fsub+0xd6>
 8000c1e:	08db      	lsrs	r3, r3, #3
 8000c20:	e76e      	b.n	8000b00 <__aeabi_fsub+0x150>
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d110      	bne.n	8000c48 <__aeabi_fsub+0x298>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d043      	beq.n	8000cb2 <__aeabi_fsub+0x302>
 8000c2a:	2401      	movs	r4, #1
 8000c2c:	0033      	movs	r3, r6
 8000c2e:	400c      	ands	r4, r1
 8000c30:	e706      	b.n	8000a40 <__aeabi_fsub+0x90>
 8000c32:	2401      	movs	r4, #1
 8000c34:	1af7      	subs	r7, r6, r3
 8000c36:	400c      	ands	r4, r1
 8000c38:	e784      	b.n	8000b44 <__aeabi_fsub+0x194>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d104      	bne.n	8000c48 <__aeabi_fsub+0x298>
 8000c3e:	0033      	movs	r3, r6
 8000c40:	e6fe      	b.n	8000a40 <__aeabi_fsub+0x90>
 8000c42:	2501      	movs	r5, #1
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	e718      	b.n	8000a7a <__aeabi_fsub+0xca>
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_fsub+0x29e>
 8000c4c:	e6f8      	b.n	8000a40 <__aeabi_fsub+0x90>
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	03d2      	lsls	r2, r2, #15
 8000c52:	4297      	cmp	r7, r2
 8000c54:	d304      	bcc.n	8000c60 <__aeabi_fsub+0x2b0>
 8000c56:	4594      	cmp	ip, r2
 8000c58:	d202      	bcs.n	8000c60 <__aeabi_fsub+0x2b0>
 8000c5a:	2401      	movs	r4, #1
 8000c5c:	0033      	movs	r3, r6
 8000c5e:	400c      	ands	r4, r1
 8000c60:	08db      	lsrs	r3, r3, #3
 8000c62:	e6f1      	b.n	8000a48 <__aeabi_fsub+0x98>
 8000c64:	001a      	movs	r2, r3
 8000c66:	2520      	movs	r5, #32
 8000c68:	40ca      	lsrs	r2, r1
 8000c6a:	1a69      	subs	r1, r5, r1
 8000c6c:	408b      	lsls	r3, r1
 8000c6e:	1e59      	subs	r1, r3, #1
 8000c70:	418b      	sbcs	r3, r1
 8000c72:	4313      	orrs	r3, r2
 8000c74:	0005      	movs	r5, r0
 8000c76:	199b      	adds	r3, r3, r6
 8000c78:	e750      	b.n	8000b1c <__aeabi_fsub+0x16c>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	d094      	beq.n	8000ba8 <__aeabi_fsub+0x1f8>
 8000c7e:	2401      	movs	r4, #1
 8000c80:	0033      	movs	r3, r6
 8000c82:	400c      	ands	r4, r1
 8000c84:	e73a      	b.n	8000afc <__aeabi_fsub+0x14c>
 8000c86:	000c      	movs	r4, r1
 8000c88:	2501      	movs	r5, #1
 8000c8a:	1af3      	subs	r3, r6, r3
 8000c8c:	e6f5      	b.n	8000a7a <__aeabi_fsub+0xca>
 8000c8e:	0033      	movs	r3, r6
 8000c90:	e734      	b.n	8000afc <__aeabi_fsub+0x14c>
 8000c92:	199b      	adds	r3, r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	0159      	lsls	r1, r3, #5
 8000c98:	d5c1      	bpl.n	8000c1e <__aeabi_fsub+0x26e>
 8000c9a:	4a15      	ldr	r2, [pc, #84]	@ (8000cf0 <__aeabi_fsub+0x340>)
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	e72d      	b.n	8000b00 <__aeabi_fsub+0x150>
 8000ca4:	2a00      	cmp	r2, #0
 8000ca6:	d100      	bne.n	8000caa <__aeabi_fsub+0x2fa>
 8000ca8:	e77e      	b.n	8000ba8 <__aeabi_fsub+0x1f8>
 8000caa:	0013      	movs	r3, r2
 8000cac:	2200      	movs	r2, #0
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	e726      	b.n	8000b00 <__aeabi_fsub+0x150>
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	2400      	movs	r4, #0
 8000cb6:	20ff      	movs	r0, #255	@ 0xff
 8000cb8:	03db      	lsls	r3, r3, #15
 8000cba:	e6f1      	b.n	8000aa0 <__aeabi_fsub+0xf0>
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_fsub+0x312>
 8000cc0:	e756      	b.n	8000b70 <__aeabi_fsub+0x1c0>
 8000cc2:	1b47      	subs	r7, r0, r5
 8000cc4:	003a      	movs	r2, r7
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x31c>
 8000cca:	e730      	b.n	8000b2e <__aeabi_fsub+0x17e>
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	04d2      	lsls	r2, r2, #19
 8000cd0:	000c      	movs	r4, r1
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	e77f      	b.n	8000bd6 <__aeabi_fsub+0x226>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x32c>
 8000cda:	e701      	b.n	8000ae0 <__aeabi_fsub+0x130>
 8000cdc:	1b41      	subs	r1, r0, r5
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fsub+0x336>
 8000ce2:	000a      	movs	r2, r1
 8000ce4:	e788      	b.n	8000bf8 <__aeabi_fsub+0x248>
 8000ce6:	2280      	movs	r2, #128	@ 0x80
 8000ce8:	04d2      	lsls	r2, r2, #19
 8000cea:	4313      	orrs	r3, r2
 8000cec:	e78b      	b.n	8000c06 <__aeabi_fsub+0x256>
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	fbffffff 	.word	0xfbffffff
 8000cf4:	7dffffff 	.word	0x7dffffff

08000cf8 <__aeabi_f2iz>:
 8000cf8:	0241      	lsls	r1, r0, #9
 8000cfa:	0042      	lsls	r2, r0, #1
 8000cfc:	0fc3      	lsrs	r3, r0, #31
 8000cfe:	0a49      	lsrs	r1, r1, #9
 8000d00:	2000      	movs	r0, #0
 8000d02:	0e12      	lsrs	r2, r2, #24
 8000d04:	2a7e      	cmp	r2, #126	@ 0x7e
 8000d06:	dd03      	ble.n	8000d10 <__aeabi_f2iz+0x18>
 8000d08:	2a9d      	cmp	r2, #157	@ 0x9d
 8000d0a:	dd02      	ble.n	8000d12 <__aeabi_f2iz+0x1a>
 8000d0c:	4a09      	ldr	r2, [pc, #36]	@ (8000d34 <__aeabi_f2iz+0x3c>)
 8000d0e:	1898      	adds	r0, r3, r2
 8000d10:	4770      	bx	lr
 8000d12:	2080      	movs	r0, #128	@ 0x80
 8000d14:	0400      	lsls	r0, r0, #16
 8000d16:	4301      	orrs	r1, r0
 8000d18:	2a95      	cmp	r2, #149	@ 0x95
 8000d1a:	dc07      	bgt.n	8000d2c <__aeabi_f2iz+0x34>
 8000d1c:	2096      	movs	r0, #150	@ 0x96
 8000d1e:	1a82      	subs	r2, r0, r2
 8000d20:	40d1      	lsrs	r1, r2
 8000d22:	4248      	negs	r0, r1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f3      	bne.n	8000d10 <__aeabi_f2iz+0x18>
 8000d28:	0008      	movs	r0, r1
 8000d2a:	e7f1      	b.n	8000d10 <__aeabi_f2iz+0x18>
 8000d2c:	3a96      	subs	r2, #150	@ 0x96
 8000d2e:	4091      	lsls	r1, r2
 8000d30:	e7f7      	b.n	8000d22 <__aeabi_f2iz+0x2a>
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	7fffffff 	.word	0x7fffffff

08000d38 <__aeabi_i2f>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d013      	beq.n	8000d66 <__aeabi_i2f+0x2e>
 8000d3e:	17c3      	asrs	r3, r0, #31
 8000d40:	18c5      	adds	r5, r0, r3
 8000d42:	405d      	eors	r5, r3
 8000d44:	0fc4      	lsrs	r4, r0, #31
 8000d46:	0028      	movs	r0, r5
 8000d48:	f000 fb8e 	bl	8001468 <__clzsi2>
 8000d4c:	239e      	movs	r3, #158	@ 0x9e
 8000d4e:	0001      	movs	r1, r0
 8000d50:	1a1b      	subs	r3, r3, r0
 8000d52:	2b96      	cmp	r3, #150	@ 0x96
 8000d54:	dc0f      	bgt.n	8000d76 <__aeabi_i2f+0x3e>
 8000d56:	2808      	cmp	r0, #8
 8000d58:	d034      	beq.n	8000dc4 <__aeabi_i2f+0x8c>
 8000d5a:	3908      	subs	r1, #8
 8000d5c:	408d      	lsls	r5, r1
 8000d5e:	026d      	lsls	r5, r5, #9
 8000d60:	0a6d      	lsrs	r5, r5, #9
 8000d62:	b2d8      	uxtb	r0, r3
 8000d64:	e002      	b.n	8000d6c <__aeabi_i2f+0x34>
 8000d66:	2400      	movs	r4, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	2500      	movs	r5, #0
 8000d6c:	05c0      	lsls	r0, r0, #23
 8000d6e:	4328      	orrs	r0, r5
 8000d70:	07e4      	lsls	r4, r4, #31
 8000d72:	4320      	orrs	r0, r4
 8000d74:	bd70      	pop	{r4, r5, r6, pc}
 8000d76:	2b99      	cmp	r3, #153	@ 0x99
 8000d78:	dc16      	bgt.n	8000da8 <__aeabi_i2f+0x70>
 8000d7a:	1f42      	subs	r2, r0, #5
 8000d7c:	2805      	cmp	r0, #5
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_i2f+0x4a>
 8000d80:	4095      	lsls	r5, r2
 8000d82:	002a      	movs	r2, r5
 8000d84:	4811      	ldr	r0, [pc, #68]	@ (8000dcc <__aeabi_i2f+0x94>)
 8000d86:	4002      	ands	r2, r0
 8000d88:	076e      	lsls	r6, r5, #29
 8000d8a:	d009      	beq.n	8000da0 <__aeabi_i2f+0x68>
 8000d8c:	260f      	movs	r6, #15
 8000d8e:	4035      	ands	r5, r6
 8000d90:	2d04      	cmp	r5, #4
 8000d92:	d005      	beq.n	8000da0 <__aeabi_i2f+0x68>
 8000d94:	3204      	adds	r2, #4
 8000d96:	0155      	lsls	r5, r2, #5
 8000d98:	d502      	bpl.n	8000da0 <__aeabi_i2f+0x68>
 8000d9a:	239f      	movs	r3, #159	@ 0x9f
 8000d9c:	4002      	ands	r2, r0
 8000d9e:	1a5b      	subs	r3, r3, r1
 8000da0:	0192      	lsls	r2, r2, #6
 8000da2:	0a55      	lsrs	r5, r2, #9
 8000da4:	b2d8      	uxtb	r0, r3
 8000da6:	e7e1      	b.n	8000d6c <__aeabi_i2f+0x34>
 8000da8:	2205      	movs	r2, #5
 8000daa:	1a12      	subs	r2, r2, r0
 8000dac:	0028      	movs	r0, r5
 8000dae:	40d0      	lsrs	r0, r2
 8000db0:	0002      	movs	r2, r0
 8000db2:	0008      	movs	r0, r1
 8000db4:	301b      	adds	r0, #27
 8000db6:	4085      	lsls	r5, r0
 8000db8:	0028      	movs	r0, r5
 8000dba:	1e45      	subs	r5, r0, #1
 8000dbc:	41a8      	sbcs	r0, r5
 8000dbe:	4302      	orrs	r2, r0
 8000dc0:	0015      	movs	r5, r2
 8000dc2:	e7de      	b.n	8000d82 <__aeabi_i2f+0x4a>
 8000dc4:	026d      	lsls	r5, r5, #9
 8000dc6:	2096      	movs	r0, #150	@ 0x96
 8000dc8:	0a6d      	lsrs	r5, r5, #9
 8000dca:	e7cf      	b.n	8000d6c <__aeabi_i2f+0x34>
 8000dcc:	fbffffff 	.word	0xfbffffff

08000dd0 <__aeabi_dmul>:
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	4657      	mov	r7, sl
 8000dd4:	46de      	mov	lr, fp
 8000dd6:	464e      	mov	r6, r9
 8000dd8:	4645      	mov	r5, r8
 8000dda:	b5e0      	push	{r5, r6, r7, lr}
 8000ddc:	001f      	movs	r7, r3
 8000dde:	030b      	lsls	r3, r1, #12
 8000de0:	0b1b      	lsrs	r3, r3, #12
 8000de2:	0016      	movs	r6, r2
 8000de4:	469a      	mov	sl, r3
 8000de6:	0fca      	lsrs	r2, r1, #31
 8000de8:	004b      	lsls	r3, r1, #1
 8000dea:	0004      	movs	r4, r0
 8000dec:	4693      	mov	fp, r2
 8000dee:	b087      	sub	sp, #28
 8000df0:	0d5b      	lsrs	r3, r3, #21
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dmul+0x26>
 8000df4:	e0d5      	b.n	8000fa2 <__aeabi_dmul+0x1d2>
 8000df6:	4abb      	ldr	r2, [pc, #748]	@ (80010e4 <__aeabi_dmul+0x314>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_dmul+0x2e>
 8000dfc:	e0f8      	b.n	8000ff0 <__aeabi_dmul+0x220>
 8000dfe:	4651      	mov	r1, sl
 8000e00:	0f42      	lsrs	r2, r0, #29
 8000e02:	00c9      	lsls	r1, r1, #3
 8000e04:	430a      	orrs	r2, r1
 8000e06:	2180      	movs	r1, #128	@ 0x80
 8000e08:	0409      	lsls	r1, r1, #16
 8000e0a:	4311      	orrs	r1, r2
 8000e0c:	00c2      	lsls	r2, r0, #3
 8000e0e:	4691      	mov	r9, r2
 8000e10:	4ab5      	ldr	r2, [pc, #724]	@ (80010e8 <__aeabi_dmul+0x318>)
 8000e12:	468a      	mov	sl, r1
 8000e14:	189d      	adds	r5, r3, r2
 8000e16:	2300      	movs	r3, #0
 8000e18:	4698      	mov	r8, r3
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	033c      	lsls	r4, r7, #12
 8000e1e:	007b      	lsls	r3, r7, #1
 8000e20:	0ffa      	lsrs	r2, r7, #31
 8000e22:	0030      	movs	r0, r6
 8000e24:	0b24      	lsrs	r4, r4, #12
 8000e26:	0d5b      	lsrs	r3, r3, #21
 8000e28:	9200      	str	r2, [sp, #0]
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_dmul+0x5e>
 8000e2c:	e096      	b.n	8000f5c <__aeabi_dmul+0x18c>
 8000e2e:	4aad      	ldr	r2, [pc, #692]	@ (80010e4 <__aeabi_dmul+0x314>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d031      	beq.n	8000e98 <__aeabi_dmul+0xc8>
 8000e34:	0f72      	lsrs	r2, r6, #29
 8000e36:	00e4      	lsls	r4, r4, #3
 8000e38:	4322      	orrs	r2, r4
 8000e3a:	2480      	movs	r4, #128	@ 0x80
 8000e3c:	0424      	lsls	r4, r4, #16
 8000e3e:	4314      	orrs	r4, r2
 8000e40:	4aa9      	ldr	r2, [pc, #676]	@ (80010e8 <__aeabi_dmul+0x318>)
 8000e42:	00f0      	lsls	r0, r6, #3
 8000e44:	4694      	mov	ip, r2
 8000e46:	4463      	add	r3, ip
 8000e48:	195b      	adds	r3, r3, r5
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	9201      	str	r2, [sp, #4]
 8000e4e:	4642      	mov	r2, r8
 8000e50:	2600      	movs	r6, #0
 8000e52:	2a0a      	cmp	r2, #10
 8000e54:	dc42      	bgt.n	8000edc <__aeabi_dmul+0x10c>
 8000e56:	465a      	mov	r2, fp
 8000e58:	9900      	ldr	r1, [sp, #0]
 8000e5a:	404a      	eors	r2, r1
 8000e5c:	4693      	mov	fp, r2
 8000e5e:	4642      	mov	r2, r8
 8000e60:	2a02      	cmp	r2, #2
 8000e62:	dc32      	bgt.n	8000eca <__aeabi_dmul+0xfa>
 8000e64:	3a01      	subs	r2, #1
 8000e66:	2a01      	cmp	r2, #1
 8000e68:	d900      	bls.n	8000e6c <__aeabi_dmul+0x9c>
 8000e6a:	e149      	b.n	8001100 <__aeabi_dmul+0x330>
 8000e6c:	2e02      	cmp	r6, #2
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dmul+0xa2>
 8000e70:	e0ca      	b.n	8001008 <__aeabi_dmul+0x238>
 8000e72:	2e01      	cmp	r6, #1
 8000e74:	d13d      	bne.n	8000ef2 <__aeabi_dmul+0x122>
 8000e76:	2300      	movs	r3, #0
 8000e78:	2400      	movs	r4, #0
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	465a      	mov	r2, fp
 8000e80:	051b      	lsls	r3, r3, #20
 8000e82:	4323      	orrs	r3, r4
 8000e84:	07d2      	lsls	r2, r2, #31
 8000e86:	4313      	orrs	r3, r2
 8000e88:	0019      	movs	r1, r3
 8000e8a:	b007      	add	sp, #28
 8000e8c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e8e:	46bb      	mov	fp, r7
 8000e90:	46b2      	mov	sl, r6
 8000e92:	46a9      	mov	r9, r5
 8000e94:	46a0      	mov	r8, r4
 8000e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e98:	4b92      	ldr	r3, [pc, #584]	@ (80010e4 <__aeabi_dmul+0x314>)
 8000e9a:	4326      	orrs	r6, r4
 8000e9c:	18eb      	adds	r3, r5, r3
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d100      	bne.n	8000ea4 <__aeabi_dmul+0xd4>
 8000ea2:	e0bb      	b.n	800101c <__aeabi_dmul+0x24c>
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	4641      	mov	r1, r8
 8000ea8:	4311      	orrs	r1, r2
 8000eaa:	465a      	mov	r2, fp
 8000eac:	4688      	mov	r8, r1
 8000eae:	9900      	ldr	r1, [sp, #0]
 8000eb0:	404a      	eors	r2, r1
 8000eb2:	2180      	movs	r1, #128	@ 0x80
 8000eb4:	0109      	lsls	r1, r1, #4
 8000eb6:	468c      	mov	ip, r1
 8000eb8:	0029      	movs	r1, r5
 8000eba:	4461      	add	r1, ip
 8000ebc:	9101      	str	r1, [sp, #4]
 8000ebe:	4641      	mov	r1, r8
 8000ec0:	290a      	cmp	r1, #10
 8000ec2:	dd00      	ble.n	8000ec6 <__aeabi_dmul+0xf6>
 8000ec4:	e233      	b.n	800132e <__aeabi_dmul+0x55e>
 8000ec6:	4693      	mov	fp, r2
 8000ec8:	2603      	movs	r6, #3
 8000eca:	4642      	mov	r2, r8
 8000ecc:	2701      	movs	r7, #1
 8000ece:	4097      	lsls	r7, r2
 8000ed0:	21a6      	movs	r1, #166	@ 0xa6
 8000ed2:	003a      	movs	r2, r7
 8000ed4:	00c9      	lsls	r1, r1, #3
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	420f      	tst	r7, r1
 8000eda:	d031      	beq.n	8000f40 <__aeabi_dmul+0x170>
 8000edc:	9e02      	ldr	r6, [sp, #8]
 8000ede:	2e02      	cmp	r6, #2
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dmul+0x114>
 8000ee2:	e235      	b.n	8001350 <__aeabi_dmul+0x580>
 8000ee4:	2e03      	cmp	r6, #3
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dmul+0x11a>
 8000ee8:	e1d2      	b.n	8001290 <__aeabi_dmul+0x4c0>
 8000eea:	4654      	mov	r4, sl
 8000eec:	4648      	mov	r0, r9
 8000eee:	2e01      	cmp	r6, #1
 8000ef0:	d0c1      	beq.n	8000e76 <__aeabi_dmul+0xa6>
 8000ef2:	9a01      	ldr	r2, [sp, #4]
 8000ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80010ec <__aeabi_dmul+0x31c>)
 8000ef6:	4694      	mov	ip, r2
 8000ef8:	4463      	add	r3, ip
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	dc00      	bgt.n	8000f00 <__aeabi_dmul+0x130>
 8000efe:	e0c0      	b.n	8001082 <__aeabi_dmul+0x2b2>
 8000f00:	0742      	lsls	r2, r0, #29
 8000f02:	d009      	beq.n	8000f18 <__aeabi_dmul+0x148>
 8000f04:	220f      	movs	r2, #15
 8000f06:	4002      	ands	r2, r0
 8000f08:	2a04      	cmp	r2, #4
 8000f0a:	d005      	beq.n	8000f18 <__aeabi_dmul+0x148>
 8000f0c:	1d02      	adds	r2, r0, #4
 8000f0e:	4282      	cmp	r2, r0
 8000f10:	4180      	sbcs	r0, r0
 8000f12:	4240      	negs	r0, r0
 8000f14:	1824      	adds	r4, r4, r0
 8000f16:	0010      	movs	r0, r2
 8000f18:	01e2      	lsls	r2, r4, #7
 8000f1a:	d506      	bpl.n	8000f2a <__aeabi_dmul+0x15a>
 8000f1c:	4b74      	ldr	r3, [pc, #464]	@ (80010f0 <__aeabi_dmul+0x320>)
 8000f1e:	9a01      	ldr	r2, [sp, #4]
 8000f20:	401c      	ands	r4, r3
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	4694      	mov	ip, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4463      	add	r3, ip
 8000f2a:	4a72      	ldr	r2, [pc, #456]	@ (80010f4 <__aeabi_dmul+0x324>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	dc6b      	bgt.n	8001008 <__aeabi_dmul+0x238>
 8000f30:	0762      	lsls	r2, r4, #29
 8000f32:	08c0      	lsrs	r0, r0, #3
 8000f34:	0264      	lsls	r4, r4, #9
 8000f36:	055b      	lsls	r3, r3, #21
 8000f38:	4302      	orrs	r2, r0
 8000f3a:	0b24      	lsrs	r4, r4, #12
 8000f3c:	0d5b      	lsrs	r3, r3, #21
 8000f3e:	e79d      	b.n	8000e7c <__aeabi_dmul+0xac>
 8000f40:	2190      	movs	r1, #144	@ 0x90
 8000f42:	0089      	lsls	r1, r1, #2
 8000f44:	420f      	tst	r7, r1
 8000f46:	d163      	bne.n	8001010 <__aeabi_dmul+0x240>
 8000f48:	2288      	movs	r2, #136	@ 0x88
 8000f4a:	423a      	tst	r2, r7
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_dmul+0x180>
 8000f4e:	e0d7      	b.n	8001100 <__aeabi_dmul+0x330>
 8000f50:	9b00      	ldr	r3, [sp, #0]
 8000f52:	46a2      	mov	sl, r4
 8000f54:	469b      	mov	fp, r3
 8000f56:	4681      	mov	r9, r0
 8000f58:	9602      	str	r6, [sp, #8]
 8000f5a:	e7bf      	b.n	8000edc <__aeabi_dmul+0x10c>
 8000f5c:	0023      	movs	r3, r4
 8000f5e:	4333      	orrs	r3, r6
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dmul+0x194>
 8000f62:	e07f      	b.n	8001064 <__aeabi_dmul+0x294>
 8000f64:	2c00      	cmp	r4, #0
 8000f66:	d100      	bne.n	8000f6a <__aeabi_dmul+0x19a>
 8000f68:	e1ad      	b.n	80012c6 <__aeabi_dmul+0x4f6>
 8000f6a:	0020      	movs	r0, r4
 8000f6c:	f000 fa7c 	bl	8001468 <__clzsi2>
 8000f70:	0002      	movs	r2, r0
 8000f72:	0003      	movs	r3, r0
 8000f74:	3a0b      	subs	r2, #11
 8000f76:	201d      	movs	r0, #29
 8000f78:	0019      	movs	r1, r3
 8000f7a:	1a82      	subs	r2, r0, r2
 8000f7c:	0030      	movs	r0, r6
 8000f7e:	3908      	subs	r1, #8
 8000f80:	40d0      	lsrs	r0, r2
 8000f82:	408c      	lsls	r4, r1
 8000f84:	4304      	orrs	r4, r0
 8000f86:	0030      	movs	r0, r6
 8000f88:	4088      	lsls	r0, r1
 8000f8a:	4a5b      	ldr	r2, [pc, #364]	@ (80010f8 <__aeabi_dmul+0x328>)
 8000f8c:	1aeb      	subs	r3, r5, r3
 8000f8e:	4694      	mov	ip, r2
 8000f90:	4463      	add	r3, ip
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	9201      	str	r2, [sp, #4]
 8000f96:	4642      	mov	r2, r8
 8000f98:	2600      	movs	r6, #0
 8000f9a:	2a0a      	cmp	r2, #10
 8000f9c:	dc00      	bgt.n	8000fa0 <__aeabi_dmul+0x1d0>
 8000f9e:	e75a      	b.n	8000e56 <__aeabi_dmul+0x86>
 8000fa0:	e79c      	b.n	8000edc <__aeabi_dmul+0x10c>
 8000fa2:	4653      	mov	r3, sl
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	4699      	mov	r9, r3
 8000fa8:	d054      	beq.n	8001054 <__aeabi_dmul+0x284>
 8000faa:	4653      	mov	r3, sl
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_dmul+0x1e2>
 8000fb0:	e177      	b.n	80012a2 <__aeabi_dmul+0x4d2>
 8000fb2:	4650      	mov	r0, sl
 8000fb4:	f000 fa58 	bl	8001468 <__clzsi2>
 8000fb8:	230b      	movs	r3, #11
 8000fba:	425b      	negs	r3, r3
 8000fbc:	469c      	mov	ip, r3
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	4484      	add	ip, r0
 8000fc2:	0011      	movs	r1, r2
 8000fc4:	4650      	mov	r0, sl
 8000fc6:	3908      	subs	r1, #8
 8000fc8:	4088      	lsls	r0, r1
 8000fca:	231d      	movs	r3, #29
 8000fcc:	4680      	mov	r8, r0
 8000fce:	4660      	mov	r0, ip
 8000fd0:	1a1b      	subs	r3, r3, r0
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	40d8      	lsrs	r0, r3
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	4640      	mov	r0, r8
 8000fda:	4303      	orrs	r3, r0
 8000fdc:	469a      	mov	sl, r3
 8000fde:	0023      	movs	r3, r4
 8000fe0:	408b      	lsls	r3, r1
 8000fe2:	4699      	mov	r9, r3
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4d44      	ldr	r5, [pc, #272]	@ (80010f8 <__aeabi_dmul+0x328>)
 8000fe8:	4698      	mov	r8, r3
 8000fea:	1aad      	subs	r5, r5, r2
 8000fec:	9302      	str	r3, [sp, #8]
 8000fee:	e715      	b.n	8000e1c <__aeabi_dmul+0x4c>
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4302      	orrs	r2, r0
 8000ff4:	4691      	mov	r9, r2
 8000ff6:	d126      	bne.n	8001046 <__aeabi_dmul+0x276>
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	001d      	movs	r5, r3
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	4692      	mov	sl, r2
 8001000:	3208      	adds	r2, #8
 8001002:	4690      	mov	r8, r2
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	e709      	b.n	8000e1c <__aeabi_dmul+0x4c>
 8001008:	2400      	movs	r4, #0
 800100a:	2200      	movs	r2, #0
 800100c:	4b35      	ldr	r3, [pc, #212]	@ (80010e4 <__aeabi_dmul+0x314>)
 800100e:	e735      	b.n	8000e7c <__aeabi_dmul+0xac>
 8001010:	2300      	movs	r3, #0
 8001012:	2480      	movs	r4, #128	@ 0x80
 8001014:	469b      	mov	fp, r3
 8001016:	0324      	lsls	r4, r4, #12
 8001018:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <__aeabi_dmul+0x314>)
 800101a:	e72f      	b.n	8000e7c <__aeabi_dmul+0xac>
 800101c:	2202      	movs	r2, #2
 800101e:	4641      	mov	r1, r8
 8001020:	4311      	orrs	r1, r2
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	4694      	mov	ip, r2
 8001028:	002a      	movs	r2, r5
 800102a:	4462      	add	r2, ip
 800102c:	4688      	mov	r8, r1
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	290a      	cmp	r1, #10
 8001032:	dd00      	ble.n	8001036 <__aeabi_dmul+0x266>
 8001034:	e752      	b.n	8000edc <__aeabi_dmul+0x10c>
 8001036:	465a      	mov	r2, fp
 8001038:	2000      	movs	r0, #0
 800103a:	9900      	ldr	r1, [sp, #0]
 800103c:	0004      	movs	r4, r0
 800103e:	404a      	eors	r2, r1
 8001040:	4693      	mov	fp, r2
 8001042:	2602      	movs	r6, #2
 8001044:	e70b      	b.n	8000e5e <__aeabi_dmul+0x8e>
 8001046:	220c      	movs	r2, #12
 8001048:	001d      	movs	r5, r3
 800104a:	2303      	movs	r3, #3
 800104c:	4681      	mov	r9, r0
 800104e:	4690      	mov	r8, r2
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	e6e3      	b.n	8000e1c <__aeabi_dmul+0x4c>
 8001054:	2300      	movs	r3, #0
 8001056:	469a      	mov	sl, r3
 8001058:	3304      	adds	r3, #4
 800105a:	4698      	mov	r8, r3
 800105c:	3b03      	subs	r3, #3
 800105e:	2500      	movs	r5, #0
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	e6db      	b.n	8000e1c <__aeabi_dmul+0x4c>
 8001064:	4642      	mov	r2, r8
 8001066:	3301      	adds	r3, #1
 8001068:	431a      	orrs	r2, r3
 800106a:	002b      	movs	r3, r5
 800106c:	4690      	mov	r8, r2
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	9201      	str	r2, [sp, #4]
 8001072:	4642      	mov	r2, r8
 8001074:	2400      	movs	r4, #0
 8001076:	2000      	movs	r0, #0
 8001078:	2601      	movs	r6, #1
 800107a:	2a0a      	cmp	r2, #10
 800107c:	dc00      	bgt.n	8001080 <__aeabi_dmul+0x2b0>
 800107e:	e6ea      	b.n	8000e56 <__aeabi_dmul+0x86>
 8001080:	e72c      	b.n	8000edc <__aeabi_dmul+0x10c>
 8001082:	2201      	movs	r2, #1
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	2a38      	cmp	r2, #56	@ 0x38
 8001088:	dd00      	ble.n	800108c <__aeabi_dmul+0x2bc>
 800108a:	e6f4      	b.n	8000e76 <__aeabi_dmul+0xa6>
 800108c:	2a1f      	cmp	r2, #31
 800108e:	dc00      	bgt.n	8001092 <__aeabi_dmul+0x2c2>
 8001090:	e12a      	b.n	80012e8 <__aeabi_dmul+0x518>
 8001092:	211f      	movs	r1, #31
 8001094:	4249      	negs	r1, r1
 8001096:	1acb      	subs	r3, r1, r3
 8001098:	0021      	movs	r1, r4
 800109a:	40d9      	lsrs	r1, r3
 800109c:	000b      	movs	r3, r1
 800109e:	2a20      	cmp	r2, #32
 80010a0:	d005      	beq.n	80010ae <__aeabi_dmul+0x2de>
 80010a2:	4a16      	ldr	r2, [pc, #88]	@ (80010fc <__aeabi_dmul+0x32c>)
 80010a4:	9d01      	ldr	r5, [sp, #4]
 80010a6:	4694      	mov	ip, r2
 80010a8:	4465      	add	r5, ip
 80010aa:	40ac      	lsls	r4, r5
 80010ac:	4320      	orrs	r0, r4
 80010ae:	1e42      	subs	r2, r0, #1
 80010b0:	4190      	sbcs	r0, r2
 80010b2:	4318      	orrs	r0, r3
 80010b4:	2307      	movs	r3, #7
 80010b6:	0019      	movs	r1, r3
 80010b8:	2400      	movs	r4, #0
 80010ba:	4001      	ands	r1, r0
 80010bc:	4203      	tst	r3, r0
 80010be:	d00c      	beq.n	80010da <__aeabi_dmul+0x30a>
 80010c0:	230f      	movs	r3, #15
 80010c2:	4003      	ands	r3, r0
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d100      	bne.n	80010ca <__aeabi_dmul+0x2fa>
 80010c8:	e140      	b.n	800134c <__aeabi_dmul+0x57c>
 80010ca:	1d03      	adds	r3, r0, #4
 80010cc:	4283      	cmp	r3, r0
 80010ce:	41a4      	sbcs	r4, r4
 80010d0:	0018      	movs	r0, r3
 80010d2:	4264      	negs	r4, r4
 80010d4:	0761      	lsls	r1, r4, #29
 80010d6:	0264      	lsls	r4, r4, #9
 80010d8:	0b24      	lsrs	r4, r4, #12
 80010da:	08c2      	lsrs	r2, r0, #3
 80010dc:	2300      	movs	r3, #0
 80010de:	430a      	orrs	r2, r1
 80010e0:	e6cc      	b.n	8000e7c <__aeabi_dmul+0xac>
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	000007ff 	.word	0x000007ff
 80010e8:	fffffc01 	.word	0xfffffc01
 80010ec:	000003ff 	.word	0x000003ff
 80010f0:	feffffff 	.word	0xfeffffff
 80010f4:	000007fe 	.word	0x000007fe
 80010f8:	fffffc0d 	.word	0xfffffc0d
 80010fc:	0000043e 	.word	0x0000043e
 8001100:	4649      	mov	r1, r9
 8001102:	464a      	mov	r2, r9
 8001104:	0409      	lsls	r1, r1, #16
 8001106:	0c09      	lsrs	r1, r1, #16
 8001108:	000d      	movs	r5, r1
 800110a:	0c16      	lsrs	r6, r2, #16
 800110c:	0c02      	lsrs	r2, r0, #16
 800110e:	0400      	lsls	r0, r0, #16
 8001110:	0c00      	lsrs	r0, r0, #16
 8001112:	4345      	muls	r5, r0
 8001114:	46ac      	mov	ip, r5
 8001116:	0005      	movs	r5, r0
 8001118:	4375      	muls	r5, r6
 800111a:	46a8      	mov	r8, r5
 800111c:	0015      	movs	r5, r2
 800111e:	000f      	movs	r7, r1
 8001120:	4375      	muls	r5, r6
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	9502      	str	r5, [sp, #8]
 8001126:	002a      	movs	r2, r5
 8001128:	9d00      	ldr	r5, [sp, #0]
 800112a:	436f      	muls	r7, r5
 800112c:	4665      	mov	r5, ip
 800112e:	0c2d      	lsrs	r5, r5, #16
 8001130:	46a9      	mov	r9, r5
 8001132:	4447      	add	r7, r8
 8001134:	444f      	add	r7, r9
 8001136:	45b8      	cmp	r8, r7
 8001138:	d905      	bls.n	8001146 <__aeabi_dmul+0x376>
 800113a:	0015      	movs	r5, r2
 800113c:	2280      	movs	r2, #128	@ 0x80
 800113e:	0252      	lsls	r2, r2, #9
 8001140:	4690      	mov	r8, r2
 8001142:	4445      	add	r5, r8
 8001144:	9502      	str	r5, [sp, #8]
 8001146:	0c3d      	lsrs	r5, r7, #16
 8001148:	9503      	str	r5, [sp, #12]
 800114a:	4665      	mov	r5, ip
 800114c:	042d      	lsls	r5, r5, #16
 800114e:	043f      	lsls	r7, r7, #16
 8001150:	0c2d      	lsrs	r5, r5, #16
 8001152:	46ac      	mov	ip, r5
 8001154:	003d      	movs	r5, r7
 8001156:	4465      	add	r5, ip
 8001158:	9504      	str	r5, [sp, #16]
 800115a:	0c25      	lsrs	r5, r4, #16
 800115c:	0424      	lsls	r4, r4, #16
 800115e:	0c24      	lsrs	r4, r4, #16
 8001160:	46ac      	mov	ip, r5
 8001162:	0025      	movs	r5, r4
 8001164:	4375      	muls	r5, r6
 8001166:	46a8      	mov	r8, r5
 8001168:	4665      	mov	r5, ip
 800116a:	000f      	movs	r7, r1
 800116c:	4369      	muls	r1, r5
 800116e:	4441      	add	r1, r8
 8001170:	4689      	mov	r9, r1
 8001172:	4367      	muls	r7, r4
 8001174:	0c39      	lsrs	r1, r7, #16
 8001176:	4449      	add	r1, r9
 8001178:	436e      	muls	r6, r5
 800117a:	4588      	cmp	r8, r1
 800117c:	d903      	bls.n	8001186 <__aeabi_dmul+0x3b6>
 800117e:	2280      	movs	r2, #128	@ 0x80
 8001180:	0252      	lsls	r2, r2, #9
 8001182:	4690      	mov	r8, r2
 8001184:	4446      	add	r6, r8
 8001186:	0c0d      	lsrs	r5, r1, #16
 8001188:	46a8      	mov	r8, r5
 800118a:	0035      	movs	r5, r6
 800118c:	4445      	add	r5, r8
 800118e:	9505      	str	r5, [sp, #20]
 8001190:	9d03      	ldr	r5, [sp, #12]
 8001192:	043f      	lsls	r7, r7, #16
 8001194:	46a8      	mov	r8, r5
 8001196:	0c3f      	lsrs	r7, r7, #16
 8001198:	0409      	lsls	r1, r1, #16
 800119a:	19c9      	adds	r1, r1, r7
 800119c:	4488      	add	r8, r1
 800119e:	4645      	mov	r5, r8
 80011a0:	9503      	str	r5, [sp, #12]
 80011a2:	4655      	mov	r5, sl
 80011a4:	042e      	lsls	r6, r5, #16
 80011a6:	0c36      	lsrs	r6, r6, #16
 80011a8:	0c2f      	lsrs	r7, r5, #16
 80011aa:	0035      	movs	r5, r6
 80011ac:	4345      	muls	r5, r0
 80011ae:	4378      	muls	r0, r7
 80011b0:	4681      	mov	r9, r0
 80011b2:	0038      	movs	r0, r7
 80011b4:	46a8      	mov	r8, r5
 80011b6:	0c2d      	lsrs	r5, r5, #16
 80011b8:	46aa      	mov	sl, r5
 80011ba:	9a00      	ldr	r2, [sp, #0]
 80011bc:	4350      	muls	r0, r2
 80011be:	4372      	muls	r2, r6
 80011c0:	444a      	add	r2, r9
 80011c2:	4452      	add	r2, sl
 80011c4:	4591      	cmp	r9, r2
 80011c6:	d903      	bls.n	80011d0 <__aeabi_dmul+0x400>
 80011c8:	2580      	movs	r5, #128	@ 0x80
 80011ca:	026d      	lsls	r5, r5, #9
 80011cc:	46a9      	mov	r9, r5
 80011ce:	4448      	add	r0, r9
 80011d0:	0c15      	lsrs	r5, r2, #16
 80011d2:	46a9      	mov	r9, r5
 80011d4:	4645      	mov	r5, r8
 80011d6:	042d      	lsls	r5, r5, #16
 80011d8:	0c2d      	lsrs	r5, r5, #16
 80011da:	46a8      	mov	r8, r5
 80011dc:	4665      	mov	r5, ip
 80011de:	437d      	muls	r5, r7
 80011e0:	0412      	lsls	r2, r2, #16
 80011e2:	4448      	add	r0, r9
 80011e4:	4490      	add	r8, r2
 80011e6:	46a9      	mov	r9, r5
 80011e8:	0032      	movs	r2, r6
 80011ea:	4665      	mov	r5, ip
 80011ec:	4362      	muls	r2, r4
 80011ee:	436e      	muls	r6, r5
 80011f0:	437c      	muls	r4, r7
 80011f2:	0c17      	lsrs	r7, r2, #16
 80011f4:	1936      	adds	r6, r6, r4
 80011f6:	19bf      	adds	r7, r7, r6
 80011f8:	42bc      	cmp	r4, r7
 80011fa:	d903      	bls.n	8001204 <__aeabi_dmul+0x434>
 80011fc:	2480      	movs	r4, #128	@ 0x80
 80011fe:	0264      	lsls	r4, r4, #9
 8001200:	46a4      	mov	ip, r4
 8001202:	44e1      	add	r9, ip
 8001204:	9c02      	ldr	r4, [sp, #8]
 8001206:	9e03      	ldr	r6, [sp, #12]
 8001208:	46a4      	mov	ip, r4
 800120a:	9d05      	ldr	r5, [sp, #20]
 800120c:	4466      	add	r6, ip
 800120e:	428e      	cmp	r6, r1
 8001210:	4189      	sbcs	r1, r1
 8001212:	46ac      	mov	ip, r5
 8001214:	0412      	lsls	r2, r2, #16
 8001216:	043c      	lsls	r4, r7, #16
 8001218:	0c12      	lsrs	r2, r2, #16
 800121a:	18a2      	adds	r2, r4, r2
 800121c:	4462      	add	r2, ip
 800121e:	4249      	negs	r1, r1
 8001220:	1854      	adds	r4, r2, r1
 8001222:	4446      	add	r6, r8
 8001224:	46a4      	mov	ip, r4
 8001226:	4546      	cmp	r6, r8
 8001228:	41a4      	sbcs	r4, r4
 800122a:	4682      	mov	sl, r0
 800122c:	4264      	negs	r4, r4
 800122e:	46a0      	mov	r8, r4
 8001230:	42aa      	cmp	r2, r5
 8001232:	4192      	sbcs	r2, r2
 8001234:	458c      	cmp	ip, r1
 8001236:	4189      	sbcs	r1, r1
 8001238:	44e2      	add	sl, ip
 800123a:	44d0      	add	r8, sl
 800123c:	4249      	negs	r1, r1
 800123e:	4252      	negs	r2, r2
 8001240:	430a      	orrs	r2, r1
 8001242:	45a0      	cmp	r8, r4
 8001244:	41a4      	sbcs	r4, r4
 8001246:	4582      	cmp	sl, r0
 8001248:	4189      	sbcs	r1, r1
 800124a:	4264      	negs	r4, r4
 800124c:	4249      	negs	r1, r1
 800124e:	430c      	orrs	r4, r1
 8001250:	4641      	mov	r1, r8
 8001252:	0c3f      	lsrs	r7, r7, #16
 8001254:	19d2      	adds	r2, r2, r7
 8001256:	1912      	adds	r2, r2, r4
 8001258:	0dcc      	lsrs	r4, r1, #23
 800125a:	9904      	ldr	r1, [sp, #16]
 800125c:	0270      	lsls	r0, r6, #9
 800125e:	4308      	orrs	r0, r1
 8001260:	1e41      	subs	r1, r0, #1
 8001262:	4188      	sbcs	r0, r1
 8001264:	4641      	mov	r1, r8
 8001266:	444a      	add	r2, r9
 8001268:	0df6      	lsrs	r6, r6, #23
 800126a:	0252      	lsls	r2, r2, #9
 800126c:	4330      	orrs	r0, r6
 800126e:	0249      	lsls	r1, r1, #9
 8001270:	4314      	orrs	r4, r2
 8001272:	4308      	orrs	r0, r1
 8001274:	01d2      	lsls	r2, r2, #7
 8001276:	d535      	bpl.n	80012e4 <__aeabi_dmul+0x514>
 8001278:	2201      	movs	r2, #1
 800127a:	0843      	lsrs	r3, r0, #1
 800127c:	4002      	ands	r2, r0
 800127e:	4313      	orrs	r3, r2
 8001280:	07e0      	lsls	r0, r4, #31
 8001282:	4318      	orrs	r0, r3
 8001284:	0864      	lsrs	r4, r4, #1
 8001286:	e634      	b.n	8000ef2 <__aeabi_dmul+0x122>
 8001288:	9b00      	ldr	r3, [sp, #0]
 800128a:	46a2      	mov	sl, r4
 800128c:	469b      	mov	fp, r3
 800128e:	4681      	mov	r9, r0
 8001290:	2480      	movs	r4, #128	@ 0x80
 8001292:	4653      	mov	r3, sl
 8001294:	0324      	lsls	r4, r4, #12
 8001296:	431c      	orrs	r4, r3
 8001298:	0324      	lsls	r4, r4, #12
 800129a:	464a      	mov	r2, r9
 800129c:	4b2e      	ldr	r3, [pc, #184]	@ (8001358 <__aeabi_dmul+0x588>)
 800129e:	0b24      	lsrs	r4, r4, #12
 80012a0:	e5ec      	b.n	8000e7c <__aeabi_dmul+0xac>
 80012a2:	f000 f8e1 	bl	8001468 <__clzsi2>
 80012a6:	2315      	movs	r3, #21
 80012a8:	469c      	mov	ip, r3
 80012aa:	4484      	add	ip, r0
 80012ac:	0002      	movs	r2, r0
 80012ae:	4663      	mov	r3, ip
 80012b0:	3220      	adds	r2, #32
 80012b2:	2b1c      	cmp	r3, #28
 80012b4:	dc00      	bgt.n	80012b8 <__aeabi_dmul+0x4e8>
 80012b6:	e684      	b.n	8000fc2 <__aeabi_dmul+0x1f2>
 80012b8:	2300      	movs	r3, #0
 80012ba:	4699      	mov	r9, r3
 80012bc:	0023      	movs	r3, r4
 80012be:	3808      	subs	r0, #8
 80012c0:	4083      	lsls	r3, r0
 80012c2:	469a      	mov	sl, r3
 80012c4:	e68e      	b.n	8000fe4 <__aeabi_dmul+0x214>
 80012c6:	f000 f8cf 	bl	8001468 <__clzsi2>
 80012ca:	0002      	movs	r2, r0
 80012cc:	0003      	movs	r3, r0
 80012ce:	3215      	adds	r2, #21
 80012d0:	3320      	adds	r3, #32
 80012d2:	2a1c      	cmp	r2, #28
 80012d4:	dc00      	bgt.n	80012d8 <__aeabi_dmul+0x508>
 80012d6:	e64e      	b.n	8000f76 <__aeabi_dmul+0x1a6>
 80012d8:	0002      	movs	r2, r0
 80012da:	0034      	movs	r4, r6
 80012dc:	3a08      	subs	r2, #8
 80012de:	2000      	movs	r0, #0
 80012e0:	4094      	lsls	r4, r2
 80012e2:	e652      	b.n	8000f8a <__aeabi_dmul+0x1ba>
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	e604      	b.n	8000ef2 <__aeabi_dmul+0x122>
 80012e8:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <__aeabi_dmul+0x58c>)
 80012ea:	0021      	movs	r1, r4
 80012ec:	469c      	mov	ip, r3
 80012ee:	0003      	movs	r3, r0
 80012f0:	9d01      	ldr	r5, [sp, #4]
 80012f2:	40d3      	lsrs	r3, r2
 80012f4:	4465      	add	r5, ip
 80012f6:	40a9      	lsls	r1, r5
 80012f8:	4319      	orrs	r1, r3
 80012fa:	0003      	movs	r3, r0
 80012fc:	40ab      	lsls	r3, r5
 80012fe:	1e58      	subs	r0, r3, #1
 8001300:	4183      	sbcs	r3, r0
 8001302:	4319      	orrs	r1, r3
 8001304:	0008      	movs	r0, r1
 8001306:	40d4      	lsrs	r4, r2
 8001308:	074b      	lsls	r3, r1, #29
 800130a:	d009      	beq.n	8001320 <__aeabi_dmul+0x550>
 800130c:	230f      	movs	r3, #15
 800130e:	400b      	ands	r3, r1
 8001310:	2b04      	cmp	r3, #4
 8001312:	d005      	beq.n	8001320 <__aeabi_dmul+0x550>
 8001314:	1d0b      	adds	r3, r1, #4
 8001316:	428b      	cmp	r3, r1
 8001318:	4180      	sbcs	r0, r0
 800131a:	4240      	negs	r0, r0
 800131c:	1824      	adds	r4, r4, r0
 800131e:	0018      	movs	r0, r3
 8001320:	0223      	lsls	r3, r4, #8
 8001322:	d400      	bmi.n	8001326 <__aeabi_dmul+0x556>
 8001324:	e6d6      	b.n	80010d4 <__aeabi_dmul+0x304>
 8001326:	2301      	movs	r3, #1
 8001328:	2400      	movs	r4, #0
 800132a:	2200      	movs	r2, #0
 800132c:	e5a6      	b.n	8000e7c <__aeabi_dmul+0xac>
 800132e:	290f      	cmp	r1, #15
 8001330:	d1aa      	bne.n	8001288 <__aeabi_dmul+0x4b8>
 8001332:	2380      	movs	r3, #128	@ 0x80
 8001334:	4652      	mov	r2, sl
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	421a      	tst	r2, r3
 800133a:	d0a9      	beq.n	8001290 <__aeabi_dmul+0x4c0>
 800133c:	421c      	tst	r4, r3
 800133e:	d1a7      	bne.n	8001290 <__aeabi_dmul+0x4c0>
 8001340:	431c      	orrs	r4, r3
 8001342:	9b00      	ldr	r3, [sp, #0]
 8001344:	0002      	movs	r2, r0
 8001346:	469b      	mov	fp, r3
 8001348:	4b03      	ldr	r3, [pc, #12]	@ (8001358 <__aeabi_dmul+0x588>)
 800134a:	e597      	b.n	8000e7c <__aeabi_dmul+0xac>
 800134c:	2400      	movs	r4, #0
 800134e:	e6c1      	b.n	80010d4 <__aeabi_dmul+0x304>
 8001350:	2400      	movs	r4, #0
 8001352:	4b01      	ldr	r3, [pc, #4]	@ (8001358 <__aeabi_dmul+0x588>)
 8001354:	0022      	movs	r2, r4
 8001356:	e591      	b.n	8000e7c <__aeabi_dmul+0xac>
 8001358:	000007ff 	.word	0x000007ff
 800135c:	0000041e 	.word	0x0000041e

08001360 <__aeabi_d2iz>:
 8001360:	000b      	movs	r3, r1
 8001362:	0002      	movs	r2, r0
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	4d16      	ldr	r5, [pc, #88]	@ (80013c0 <__aeabi_d2iz+0x60>)
 8001368:	030c      	lsls	r4, r1, #12
 800136a:	b082      	sub	sp, #8
 800136c:	0049      	lsls	r1, r1, #1
 800136e:	2000      	movs	r0, #0
 8001370:	9200      	str	r2, [sp, #0]
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	0b24      	lsrs	r4, r4, #12
 8001376:	0d49      	lsrs	r1, r1, #21
 8001378:	0fde      	lsrs	r6, r3, #31
 800137a:	42a9      	cmp	r1, r5
 800137c:	dd04      	ble.n	8001388 <__aeabi_d2iz+0x28>
 800137e:	4811      	ldr	r0, [pc, #68]	@ (80013c4 <__aeabi_d2iz+0x64>)
 8001380:	4281      	cmp	r1, r0
 8001382:	dd03      	ble.n	800138c <__aeabi_d2iz+0x2c>
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <__aeabi_d2iz+0x68>)
 8001386:	18f0      	adds	r0, r6, r3
 8001388:	b002      	add	sp, #8
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	2080      	movs	r0, #128	@ 0x80
 800138e:	0340      	lsls	r0, r0, #13
 8001390:	4320      	orrs	r0, r4
 8001392:	4c0e      	ldr	r4, [pc, #56]	@ (80013cc <__aeabi_d2iz+0x6c>)
 8001394:	1a64      	subs	r4, r4, r1
 8001396:	2c1f      	cmp	r4, #31
 8001398:	dd08      	ble.n	80013ac <__aeabi_d2iz+0x4c>
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <__aeabi_d2iz+0x70>)
 800139c:	1a5b      	subs	r3, r3, r1
 800139e:	40d8      	lsrs	r0, r3
 80013a0:	0003      	movs	r3, r0
 80013a2:	4258      	negs	r0, r3
 80013a4:	2e00      	cmp	r6, #0
 80013a6:	d1ef      	bne.n	8001388 <__aeabi_d2iz+0x28>
 80013a8:	0018      	movs	r0, r3
 80013aa:	e7ed      	b.n	8001388 <__aeabi_d2iz+0x28>
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <__aeabi_d2iz+0x74>)
 80013ae:	9a00      	ldr	r2, [sp, #0]
 80013b0:	469c      	mov	ip, r3
 80013b2:	0003      	movs	r3, r0
 80013b4:	4461      	add	r1, ip
 80013b6:	408b      	lsls	r3, r1
 80013b8:	40e2      	lsrs	r2, r4
 80013ba:	4313      	orrs	r3, r2
 80013bc:	e7f1      	b.n	80013a2 <__aeabi_d2iz+0x42>
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	000003fe 	.word	0x000003fe
 80013c4:	0000041d 	.word	0x0000041d
 80013c8:	7fffffff 	.word	0x7fffffff
 80013cc:	00000433 	.word	0x00000433
 80013d0:	00000413 	.word	0x00000413
 80013d4:	fffffbed 	.word	0xfffffbed

080013d8 <__aeabi_f2d>:
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	0242      	lsls	r2, r0, #9
 80013dc:	0043      	lsls	r3, r0, #1
 80013de:	0fc4      	lsrs	r4, r0, #31
 80013e0:	20fe      	movs	r0, #254	@ 0xfe
 80013e2:	0e1b      	lsrs	r3, r3, #24
 80013e4:	1c59      	adds	r1, r3, #1
 80013e6:	0a55      	lsrs	r5, r2, #9
 80013e8:	4208      	tst	r0, r1
 80013ea:	d00c      	beq.n	8001406 <__aeabi_f2d+0x2e>
 80013ec:	21e0      	movs	r1, #224	@ 0xe0
 80013ee:	0089      	lsls	r1, r1, #2
 80013f0:	468c      	mov	ip, r1
 80013f2:	076d      	lsls	r5, r5, #29
 80013f4:	0b12      	lsrs	r2, r2, #12
 80013f6:	4463      	add	r3, ip
 80013f8:	051b      	lsls	r3, r3, #20
 80013fa:	4313      	orrs	r3, r2
 80013fc:	07e4      	lsls	r4, r4, #31
 80013fe:	4323      	orrs	r3, r4
 8001400:	0028      	movs	r0, r5
 8001402:	0019      	movs	r1, r3
 8001404:	bd70      	pop	{r4, r5, r6, pc}
 8001406:	2b00      	cmp	r3, #0
 8001408:	d114      	bne.n	8001434 <__aeabi_f2d+0x5c>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d01b      	beq.n	8001446 <__aeabi_f2d+0x6e>
 800140e:	0028      	movs	r0, r5
 8001410:	f000 f82a 	bl	8001468 <__clzsi2>
 8001414:	280a      	cmp	r0, #10
 8001416:	dc1c      	bgt.n	8001452 <__aeabi_f2d+0x7a>
 8001418:	230b      	movs	r3, #11
 800141a:	002a      	movs	r2, r5
 800141c:	1a1b      	subs	r3, r3, r0
 800141e:	40da      	lsrs	r2, r3
 8001420:	0003      	movs	r3, r0
 8001422:	3315      	adds	r3, #21
 8001424:	409d      	lsls	r5, r3
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <__aeabi_f2d+0x88>)
 8001428:	0312      	lsls	r2, r2, #12
 800142a:	1a1b      	subs	r3, r3, r0
 800142c:	055b      	lsls	r3, r3, #21
 800142e:	0b12      	lsrs	r2, r2, #12
 8001430:	0d5b      	lsrs	r3, r3, #21
 8001432:	e7e1      	b.n	80013f8 <__aeabi_f2d+0x20>
 8001434:	2d00      	cmp	r5, #0
 8001436:	d009      	beq.n	800144c <__aeabi_f2d+0x74>
 8001438:	0b13      	lsrs	r3, r2, #12
 800143a:	2280      	movs	r2, #128	@ 0x80
 800143c:	0312      	lsls	r2, r2, #12
 800143e:	431a      	orrs	r2, r3
 8001440:	076d      	lsls	r5, r5, #29
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <__aeabi_f2d+0x8c>)
 8001444:	e7d8      	b.n	80013f8 <__aeabi_f2d+0x20>
 8001446:	2300      	movs	r3, #0
 8001448:	2200      	movs	r2, #0
 800144a:	e7d5      	b.n	80013f8 <__aeabi_f2d+0x20>
 800144c:	2200      	movs	r2, #0
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <__aeabi_f2d+0x8c>)
 8001450:	e7d2      	b.n	80013f8 <__aeabi_f2d+0x20>
 8001452:	0003      	movs	r3, r0
 8001454:	002a      	movs	r2, r5
 8001456:	3b0b      	subs	r3, #11
 8001458:	409a      	lsls	r2, r3
 800145a:	2500      	movs	r5, #0
 800145c:	e7e3      	b.n	8001426 <__aeabi_f2d+0x4e>
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	00000389 	.word	0x00000389
 8001464:	000007ff 	.word	0x000007ff

08001468 <__clzsi2>:
 8001468:	211c      	movs	r1, #28
 800146a:	2301      	movs	r3, #1
 800146c:	041b      	lsls	r3, r3, #16
 800146e:	4298      	cmp	r0, r3
 8001470:	d301      	bcc.n	8001476 <__clzsi2+0xe>
 8001472:	0c00      	lsrs	r0, r0, #16
 8001474:	3910      	subs	r1, #16
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	4298      	cmp	r0, r3
 800147a:	d301      	bcc.n	8001480 <__clzsi2+0x18>
 800147c:	0a00      	lsrs	r0, r0, #8
 800147e:	3908      	subs	r1, #8
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	4298      	cmp	r0, r3
 8001484:	d301      	bcc.n	800148a <__clzsi2+0x22>
 8001486:	0900      	lsrs	r0, r0, #4
 8001488:	3904      	subs	r1, #4
 800148a:	a202      	add	r2, pc, #8	@ (adr r2, 8001494 <__clzsi2+0x2c>)
 800148c:	5c10      	ldrb	r0, [r2, r0]
 800148e:	1840      	adds	r0, r0, r1
 8001490:	4770      	bx	lr
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	02020304 	.word	0x02020304
 8001498:	01010101 	.word	0x01010101
	...

080014a4 <calculatePID>:
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */


float calculatePID(float setValue, float realValue, int maxOutputValue)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  #define MAX_PED_VOLTAGE_FORMULA(setVoltage, supplyVoltage)  ( (1023 * setVoltage) / supplyVoltage )
  #define MAX_PED_VOLTAGE_CAL   MAX_PED_VOLTAGE_FORMULA(MAX_PED_VOLTAGE, PAD_SUPPLY_VOLTAGE)


  error       =  (setValue - realValue);
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	f7ff fa7c 	bl	80009b0 <__aeabi_fsub>
 80014b8:	1c03      	adds	r3, r0, #0
 80014ba:	1c1a      	adds	r2, r3, #0
 80014bc:	4b33      	ldr	r3, [pc, #204]	@ (800158c <calculatePID+0xe8>)
 80014be:	601a      	str	r2, [r3, #0]
  Up = Kp*error;
 80014c0:	4b32      	ldr	r3, [pc, #200]	@ (800158c <calculatePID+0xe8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4932      	ldr	r1, [pc, #200]	@ (8001590 <calculatePID+0xec>)
 80014c6:	1c18      	adds	r0, r3, #0
 80014c8:	f7ff f934 	bl	8000734 <__aeabi_fmul>
 80014cc:	1c03      	adds	r3, r0, #0
 80014ce:	1c1a      	adds	r2, r3, #0
 80014d0:	4b30      	ldr	r3, [pc, #192]	@ (8001594 <calculatePID+0xf0>)
 80014d2:	601a      	str	r2, [r3, #0]
  pidIntegral  = (Ki*error)+pidIntegral0;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <calculatePID+0xe8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	492f      	ldr	r1, [pc, #188]	@ (8001598 <calculatePID+0xf4>)
 80014da:	1c18      	adds	r0, r3, #0
 80014dc:	f7ff f92a 	bl	8000734 <__aeabi_fmul>
 80014e0:	1c03      	adds	r3, r0, #0
 80014e2:	1c1a      	adds	r2, r3, #0
 80014e4:	4b2d      	ldr	r3, [pc, #180]	@ (800159c <calculatePID+0xf8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	1c19      	adds	r1, r3, #0
 80014ea:	1c10      	adds	r0, r2, #0
 80014ec:	f7fe fed2 	bl	8000294 <__aeabi_fadd>
 80014f0:	1c03      	adds	r3, r0, #0
 80014f2:	1c1a      	adds	r2, r3, #0
 80014f4:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <calculatePID+0xfc>)
 80014f6:	601a      	str	r2, [r3, #0]
  pidIntegral0 = pidIntegral;
 80014f8:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <calculatePID+0xfc>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b27      	ldr	r3, [pc, #156]	@ (800159c <calculatePID+0xf8>)
 80014fe:	601a      	str	r2, [r3, #0]
  pidDerivative =  ( Kd*(error - pidLastError) );
 8001500:	4b22      	ldr	r3, [pc, #136]	@ (800158c <calculatePID+0xe8>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <calculatePID+0x100>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	1c19      	adds	r1, r3, #0
 800150a:	1c10      	adds	r0, r2, #0
 800150c:	f7ff fa50 	bl	80009b0 <__aeabi_fsub>
 8001510:	1c03      	adds	r3, r0, #0
 8001512:	4925      	ldr	r1, [pc, #148]	@ (80015a8 <calculatePID+0x104>)
 8001514:	1c18      	adds	r0, r3, #0
 8001516:	f7ff f90d 	bl	8000734 <__aeabi_fmul>
 800151a:	1c03      	adds	r3, r0, #0
 800151c:	1c1a      	adds	r2, r3, #0
 800151e:	4b23      	ldr	r3, [pc, #140]	@ (80015ac <calculatePID+0x108>)
 8001520:	601a      	str	r2, [r3, #0]
  pidOutput  =  Up + pidIntegral + pidDerivative;
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <calculatePID+0xf0>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <calculatePID+0xfc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1c19      	adds	r1, r3, #0
 800152c:	1c10      	adds	r0, r2, #0
 800152e:	f7fe feb1 	bl	8000294 <__aeabi_fadd>
 8001532:	1c03      	adds	r3, r0, #0
 8001534:	1c1a      	adds	r2, r3, #0
 8001536:	4b1d      	ldr	r3, [pc, #116]	@ (80015ac <calculatePID+0x108>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	1c19      	adds	r1, r3, #0
 800153c:	1c10      	adds	r0, r2, #0
 800153e:	f7fe fea9 	bl	8000294 <__aeabi_fadd>
 8001542:	1c03      	adds	r3, r0, #0
 8001544:	1c1a      	adds	r2, r3, #0
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <calculatePID+0x10c>)
 8001548:	601a      	str	r2, [r3, #0]
  cikis= (pidOutput*0.1);
 800154a:	4b19      	ldr	r3, [pc, #100]	@ (80015b0 <calculatePID+0x10c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	1c18      	adds	r0, r3, #0
 8001550:	f7ff ff42 	bl	80013d8 <__aeabi_f2d>
 8001554:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <calculatePID+0x110>)
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <calculatePID+0x114>)
 8001558:	f7ff fc3a 	bl	8000dd0 <__aeabi_dmul>
 800155c:	0002      	movs	r2, r0
 800155e:	000b      	movs	r3, r1
 8001560:	0010      	movs	r0, r2
 8001562:	0019      	movs	r1, r3
 8001564:	f7ff fefc 	bl	8001360 <__aeabi_d2iz>
 8001568:	0002      	movs	r2, r0
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <calculatePID+0x118>)
 800156c:	601a      	str	r2, [r3, #0]
  pidLastError = error;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <calculatePID+0xe8>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <calculatePID+0x100>)
 8001574:	601a      	str	r2, [r3, #0]


  return cikis;
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <calculatePID+0x118>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff fbdc 	bl	8000d38 <__aeabi_i2f>
 8001580:	1c03      	adds	r3, r0, #0
}
 8001582:	1c18      	adds	r0, r3, #0
 8001584:	46bd      	mov	sp, r7
 8001586:	b004      	add	sp, #16
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	200001e4 	.word	0x200001e4
 8001590:	3dcccccd 	.word	0x3dcccccd
 8001594:	200001c8 	.word	0x200001c8
 8001598:	3a51b717 	.word	0x3a51b717
 800159c:	200001e0 	.word	0x200001e0
 80015a0:	200001dc 	.word	0x200001dc
 80015a4:	200001d8 	.word	0x200001d8
 80015a8:	3c75c28f 	.word	0x3c75c28f
 80015ac:	200001e8 	.word	0x200001e8
 80015b0:	200001ec 	.word	0x200001ec
 80015b4:	9999999a 	.word	0x9999999a
 80015b8:	3fb99999 	.word	0x3fb99999
 80015bc:	200001cc 	.word	0x200001cc

080015c0 <pidControl>:
int pidControl()
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0

  PWM = calculatePID(PAD_SETPOINT, feedback, MAX_PAD_VOLTAGE);
 80015c4:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <pidControl+0x34>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff fbb5 	bl	8000d38 <__aeabi_i2f>
 80015ce:	1c03      	adds	r3, r0, #0
 80015d0:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <pidControl+0x38>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	1c19      	adds	r1, r3, #0
 80015d6:	f7ff ff65 	bl	80014a4 <calculatePID>
 80015da:	1c03      	adds	r3, r0, #0
 80015dc:	1c18      	adds	r0, r3, #0
 80015de:	f7ff fb8b 	bl	8000cf8 <__aeabi_f2iz>
 80015e2:	0002      	movs	r2, r0
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <pidControl+0x3c>)
 80015e6:	601a      	str	r2, [r3, #0]

  return PWM;
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <pidControl+0x3c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	200001d4 	.word	0x200001d4
 80015f8:	44098000 	.word	0x44098000
 80015fc:	200001d0 	.word	0x200001d0

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8001604:	f000 fc70 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f870 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f000 fa3e 	bl	8001a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001610:	f000 fa1e 	bl	8001a50 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001614:	f000 f9ec 	bl	80019f0 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8001618:	f000 f8b8 	bl	800178c <MX_ADC_Init>
  MX_TIM1_Init();
 800161c:	f000 f910 	bl	8001840 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001620:	f000 f966 	bl	80018f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc);
 8001624:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <main+0xd0>)
 8001626:	0018      	movs	r0, r3
 8001628:	f000 fe02 	bl	8002230 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800162c:	4b29      	ldr	r3, [pc, #164]	@ (80016d4 <main+0xd4>)
 800162e:	2100      	movs	r1, #0
 8001630:	0018      	movs	r0, r3
 8001632:	f002 f933 	bl	800389c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8001636:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <main+0xd8>)
 8001638:	0018      	movs	r0, r3
 800163a:	f002 f88b 	bl	8003754 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_ADC_PollForConversion(&hadc, 1000);
 800163e:	23fa      	movs	r3, #250	@ 0xfa
 8001640:	009a      	lsls	r2, r3, #2
 8001642:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <main+0xd0>)
 8001644:	0011      	movs	r1, r2
 8001646:	0018      	movs	r0, r3
 8001648:	f000 fe46 	bl	80022d8 <HAL_ADC_PollForConversion>
	  feedback = HAL_ADC_GetValue(&hadc);
 800164c:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <main+0xd0>)
 800164e:	0018      	movs	r0, r3
 8001650:	f000 feda 	bl	8002408 <HAL_ADC_GetValue>
 8001654:	0003      	movs	r3, r0
 8001656:	001a      	movs	r2, r3
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <main+0xdc>)
 800165a:	601a      	str	r2, [r3, #0]
	  pidControl();
 800165c:	f7ff ffb0 	bl	80015c0 <pidControl>
	  pwm_value=pwm_value-pidControl();
 8001660:	4b1f      	ldr	r3, [pc, #124]	@ (80016e0 <main+0xe0>)
 8001662:	681c      	ldr	r4, [r3, #0]
 8001664:	f7ff ffac 	bl	80015c0 <pidControl>
 8001668:	0003      	movs	r3, r0
 800166a:	0018      	movs	r0, r3
 800166c:	f7ff fb64 	bl	8000d38 <__aeabi_i2f>
 8001670:	1c03      	adds	r3, r0, #0
 8001672:	1c19      	adds	r1, r3, #0
 8001674:	1c20      	adds	r0, r4, #0
 8001676:	f7ff f99b 	bl	80009b0 <__aeabi_fsub>
 800167a:	1c03      	adds	r3, r0, #0
 800167c:	1c1a      	adds	r2, r3, #0
 800167e:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <main+0xe0>)
 8001680:	601a      	str	r2, [r3, #0]

	  if(pwm_value>479){
 8001682:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <main+0xe0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4917      	ldr	r1, [pc, #92]	@ (80016e4 <main+0xe4>)
 8001688:	1c18      	adds	r0, r3, #0
 800168a:	f7fe fdef 	bl	800026c <__aeabi_fcmpgt>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d003      	beq.n	800169a <main+0x9a>
		  pwm_value=479;
 8001692:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <main+0xe0>)
 8001694:	4a13      	ldr	r2, [pc, #76]	@ (80016e4 <main+0xe4>)
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	e00f      	b.n	80016ba <main+0xba>

	  }
	  else if(pwm_value<30){
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <main+0xe0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4912      	ldr	r1, [pc, #72]	@ (80016e8 <main+0xe8>)
 80016a0:	1c18      	adds	r0, r3, #0
 80016a2:	f7fe fdcf 	bl	8000244 <__aeabi_fcmplt>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d003      	beq.n	80016b2 <main+0xb2>
		  pwm_value=30;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <main+0xe0>)
 80016ac:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <main+0xe8>)
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e003      	b.n	80016ba <main+0xba>
	  }
	  else{
		  pwm_value=pwm_value;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	@ (80016e0 <main+0xe0>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <main+0xe0>)
 80016b8:	601a      	str	r2, [r3, #0]
	  }
	  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <main+0xd4>)
 80016bc:	2100      	movs	r1, #0
 80016be:	0018      	movs	r0, r3
 80016c0:	f002 f8ec 	bl	800389c <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim3 , TIM_CHANNEL_1 , 240);
 80016c4:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <main+0xd4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	22f0      	movs	r2, #240	@ 0xf0
 80016ca:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_ADC_PollForConversion(&hadc, 1000);
 80016cc:	e7b7      	b.n	800163e <main+0x3e>
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	20000028 	.word	0x20000028
 80016d4:	200000f4 	.word	0x200000f4
 80016d8:	200000ac 	.word	0x200000ac
 80016dc:	200001d4 	.word	0x200001d4
 80016e0:	200001c4 	.word	0x200001c4
 80016e4:	43ef8000 	.word	0x43ef8000
 80016e8:	41f00000 	.word	0x41f00000

080016ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b091      	sub	sp, #68	@ 0x44
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	2410      	movs	r4, #16
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	0018      	movs	r0, r3
 80016f8:	2330      	movs	r3, #48	@ 0x30
 80016fa:	001a      	movs	r2, r3
 80016fc:	2100      	movs	r1, #0
 80016fe:	f003 fb99 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001702:	003b      	movs	r3, r7
 8001704:	0018      	movs	r0, r3
 8001706:	2310      	movs	r3, #16
 8001708:	001a      	movs	r2, r3
 800170a:	2100      	movs	r1, #0
 800170c:	f003 fb92 	bl	8004e34 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001710:	0021      	movs	r1, r4
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2212      	movs	r2, #18
 8001716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001718:	187b      	adds	r3, r7, r1
 800171a:	2201      	movs	r2, #1
 800171c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2201      	movs	r2, #1
 8001722:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2210      	movs	r2, #16
 8001728:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2210      	movs	r2, #16
 800172e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2202      	movs	r2, #2
 8001734:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	22a0      	movs	r2, #160	@ 0xa0
 8001740:	0392      	lsls	r2, r2, #14
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001744:	187b      	adds	r3, r7, r1
 8001746:	2200      	movs	r2, #0
 8001748:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174a:	187b      	adds	r3, r7, r1
 800174c:	0018      	movs	r0, r3
 800174e:	f001 fb53 	bl	8002df8 <HAL_RCC_OscConfig>
 8001752:	1e03      	subs	r3, r0, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001756:	f000 fa03 	bl	8001b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175a:	003b      	movs	r3, r7
 800175c:	2207      	movs	r2, #7
 800175e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	003b      	movs	r3, r7
 8001762:	2202      	movs	r2, #2
 8001764:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001766:	003b      	movs	r3, r7
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800176c:	003b      	movs	r3, r7
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001772:	003b      	movs	r3, r7
 8001774:	2101      	movs	r1, #1
 8001776:	0018      	movs	r0, r3
 8001778:	f001 fe58 	bl	800342c <HAL_RCC_ClockConfig>
 800177c:	1e03      	subs	r3, r0, #0
 800177e:	d001      	beq.n	8001784 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001780:	f000 f9ee 	bl	8001b60 <Error_Handler>
  }
}
 8001784:	46c0      	nop			@ (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b011      	add	sp, #68	@ 0x44
 800178a:	bd90      	pop	{r4, r7, pc}

0800178c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	0018      	movs	r0, r3
 8001796:	230c      	movs	r3, #12
 8001798:	001a      	movs	r2, r3
 800179a:	2100      	movs	r1, #0
 800179c:	f003 fb4a 	bl	8004e34 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <MX_ADC_Init+0xac>)
 80017a2:	4a26      	ldr	r2, [pc, #152]	@ (800183c <MX_ADC_Init+0xb0>)
 80017a4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <MX_ADC_Init+0xac>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <MX_ADC_Init+0xac>)
 80017ae:	2208      	movs	r2, #8
 80017b0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_ADC_Init+0xac>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_ADC_Init+0xac>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017be:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_ADC_Init+0xac>)
 80017c0:	2204      	movs	r2, #4
 80017c2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <MX_ADC_Init+0xac>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_ADC_Init+0xac>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <MX_ADC_Init+0xac>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80017d6:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_ADC_Init+0xac>)
 80017d8:	2200      	movs	r2, #0
 80017da:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <MX_ADC_Init+0xac>)
 80017de:	22c2      	movs	r2, #194	@ 0xc2
 80017e0:	32ff      	adds	r2, #255	@ 0xff
 80017e2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_ADC_Init+0xac>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <MX_ADC_Init+0xac>)
 80017ec:	2224      	movs	r2, #36	@ 0x24
 80017ee:	2101      	movs	r1, #1
 80017f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_ADC_Init+0xac>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MX_ADC_Init+0xac>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 fbd8 	bl	8001fb0 <HAL_ADC_Init>
 8001800:	1e03      	subs	r3, r0, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001804:	f000 f9ac 	bl	8001b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2280      	movs	r2, #128	@ 0x80
 8001812:	0152      	lsls	r2, r2, #5
 8001814:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2205      	movs	r2, #5
 800181a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800181c:	1d3a      	adds	r2, r7, #4
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_ADC_Init+0xac>)
 8001820:	0011      	movs	r1, r2
 8001822:	0018      	movs	r0, r3
 8001824:	f000 fdfc 	bl	8002420 <HAL_ADC_ConfigChannel>
 8001828:	1e03      	subs	r3, r0, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800182c:	f000 f998 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b004      	add	sp, #16
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000028 	.word	0x20000028
 800183c:	40012400 	.word	0x40012400

08001840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	2308      	movs	r3, #8
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	0018      	movs	r0, r3
 800184c:	2310      	movs	r3, #16
 800184e:	001a      	movs	r2, r3
 8001850:	2100      	movs	r1, #0
 8001852:	f003 faef 	bl	8004e34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001856:	003b      	movs	r3, r7
 8001858:	0018      	movs	r0, r3
 800185a:	2308      	movs	r3, #8
 800185c:	001a      	movs	r2, r3
 800185e:	2100      	movs	r1, #0
 8001860:	f003 fae8 	bl	8004e34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 8001866:	4a20      	ldr	r2, [pc, #128]	@ (80018e8 <MX_TIM1_Init+0xa8>)
 8001868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 8001878:	4a1c      	ldr	r2, [pc, #112]	@ (80018ec <MX_TIM1_Init+0xac>)
 800187a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 8001890:	0018      	movs	r0, r3
 8001892:	f001 ff0f 	bl	80036b4 <HAL_TIM_Base_Init>
 8001896:	1e03      	subs	r3, r0, #0
 8001898:	d001      	beq.n	800189e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800189a:	f000 f961 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189e:	2108      	movs	r1, #8
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	0152      	lsls	r2, r2, #5
 80018a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018a8:	187a      	adds	r2, r7, r1
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 80018ac:	0011      	movs	r1, r2
 80018ae:	0018      	movs	r0, r3
 80018b0:	f002 fa5a 	bl	8003d68 <HAL_TIM_ConfigClockSource>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018b8:	f000 f952 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	003b      	movs	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	003b      	movs	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018c8:	003a      	movs	r2, r7
 80018ca:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <MX_TIM1_Init+0xa4>)
 80018cc:	0011      	movs	r1, r2
 80018ce:	0018      	movs	r0, r3
 80018d0:	f002 fe84 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	1e03      	subs	r3, r0, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80018d8:	f000 f942 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018dc:	46c0      	nop			@ (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b006      	add	sp, #24
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200000ac 	.word	0x200000ac
 80018e8:	40012c00 	.word	0x40012c00
 80018ec:	0000ffff 	.word	0x0000ffff

080018f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08e      	sub	sp, #56	@ 0x38
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f6:	2328      	movs	r3, #40	@ 0x28
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	0018      	movs	r0, r3
 80018fc:	2310      	movs	r3, #16
 80018fe:	001a      	movs	r2, r3
 8001900:	2100      	movs	r1, #0
 8001902:	f003 fa97 	bl	8004e34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001906:	2320      	movs	r3, #32
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	0018      	movs	r0, r3
 800190c:	2308      	movs	r3, #8
 800190e:	001a      	movs	r2, r3
 8001910:	2100      	movs	r1, #0
 8001912:	f003 fa8f 	bl	8004e34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	0018      	movs	r0, r3
 800191a:	231c      	movs	r3, #28
 800191c:	001a      	movs	r2, r3
 800191e:	2100      	movs	r1, #0
 8001920:	f003 fa88 	bl	8004e34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001924:	4b30      	ldr	r3, [pc, #192]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 8001926:	4a31      	ldr	r2, [pc, #196]	@ (80019ec <MX_TIM3_Init+0xfc>)
 8001928:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800192a:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 479;
 8001936:	4b2c      	ldr	r3, [pc, #176]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 8001938:	22e0      	movs	r2, #224	@ 0xe0
 800193a:	32ff      	adds	r2, #255	@ 0xff
 800193c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800194a:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 800194c:	0018      	movs	r0, r3
 800194e:	f001 feb1 	bl	80036b4 <HAL_TIM_Base_Init>
 8001952:	1e03      	subs	r3, r0, #0
 8001954:	d001      	beq.n	800195a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001956:	f000 f903 	bl	8001b60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195a:	2128      	movs	r1, #40	@ 0x28
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	0152      	lsls	r2, r2, #5
 8001962:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001964:	187a      	adds	r2, r7, r1
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 8001968:	0011      	movs	r1, r2
 800196a:	0018      	movs	r0, r3
 800196c:	f002 f9fc 	bl	8003d68 <HAL_TIM_ConfigClockSource>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001974:	f000 f8f4 	bl	8001b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001978:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 800197a:	0018      	movs	r0, r3
 800197c:	f001 ff36 	bl	80037ec <HAL_TIM_PWM_Init>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001984:	f000 f8ec 	bl	8001b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2120      	movs	r1, #32
 800198a:	187b      	adds	r3, r7, r1
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	187b      	adds	r3, r7, r1
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001996:	187a      	adds	r2, r7, r1
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f002 fe1d 	bl	80045dc <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80019a6:	f000 f8db 	bl	8001b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	2260      	movs	r2, #96	@ 0x60
 80019ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c2:	1d39      	adds	r1, r7, #4
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	0018      	movs	r0, r3
 80019ca:	f002 f907 	bl	8003bdc <HAL_TIM_PWM_ConfigChannel>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80019d2:	f000 f8c5 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <MX_TIM3_Init+0xf8>)
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 f999 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	b00e      	add	sp, #56	@ 0x38
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	46c0      	nop			@ (mov r8, r8)
 80019e8:	200000f4 	.word	0x200000f4
 80019ec:	40000400 	.word	0x40000400

080019f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019f4:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 80019f6:	4a15      	ldr	r2, [pc, #84]	@ (8001a4c <MX_USART2_UART_Init+0x5c>)
 80019f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80019fa:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 80019fc:	2296      	movs	r2, #150	@ 0x96
 80019fe:	0212      	lsls	r2, r2, #8
 8001a00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a02:	4b11      	ldr	r3, [pc, #68]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a16:	220c      	movs	r2, #12
 8001a18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a20:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <MX_USART2_UART_Init+0x58>)
 8001a34:	0018      	movs	r0, r3
 8001a36:	f002 fe39 	bl	80046ac <HAL_UART_Init>
 8001a3a:	1e03      	subs	r3, r0, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a3e:	f000 f88f 	bl	8001b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2000013c 	.word	0x2000013c
 8001a4c:	40004400 	.word	0x40004400

08001a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <MX_DMA_Init+0x38>)
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <MX_DMA_Init+0x38>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <MX_DMA_Init+0x38>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	2009      	movs	r0, #9
 8001a74:	f000 fefa 	bl	800286c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a78:	2009      	movs	r0, #9
 8001a7a:	f000 ff0c 	bl	8002896 <HAL_NVIC_EnableIRQ>

}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	40021000 	.word	0x40021000

08001a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	240c      	movs	r4, #12
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	0018      	movs	r0, r3
 8001a98:	2314      	movs	r3, #20
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f003 f9c9 	bl	8004e34 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	0309      	lsls	r1, r1, #12
 8001aac:	430a      	orrs	r2, r1
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	031b      	lsls	r3, r3, #12
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001abe:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	03c9      	lsls	r1, r1, #15
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	4b22      	ldr	r3, [pc, #136]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	03db      	lsls	r3, r3, #15
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b1f      	ldr	r3, [pc, #124]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	0289      	lsls	r1, r1, #10
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	615a      	str	r2, [r3, #20]
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <MX_GPIO_Init+0xcc>)
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	029b      	lsls	r3, r3, #10
 8001af0:	4013      	ands	r3, r2
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001af6:	2390      	movs	r3, #144	@ 0x90
 8001af8:	05db      	lsls	r3, r3, #23
 8001afa:	2200      	movs	r2, #0
 8001afc:	2120      	movs	r1, #32
 8001afe:	0018      	movs	r0, r3
 8001b00:	f001 f95c 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b04:	193b      	adds	r3, r7, r4
 8001b06:	2280      	movs	r2, #128	@ 0x80
 8001b08:	0192      	lsls	r2, r2, #6
 8001b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	2284      	movs	r2, #132	@ 0x84
 8001b10:	0392      	lsls	r2, r2, #14
 8001b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	193b      	adds	r3, r7, r4
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001b5c <MX_GPIO_Init+0xd0>)
 8001b1e:	0019      	movs	r1, r3
 8001b20:	0010      	movs	r0, r2
 8001b22:	f000 ffdb 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b26:	0021      	movs	r1, r4
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2201      	movs	r2, #1
 8001b32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b40:	187a      	adds	r2, r7, r1
 8001b42:	2390      	movs	r3, #144	@ 0x90
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	0011      	movs	r1, r2
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 ffc7 	bl	8002adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b009      	add	sp, #36	@ 0x24
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48000800 	.word	0x48000800

08001b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b64:	b672      	cpsid	i
}
 8001b66:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b68:	46c0      	nop			@ (mov r8, r8)
 8001b6a:	e7fd      	b.n	8001b68 <Error_Handler+0x8>

08001b6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	619a      	str	r2, [r3, #24]
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4013      	ands	r3, r2
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b90:	2180      	movs	r1, #128	@ 0x80
 8001b92:	0549      	lsls	r1, r1, #21
 8001b94:	430a      	orrs	r2, r1
 8001b96:	61da      	str	r2, [r3, #28]
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_MspInit+0x44>)
 8001b9a:	69da      	ldr	r2, [r3, #28]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	055b      	lsls	r3, r3, #21
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	603b      	str	r3, [r7, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba6:	46c0      	nop			@ (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b002      	add	sp, #8
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b08b      	sub	sp, #44	@ 0x2c
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	2414      	movs	r4, #20
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	2314      	movs	r3, #20
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	f003 f934 	bl	8004e34 <memset>
  if(hadc->Instance==ADC1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8001c88 <HAL_ADC_MspInit+0xd4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d153      	bne.n	8001c7e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_ADC_MspInit+0xd8>)
 8001bd8:	699a      	ldr	r2, [r3, #24]
 8001bda:	4b2c      	ldr	r3, [pc, #176]	@ (8001c8c <HAL_ADC_MspInit+0xd8>)
 8001bdc:	2180      	movs	r1, #128	@ 0x80
 8001bde:	0089      	lsls	r1, r1, #2
 8001be0:	430a      	orrs	r2, r1
 8001be2:	619a      	str	r2, [r3, #24]
 8001be4:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_ADC_MspInit+0xd8>)
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <HAL_ADC_MspInit+0xd8>)
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	4b25      	ldr	r3, [pc, #148]	@ (8001c8c <HAL_ADC_MspInit+0xd8>)
 8001bf8:	2180      	movs	r1, #128	@ 0x80
 8001bfa:	0289      	lsls	r1, r1, #10
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	615a      	str	r2, [r3, #20]
 8001c00:	4b22      	ldr	r3, [pc, #136]	@ (8001c8c <HAL_ADC_MspInit+0xd8>)
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	029b      	lsls	r3, r3, #10
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c0e:	193b      	adds	r3, r7, r4
 8001c10:	2201      	movs	r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c14:	193b      	adds	r3, r7, r4
 8001c16:	2203      	movs	r2, #3
 8001c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	193a      	adds	r2, r7, r4
 8001c22:	2390      	movs	r3, #144	@ 0x90
 8001c24:	05db      	lsls	r3, r3, #23
 8001c26:	0011      	movs	r1, r2
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f000 ff57 	bl	8002adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c30:	4a18      	ldr	r2, [pc, #96]	@ (8001c94 <HAL_ADC_MspInit+0xe0>)
 8001c32:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c42:	2280      	movs	r2, #128	@ 0x80
 8001c44:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c46:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c48:	2280      	movs	r2, #128	@ 0x80
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c50:	2280      	movs	r2, #128	@ 0x80
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c58:	2220      	movs	r2, #32
 8001c5a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 fe33 	bl	80028d0 <HAL_DMA_Init>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001c6e:	f7ff ff77 	bl	8001b60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a06      	ldr	r2, [pc, #24]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_ADC_MspInit+0xdc>)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b00b      	add	sp, #44	@ 0x2c
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	40012400 	.word	0x40012400
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	20000068 	.word	0x20000068
 8001c94:	40020008 	.word	0x40020008

08001c98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <HAL_TIM_Base_MspInit+0x6c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HAL_TIM_Base_MspInit+0x70>)
 8001cac:	699a      	ldr	r2, [r3, #24]
 8001cae:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <HAL_TIM_Base_MspInit+0x70>)
 8001cb0:	2180      	movs	r1, #128	@ 0x80
 8001cb2:	0109      	lsls	r1, r1, #4
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	619a      	str	r2, [r3, #24]
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <HAL_TIM_Base_MspInit+0x70>)
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	2380      	movs	r3, #128	@ 0x80
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cc6:	e018      	b.n	8001cfa <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8001d0c <HAL_TIM_Base_MspInit+0x74>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d113      	bne.n	8001cfa <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_TIM_Base_MspInit+0x70>)
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <HAL_TIM_Base_MspInit+0x70>)
 8001cd8:	2102      	movs	r1, #2
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	61da      	str	r2, [r3, #28]
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_TIM_Base_MspInit+0x70>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	2010      	movs	r0, #16
 8001cf0:	f000 fdbc 	bl	800286c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cf4:	2010      	movs	r0, #16
 8001cf6:	f000 fdce 	bl	8002896 <HAL_NVIC_EnableIRQ>
}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b004      	add	sp, #16
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40000400 	.word	0x40000400

08001d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b089      	sub	sp, #36	@ 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	240c      	movs	r4, #12
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	2314      	movs	r3, #20
 8001d20:	001a      	movs	r2, r3
 8001d22:	2100      	movs	r1, #0
 8001d24:	f003 f886 	bl	8004e34 <memset>
  if(htim->Instance==TIM3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <HAL_TIM_MspPostInit+0x74>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d124      	bne.n	8001d7c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <HAL_TIM_MspPostInit+0x78>)
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_TIM_MspPostInit+0x78>)
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	0289      	lsls	r1, r1, #10
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	615a      	str	r2, [r3, #20]
 8001d40:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_TIM_MspPostInit+0x78>)
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	029b      	lsls	r3, r3, #10
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d4e:	0021      	movs	r1, r4
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2240      	movs	r2, #64	@ 0x40
 8001d54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2202      	movs	r2, #2
 8001d5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	2200      	movs	r2, #0
 8001d66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	187a      	adds	r2, r7, r1
 8001d70:	2390      	movs	r3, #144	@ 0x90
 8001d72:	05db      	lsls	r3, r3, #23
 8001d74:	0011      	movs	r1, r2
 8001d76:	0018      	movs	r0, r3
 8001d78:	f000 feb0 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d7c:	46c0      	nop			@ (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b009      	add	sp, #36	@ 0x24
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b08b      	sub	sp, #44	@ 0x2c
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	2414      	movs	r4, #20
 8001d96:	193b      	adds	r3, r7, r4
 8001d98:	0018      	movs	r0, r3
 8001d9a:	2314      	movs	r3, #20
 8001d9c:	001a      	movs	r2, r3
 8001d9e:	2100      	movs	r1, #0
 8001da0:	f003 f848 	bl	8004e34 <memset>
  if(huart->Instance==USART2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1c      	ldr	r2, [pc, #112]	@ (8001e1c <HAL_UART_MspInit+0x90>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d132      	bne.n	8001e14 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dae:	4b1c      	ldr	r3, [pc, #112]	@ (8001e20 <HAL_UART_MspInit+0x94>)
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_UART_MspInit+0x94>)
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	0289      	lsls	r1, r1, #10
 8001db8:	430a      	orrs	r2, r1
 8001dba:	61da      	str	r2, [r3, #28]
 8001dbc:	4b18      	ldr	r3, [pc, #96]	@ (8001e20 <HAL_UART_MspInit+0x94>)
 8001dbe:	69da      	ldr	r2, [r3, #28]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <HAL_UART_MspInit+0x94>)
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <HAL_UART_MspInit+0x94>)
 8001dd0:	2180      	movs	r1, #128	@ 0x80
 8001dd2:	0289      	lsls	r1, r1, #10
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	4b11      	ldr	r3, [pc, #68]	@ (8001e20 <HAL_UART_MspInit+0x94>)
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	2380      	movs	r3, #128	@ 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001de6:	0021      	movs	r1, r4
 8001de8:	187b      	adds	r3, r7, r1
 8001dea:	220c      	movs	r2, #12
 8001dec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	187b      	adds	r3, r7, r1
 8001df0:	2202      	movs	r2, #2
 8001df2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	187b      	adds	r3, r7, r1
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001e00:	187b      	adds	r3, r7, r1
 8001e02:	2201      	movs	r2, #1
 8001e04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	187a      	adds	r2, r7, r1
 8001e08:	2390      	movs	r3, #144	@ 0x90
 8001e0a:	05db      	lsls	r3, r3, #23
 8001e0c:	0011      	movs	r1, r2
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 fe64 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b00b      	add	sp, #44	@ 0x2c
 8001e1a:	bd90      	pop	{r4, r7, pc}
 8001e1c:	40004400 	.word	0x40004400
 8001e20:	40021000 	.word	0x40021000

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	e7fd      	b.n	8001e28 <NMI_Handler+0x4>

08001e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e30:	46c0      	nop			@ (mov r8, r8)
 8001e32:	e7fd      	b.n	8001e30 <HardFault_Handler+0x4>

08001e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e38:	46c0      	nop			@ (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 f894 	bl	8001f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	46c0      	nop			@ (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001e5c:	4b03      	ldr	r3, [pc, #12]	@ (8001e6c <DMA1_Channel1_IRQHandler+0x14>)
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 fd7e 	bl	8002960 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e64:	46c0      	nop			@ (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	20000068 	.word	0x20000068

08001e70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <TIM3_IRQHandler+0x14>)
 8001e76:	0018      	movs	r0, r3
 8001e78:	f001 fdc2 	bl	8003a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e7c:	46c0      	nop			@ (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			@ (mov r8, r8)
 8001e84:	200000f4 	.word	0x200000f4

08001e88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e94:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e98:	f7ff fff6 	bl	8001e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e9c:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9e:	490d      	ldr	r1, [pc, #52]	@ (8001ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <LoopForever+0xe>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee0 <LoopForever+0x16>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ec2:	f002 ffbf 	bl	8004e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ec6:	f7ff fb9b 	bl	8001600 <main>

08001eca <LoopForever>:

LoopForever:
    b LoopForever
 8001eca:	e7fe      	b.n	8001eca <LoopForever>
  ldr   r0, =_estack
 8001ecc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ed8:	08004ee4 	.word	0x08004ee4
  ldr r2, =_sbss
 8001edc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001ee0:	200001f4 	.word	0x200001f4

08001ee4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC1_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <HAL_Init+0x24>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_Init+0x24>)
 8001ef2:	2110      	movs	r1, #16
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f000 f809 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001efe:	f7ff fe35 	bl	8001b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	40022000 	.word	0x40022000

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_InitTick+0x5c>)
 8001f1a:	681c      	ldr	r4, [r3, #0]
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <HAL_InitTick+0x60>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	0019      	movs	r1, r3
 8001f22:	23fa      	movs	r3, #250	@ 0xfa
 8001f24:	0098      	lsls	r0, r3, #2
 8001f26:	f7fe f8ef 	bl	8000108 <__udivsi3>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	0020      	movs	r0, r4
 8001f30:	f7fe f8ea 	bl	8000108 <__udivsi3>
 8001f34:	0003      	movs	r3, r0
 8001f36:	0018      	movs	r0, r3
 8001f38:	f000 fcbd 	bl	80028b6 <HAL_SYSTICK_Config>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e00f      	b.n	8001f64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d80b      	bhi.n	8001f62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	425b      	negs	r3, r3
 8001f50:	2200      	movs	r2, #0
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 fc8a 	bl	800286c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <HAL_InitTick+0x64>)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e000      	b.n	8001f64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b003      	add	sp, #12
 8001f6a:	bd90      	pop	{r4, r7, pc}
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000008 	.word	0x20000008
 8001f74:	20000004 	.word	0x20000004

08001f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	@ (8001f94 <HAL_IncTick+0x1c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	001a      	movs	r2, r3
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_IncTick+0x20>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	18d2      	adds	r2, r2, r3
 8001f88:	4b03      	ldr	r3, [pc, #12]	@ (8001f98 <HAL_IncTick+0x20>)
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	46c0      	nop			@ (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	20000008 	.word	0x20000008
 8001f98:	200001f0 	.word	0x200001f0

08001f9c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa0:	4b02      	ldr	r3, [pc, #8]	@ (8001fac <HAL_GetTick+0x10>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	200001f0 	.word	0x200001f0

08001fb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	230f      	movs	r3, #15
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e125      	b.n	800221a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2234      	movs	r2, #52	@ 0x34
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f7ff fde4 	bl	8001bb4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff0:	2210      	movs	r2, #16
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d000      	beq.n	8001ff8 <HAL_ADC_Init+0x48>
 8001ff6:	e103      	b.n	8002200 <HAL_ADC_Init+0x250>
 8001ff8:	230f      	movs	r3, #15
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d000      	beq.n	8002004 <HAL_ADC_Init+0x54>
 8002002:	e0fd      	b.n	8002200 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2204      	movs	r2, #4
 800200c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800200e:	d000      	beq.n	8002012 <HAL_ADC_Init+0x62>
 8002010:	e0f6      	b.n	8002200 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002016:	4a83      	ldr	r2, [pc, #524]	@ (8002224 <HAL_ADC_Init+0x274>)
 8002018:	4013      	ands	r3, r2
 800201a:	2202      	movs	r2, #2
 800201c:	431a      	orrs	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2203      	movs	r2, #3
 800202a:	4013      	ands	r3, r2
 800202c:	2b01      	cmp	r3, #1
 800202e:	d112      	bne.n	8002056 <HAL_ADC_Init+0xa6>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2201      	movs	r2, #1
 8002038:	4013      	ands	r3, r2
 800203a:	2b01      	cmp	r3, #1
 800203c:	d009      	beq.n	8002052 <HAL_ADC_Init+0xa2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	401a      	ands	r2, r3
 800204a:	2380      	movs	r3, #128	@ 0x80
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	429a      	cmp	r2, r3
 8002050:	d101      	bne.n	8002056 <HAL_ADC_Init+0xa6>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_ADC_Init+0xa8>
 8002056:	2300      	movs	r3, #0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d116      	bne.n	800208a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	2218      	movs	r2, #24
 8002064:	4393      	bics	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	0899      	lsrs	r1, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4964      	ldr	r1, [pc, #400]	@ (8002228 <HAL_ADC_Init+0x278>)
 8002096:	400a      	ands	r2, r1
 8002098:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	7e1b      	ldrb	r3, [r3, #24]
 800209e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7e5b      	ldrb	r3, [r3, #25]
 80020a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7e9b      	ldrb	r3, [r3, #26]
 80020ac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80020ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d002      	beq.n	80020be <HAL_ADC_Init+0x10e>
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	e000      	b.n	80020c0 <HAL_ADC_Init+0x110>
 80020be:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80020c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80020c6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_Init+0x124>
 80020d0:	2304      	movs	r3, #4
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_Init+0x126>
 80020d4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80020d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2124      	movs	r1, #36	@ 0x24
 80020dc:	5c5b      	ldrb	r3, [r3, r1]
 80020de:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80020e0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7edb      	ldrb	r3, [r3, #27]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d115      	bne.n	800211c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7e9b      	ldrb	r3, [r3, #26]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	0252      	lsls	r2, r2, #9
 80020fe:	4313      	orrs	r3, r2
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	e00b      	b.n	800211c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002108:	2220      	movs	r2, #32
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002114:	2201      	movs	r2, #1
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	23c2      	movs	r3, #194	@ 0xc2
 8002122:	33ff      	adds	r3, #255	@ 0xff
 8002124:	429a      	cmp	r2, r3
 8002126:	d007      	beq.n	8002138 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002130:	4313      	orrs	r3, r2
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4313      	orrs	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68d9      	ldr	r1, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	429a      	cmp	r2, r3
 8002152:	d01b      	beq.n	800218c <HAL_ADC_Init+0x1dc>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	2b01      	cmp	r3, #1
 800215a:	d017      	beq.n	800218c <HAL_ADC_Init+0x1dc>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002160:	2b02      	cmp	r3, #2
 8002162:	d013      	beq.n	800218c <HAL_ADC_Init+0x1dc>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002168:	2b03      	cmp	r3, #3
 800216a:	d00f      	beq.n	800218c <HAL_ADC_Init+0x1dc>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	2b04      	cmp	r3, #4
 8002172:	d00b      	beq.n	800218c <HAL_ADC_Init+0x1dc>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002178:	2b05      	cmp	r3, #5
 800217a:	d007      	beq.n	800218c <HAL_ADC_Init+0x1dc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002180:	2b06      	cmp	r3, #6
 8002182:	d003      	beq.n	800218c <HAL_ADC_Init+0x1dc>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	2b07      	cmp	r3, #7
 800218a:	d112      	bne.n	80021b2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2107      	movs	r1, #7
 8002198:	438a      	bics	r2, r1
 800219a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6959      	ldr	r1, [r3, #20]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a6:	2207      	movs	r2, #7
 80021a8:	401a      	ands	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4a1c      	ldr	r2, [pc, #112]	@ (800222c <HAL_ADC_Init+0x27c>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d10b      	bne.n	80021da <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021cc:	2203      	movs	r2, #3
 80021ce:	4393      	bics	r3, r2
 80021d0:	2201      	movs	r2, #1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80021d8:	e01c      	b.n	8002214 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021de:	2212      	movs	r2, #18
 80021e0:	4393      	bics	r3, r2
 80021e2:	2210      	movs	r2, #16
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ee:	2201      	movs	r2, #1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80021f6:	230f      	movs	r3, #15
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	2201      	movs	r2, #1
 80021fc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80021fe:	e009      	b.n	8002214 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002204:	2210      	movs	r2, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 800220c:	230f      	movs	r3, #15
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002214:	230f      	movs	r3, #15
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	781b      	ldrb	r3, [r3, #0]
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	fffffefd 	.word	0xfffffefd
 8002228:	fffe0219 	.word	0xfffe0219
 800222c:	833fffe7 	.word	0x833fffe7

08002230 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002230:	b590      	push	{r4, r7, lr}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002238:	230f      	movs	r3, #15
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2204      	movs	r2, #4
 8002248:	4013      	ands	r3, r2
 800224a:	d138      	bne.n	80022be <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2234      	movs	r2, #52	@ 0x34
 8002250:	5c9b      	ldrb	r3, [r3, r2]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ADC_Start+0x2a>
 8002256:	2302      	movs	r3, #2
 8002258:	e038      	b.n	80022cc <HAL_ADC_Start+0x9c>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2234      	movs	r2, #52	@ 0x34
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7e5b      	ldrb	r3, [r3, #25]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d007      	beq.n	800227a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800226a:	230f      	movs	r3, #15
 800226c:	18fc      	adds	r4, r7, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 f9cb 	bl	800260c <ADC_Enable>
 8002276:	0003      	movs	r3, r0
 8002278:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800227a:	230f      	movs	r3, #15
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d120      	bne.n	80022c6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002288:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <HAL_ADC_Start+0xa4>)
 800228a:	4013      	ands	r3, r2
 800228c:	2280      	movs	r2, #128	@ 0x80
 800228e:	0052      	lsls	r2, r2, #1
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2234      	movs	r2, #52	@ 0x34
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	221c      	movs	r2, #28
 80022aa:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2104      	movs	r1, #4
 80022b8:	430a      	orrs	r2, r1
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	e003      	b.n	80022c6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022be:	230f      	movs	r3, #15
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2202      	movs	r2, #2
 80022c4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022c6:	230f      	movs	r3, #15
 80022c8:	18fb      	adds	r3, r7, r3
 80022ca:	781b      	ldrb	r3, [r3, #0]
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b005      	add	sp, #20
 80022d2:	bd90      	pop	{r4, r7, pc}
 80022d4:	fffff0fe 	.word	0xfffff0fe

080022d8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d102      	bne.n	80022f0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80022ea:	2308      	movs	r3, #8
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e014      	b.n	800231a <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d10b      	bne.n	8002316 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002302:	2220      	movs	r2, #32
 8002304:	431a      	orrs	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2234      	movs	r2, #52	@ 0x34
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e071      	b.n	80023fa <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002316:	230c      	movs	r3, #12
 8002318:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800231a:	f7ff fe3f 	bl	8001f9c <HAL_GetTick>
 800231e:	0003      	movs	r3, r0
 8002320:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002322:	e01f      	b.n	8002364 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	d01c      	beq.n	8002364 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d007      	beq.n	8002340 <HAL_ADC_PollForConversion+0x68>
 8002330:	f7ff fe34 	bl	8001f9c <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d211      	bcs.n	8002364 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	d10b      	bne.n	8002364 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002350:	2204      	movs	r2, #4
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2234      	movs	r2, #52	@ 0x34
 800235c:	2100      	movs	r1, #0
 800235e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e04a      	b.n	80023fa <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4013      	ands	r3, r2
 800236e:	d0d9      	beq.n	8002324 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002374:	2280      	movs	r2, #128	@ 0x80
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	431a      	orrs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	23c0      	movs	r3, #192	@ 0xc0
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4013      	ands	r3, r2
 800238a:	d12d      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002390:	2b00      	cmp	r3, #0
 8002392:	d129      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2208      	movs	r2, #8
 800239c:	4013      	ands	r3, r2
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d122      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2204      	movs	r2, #4
 80023aa:	4013      	ands	r3, r2
 80023ac:	d110      	bne.n	80023d0 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	210c      	movs	r1, #12
 80023ba:	438a      	bics	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c2:	4a10      	ldr	r2, [pc, #64]	@ (8002404 <HAL_ADC_PollForConversion+0x12c>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	2201      	movs	r2, #1
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80023ce:	e00b      	b.n	80023e8 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d4:	2220      	movs	r2, #32
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023e0:	2201      	movs	r2, #1
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	7e1b      	ldrb	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	220c      	movs	r2, #12
 80023f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bd80      	pop	{r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	fffffefe 	.word	0xfffffefe

08002408 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242a:	230f      	movs	r3, #15
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	429a      	cmp	r2, r3
 8002440:	d011      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x46>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d00d      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x46>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	2b02      	cmp	r3, #2
 8002450:	d009      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x46>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002456:	2b03      	cmp	r3, #3
 8002458:	d005      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x46>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245e:	2b04      	cmp	r3, #4
 8002460:	d001      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x46>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2234      	movs	r2, #52	@ 0x34
 800246a:	5c9b      	ldrb	r3, [r3, r2]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x54>
 8002470:	2302      	movs	r3, #2
 8002472:	e0bb      	b.n	80025ec <HAL_ADC_ConfigChannel+0x1cc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2234      	movs	r2, #52	@ 0x34
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2204      	movs	r2, #4
 8002484:	4013      	ands	r3, r2
 8002486:	d000      	beq.n	800248a <HAL_ADC_ConfigChannel+0x6a>
 8002488:	e09f      	b.n	80025ca <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a59      	ldr	r2, [pc, #356]	@ (80025f4 <HAL_ADC_ConfigChannel+0x1d4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d100      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x76>
 8002494:	e077      	b.n	8002586 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2201      	movs	r2, #1
 80024a2:	409a      	lsls	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024b0:	2380      	movs	r3, #128	@ 0x80
 80024b2:	055b      	lsls	r3, r3, #21
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d037      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d033      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d02f      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d02b      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d027      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d023      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	2b06      	cmp	r3, #6
 80024e6:	d01f      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	2b07      	cmp	r3, #7
 80024ee:	d01b      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	2107      	movs	r1, #7
 80024fc:	400b      	ands	r3, r1
 80024fe:	429a      	cmp	r2, r3
 8002500:	d012      	beq.n	8002528 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2107      	movs	r1, #7
 800250e:	438a      	bics	r2, r1
 8002510:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6959      	ldr	r1, [r3, #20]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2207      	movs	r2, #7
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b10      	cmp	r3, #16
 800252e:	d003      	beq.n	8002538 <HAL_ADC_ConfigChannel+0x118>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b11      	cmp	r3, #17
 8002536:	d152      	bne.n	80025de <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002538:	4b2f      	ldr	r3, [pc, #188]	@ (80025f8 <HAL_ADC_ConfigChannel+0x1d8>)
 800253a:	6819      	ldr	r1, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b10      	cmp	r3, #16
 8002542:	d102      	bne.n	800254a <HAL_ADC_ConfigChannel+0x12a>
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	041b      	lsls	r3, r3, #16
 8002548:	e001      	b.n	800254e <HAL_ADC_ConfigChannel+0x12e>
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	03db      	lsls	r3, r3, #15
 800254e:	4a2a      	ldr	r2, [pc, #168]	@ (80025f8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002550:	430b      	orrs	r3, r1
 8002552:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b10      	cmp	r3, #16
 800255a:	d140      	bne.n	80025de <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800255c:	4b27      	ldr	r3, [pc, #156]	@ (80025fc <HAL_ADC_ConfigChannel+0x1dc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4927      	ldr	r1, [pc, #156]	@ (8002600 <HAL_ADC_ConfigChannel+0x1e0>)
 8002562:	0018      	movs	r0, r3
 8002564:	f7fd fdd0 	bl	8000108 <__udivsi3>
 8002568:	0003      	movs	r3, r0
 800256a:	001a      	movs	r2, r3
 800256c:	0013      	movs	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	189b      	adds	r3, r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002576:	e002      	b.n	800257e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3b01      	subs	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f9      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x158>
 8002584:	e02b      	b.n	80025de <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2101      	movs	r1, #1
 8002592:	4099      	lsls	r1, r3
 8002594:	000b      	movs	r3, r1
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	400a      	ands	r2, r1
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b10      	cmp	r3, #16
 80025a6:	d003      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x190>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b11      	cmp	r3, #17
 80025ae:	d116      	bne.n	80025de <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80025b0:	4b11      	ldr	r3, [pc, #68]	@ (80025f8 <HAL_ADC_ConfigChannel+0x1d8>)
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d101      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x1a0>
 80025bc:	4a11      	ldr	r2, [pc, #68]	@ (8002604 <HAL_ADC_ConfigChannel+0x1e4>)
 80025be:	e000      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x1a2>
 80025c0:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <HAL_ADC_ConfigChannel+0x1e8>)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <HAL_ADC_ConfigChannel+0x1d8>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	e009      	b.n	80025de <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ce:	2220      	movs	r2, #32
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2234      	movs	r2, #52	@ 0x34
 80025e2:	2100      	movs	r1, #0
 80025e4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80025e6:	230f      	movs	r3, #15
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	781b      	ldrb	r3, [r3, #0]
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	00001001 	.word	0x00001001
 80025f8:	40012708 	.word	0x40012708
 80025fc:	20000000 	.word	0x20000000
 8002600:	000f4240 	.word	0x000f4240
 8002604:	ff7fffff 	.word	0xff7fffff
 8002608:	ffbfffff 	.word	0xffbfffff

0800260c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2203      	movs	r2, #3
 8002624:	4013      	ands	r3, r2
 8002626:	2b01      	cmp	r3, #1
 8002628:	d112      	bne.n	8002650 <ADC_Enable+0x44>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
 8002634:	2b01      	cmp	r3, #1
 8002636:	d009      	beq.n	800264c <ADC_Enable+0x40>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	401a      	ands	r2, r3
 8002644:	2380      	movs	r3, #128	@ 0x80
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	429a      	cmp	r2, r3
 800264a:	d101      	bne.n	8002650 <ADC_Enable+0x44>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <ADC_Enable+0x46>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d152      	bne.n	80026fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a2a      	ldr	r2, [pc, #168]	@ (8002708 <ADC_Enable+0xfc>)
 800265e:	4013      	ands	r3, r2
 8002660:	d00d      	beq.n	800267e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	2210      	movs	r2, #16
 8002668:	431a      	orrs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	2201      	movs	r2, #1
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e03f      	b.n	80026fe <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2101      	movs	r1, #1
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800268e:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <ADC_Enable+0x100>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	491f      	ldr	r1, [pc, #124]	@ (8002710 <ADC_Enable+0x104>)
 8002694:	0018      	movs	r0, r3
 8002696:	f7fd fd37 	bl	8000108 <__udivsi3>
 800269a:	0003      	movs	r3, r0
 800269c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800269e:	e002      	b.n	80026a6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1f9      	bne.n	80026a0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ac:	f7ff fc76 	bl	8001f9c <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026b4:	e01b      	b.n	80026ee <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026b6:	f7ff fc71 	bl	8001f9c <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d914      	bls.n	80026ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d00d      	beq.n	80026ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	2210      	movs	r2, #16
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e2:	2201      	movs	r2, #1
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e007      	b.n	80026fe <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d1dc      	bne.n	80026b6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	80000017 	.word	0x80000017
 800270c:	20000000 	.word	0x20000000
 8002710:	000f4240 	.word	0x000f4240

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	0002      	movs	r2, r0
 800271c:	1dfb      	adds	r3, r7, #7
 800271e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002720:	1dfb      	adds	r3, r7, #7
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b7f      	cmp	r3, #127	@ 0x7f
 8002726:	d809      	bhi.n	800273c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	001a      	movs	r2, r3
 800272e:	231f      	movs	r3, #31
 8002730:	401a      	ands	r2, r3
 8002732:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <__NVIC_EnableIRQ+0x30>)
 8002734:	2101      	movs	r1, #1
 8002736:	4091      	lsls	r1, r2
 8002738:	000a      	movs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
  }
}
 800273c:	46c0      	nop			@ (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}
 8002744:	e000e100 	.word	0xe000e100

08002748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	0002      	movs	r2, r0
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	1dfb      	adds	r3, r7, #7
 8002754:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b7f      	cmp	r3, #127	@ 0x7f
 800275c:	d828      	bhi.n	80027b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800275e:	4a2f      	ldr	r2, [pc, #188]	@ (800281c <__NVIC_SetPriority+0xd4>)
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b25b      	sxtb	r3, r3
 8002766:	089b      	lsrs	r3, r3, #2
 8002768:	33c0      	adds	r3, #192	@ 0xc0
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	589b      	ldr	r3, [r3, r2]
 800276e:	1dfa      	adds	r2, r7, #7
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	0011      	movs	r1, r2
 8002774:	2203      	movs	r2, #3
 8002776:	400a      	ands	r2, r1
 8002778:	00d2      	lsls	r2, r2, #3
 800277a:	21ff      	movs	r1, #255	@ 0xff
 800277c:	4091      	lsls	r1, r2
 800277e:	000a      	movs	r2, r1
 8002780:	43d2      	mvns	r2, r2
 8002782:	401a      	ands	r2, r3
 8002784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	019b      	lsls	r3, r3, #6
 800278a:	22ff      	movs	r2, #255	@ 0xff
 800278c:	401a      	ands	r2, r3
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	0018      	movs	r0, r3
 8002794:	2303      	movs	r3, #3
 8002796:	4003      	ands	r3, r0
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800279c:	481f      	ldr	r0, [pc, #124]	@ (800281c <__NVIC_SetPriority+0xd4>)
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b25b      	sxtb	r3, r3
 80027a4:	089b      	lsrs	r3, r3, #2
 80027a6:	430a      	orrs	r2, r1
 80027a8:	33c0      	adds	r3, #192	@ 0xc0
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027ae:	e031      	b.n	8002814 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <__NVIC_SetPriority+0xd8>)
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	0019      	movs	r1, r3
 80027b8:	230f      	movs	r3, #15
 80027ba:	400b      	ands	r3, r1
 80027bc:	3b08      	subs	r3, #8
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3306      	adds	r3, #6
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	18d3      	adds	r3, r2, r3
 80027c6:	3304      	adds	r3, #4
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	1dfa      	adds	r2, r7, #7
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	0011      	movs	r1, r2
 80027d0:	2203      	movs	r2, #3
 80027d2:	400a      	ands	r2, r1
 80027d4:	00d2      	lsls	r2, r2, #3
 80027d6:	21ff      	movs	r1, #255	@ 0xff
 80027d8:	4091      	lsls	r1, r2
 80027da:	000a      	movs	r2, r1
 80027dc:	43d2      	mvns	r2, r2
 80027de:	401a      	ands	r2, r3
 80027e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	22ff      	movs	r2, #255	@ 0xff
 80027e8:	401a      	ands	r2, r3
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	0018      	movs	r0, r3
 80027f0:	2303      	movs	r3, #3
 80027f2:	4003      	ands	r3, r0
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f8:	4809      	ldr	r0, [pc, #36]	@ (8002820 <__NVIC_SetPriority+0xd8>)
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	001c      	movs	r4, r3
 8002800:	230f      	movs	r3, #15
 8002802:	4023      	ands	r3, r4
 8002804:	3b08      	subs	r3, #8
 8002806:	089b      	lsrs	r3, r3, #2
 8002808:	430a      	orrs	r2, r1
 800280a:	3306      	adds	r3, #6
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	18c3      	adds	r3, r0, r3
 8002810:	3304      	adds	r3, #4
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	46c0      	nop			@ (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b003      	add	sp, #12
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	e000e100 	.word	0xe000e100
 8002820:	e000ed00 	.word	0xe000ed00

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	1e5a      	subs	r2, r3, #1
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	045b      	lsls	r3, r3, #17
 8002834:	429a      	cmp	r2, r3
 8002836:	d301      	bcc.n	800283c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002838:	2301      	movs	r3, #1
 800283a:	e010      	b.n	800285e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283c:	4b0a      	ldr	r3, [pc, #40]	@ (8002868 <SysTick_Config+0x44>)
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	3a01      	subs	r2, #1
 8002842:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002844:	2301      	movs	r3, #1
 8002846:	425b      	negs	r3, r3
 8002848:	2103      	movs	r1, #3
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff ff7c 	bl	8002748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <SysTick_Config+0x44>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <SysTick_Config+0x44>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	0018      	movs	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	210f      	movs	r1, #15
 8002878:	187b      	adds	r3, r7, r1
 800287a:	1c02      	adds	r2, r0, #0
 800287c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	187b      	adds	r3, r7, r1
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	b25b      	sxtb	r3, r3
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f7ff ff5d 	bl	8002748 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b004      	add	sp, #16
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	0002      	movs	r2, r0
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7ff ff33 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028ae:	46c0      	nop			@ (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b002      	add	sp, #8
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff ffaf 	bl	8002824 <SysTick_Config>
 80028c6:	0003      	movs	r3, r0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e036      	b.n	8002954 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2221      	movs	r2, #33	@ 0x21
 80028ea:	2102      	movs	r1, #2
 80028ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4a18      	ldr	r2, [pc, #96]	@ (800295c <HAL_DMA_Init+0x8c>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	0018      	movs	r0, r3
 8002938:	f000 f8b4 	bl	8002aa4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2221      	movs	r2, #33	@ 0x21
 8002946:	2101      	movs	r1, #1
 8002948:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	2100      	movs	r1, #0
 8002950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	b004      	add	sp, #16
 800295a:	bd80      	pop	{r7, pc}
 800295c:	ffffc00f 	.word	0xffffc00f

08002960 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	2204      	movs	r2, #4
 800297e:	409a      	lsls	r2, r3
 8002980:	0013      	movs	r3, r2
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4013      	ands	r3, r2
 8002986:	d024      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x72>
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2204      	movs	r2, #4
 800298c:	4013      	ands	r3, r2
 800298e:	d020      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	d107      	bne.n	80029ac <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2104      	movs	r1, #4
 80029a8:	438a      	bics	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b4:	2104      	movs	r1, #4
 80029b6:	4091      	lsls	r1, r2
 80029b8:	000a      	movs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d100      	bne.n	80029c6 <HAL_DMA_IRQHandler+0x66>
 80029c4:	e06a      	b.n	8002a9c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	0010      	movs	r0, r2
 80029ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029d0:	e064      	b.n	8002a9c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	2202      	movs	r2, #2
 80029d8:	409a      	lsls	r2, r3
 80029da:	0013      	movs	r3, r2
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xda>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2202      	movs	r2, #2
 80029e6:	4013      	ands	r3, r2
 80029e8:	d027      	beq.n	8002a3a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2220      	movs	r2, #32
 80029f2:	4013      	ands	r3, r2
 80029f4:	d10b      	bne.n	8002a0e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	210a      	movs	r1, #10
 8002a02:	438a      	bics	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2221      	movs	r2, #33	@ 0x21
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a16:	2102      	movs	r1, #2
 8002a18:	4091      	lsls	r1, r2
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	2100      	movs	r1, #0
 8002a24:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d036      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	0010      	movs	r0, r2
 8002a36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a38:	e030      	b.n	8002a9c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	2208      	movs	r2, #8
 8002a40:	409a      	lsls	r2, r3
 8002a42:	0013      	movs	r3, r2
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	d028      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x13c>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d024      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	210e      	movs	r1, #14
 8002a5e:	438a      	bics	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4091      	lsls	r1, r2
 8002a6e:	000a      	movs	r2, r1
 8002a70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2221      	movs	r2, #33	@ 0x21
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	0010      	movs	r0, r2
 8002a98:	4798      	blx	r3
    }
  }
}
 8002a9a:	e7ff      	b.n	8002a9c <HAL_DMA_IRQHandler+0x13c>
 8002a9c:	46c0      	nop			@ (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a08      	ldr	r2, [pc, #32]	@ (8002ad4 <DMA_CalcBaseAndBitshift+0x30>)
 8002ab2:	4694      	mov	ip, r2
 8002ab4:	4463      	add	r3, ip
 8002ab6:	2114      	movs	r1, #20
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fd fb25 	bl	8000108 <__udivsi3>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	009a      	lsls	r2, r3, #2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a03      	ldr	r2, [pc, #12]	@ (8002ad8 <DMA_CalcBaseAndBitshift+0x34>)
 8002aca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b002      	add	sp, #8
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	bffdfff8 	.word	0xbffdfff8
 8002ad8:	40020000 	.word	0x40020000

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	e14f      	b.n	8002d8c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4091      	lsls	r1, r2
 8002af6:	000a      	movs	r2, r1
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d100      	bne.n	8002b04 <HAL_GPIO_Init+0x28>
 8002b02:	e140      	b.n	8002d86 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d005      	beq.n	8002b1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2203      	movs	r2, #3
 8002b16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d130      	bne.n	8002b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	0013      	movs	r3, r2
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b52:	2201      	movs	r2, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
 8002b58:	0013      	movs	r3, r2
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	2201      	movs	r2, #1
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2203      	movs	r2, #3
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d017      	beq.n	8002bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	409a      	lsls	r2, r3
 8002b98:	0013      	movs	r3, r2
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d123      	bne.n	8002c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	58d3      	ldr	r3, [r2, r3]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	409a      	lsls	r2, r3
 8002be0:	0013      	movs	r3, r2
 8002be2:	43da      	mvns	r2, r3
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2107      	movs	r1, #7
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	0013      	movs	r3, r2
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	6939      	ldr	r1, [r7, #16]
 8002c0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	23c0      	movs	r3, #192	@ 0xc0
 8002c48:	029b      	lsls	r3, r3, #10
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d100      	bne.n	8002c50 <HAL_GPIO_Init+0x174>
 8002c4e:	e09a      	b.n	8002d86 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c50:	4b54      	ldr	r3, [pc, #336]	@ (8002da4 <HAL_GPIO_Init+0x2c8>)
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	4b53      	ldr	r3, [pc, #332]	@ (8002da4 <HAL_GPIO_Init+0x2c8>)
 8002c56:	2101      	movs	r1, #1
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	619a      	str	r2, [r3, #24]
 8002c5c:	4b51      	ldr	r3, [pc, #324]	@ (8002da4 <HAL_GPIO_Init+0x2c8>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2201      	movs	r2, #1
 8002c62:	4013      	ands	r3, r2
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c68:	4a4f      	ldr	r2, [pc, #316]	@ (8002da8 <HAL_GPIO_Init+0x2cc>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	589b      	ldr	r3, [r3, r2]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	409a      	lsls	r2, r3
 8002c82:	0013      	movs	r3, r2
 8002c84:	43da      	mvns	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	2390      	movs	r3, #144	@ 0x90
 8002c90:	05db      	lsls	r3, r3, #23
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d013      	beq.n	8002cbe <HAL_GPIO_Init+0x1e2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a44      	ldr	r2, [pc, #272]	@ (8002dac <HAL_GPIO_Init+0x2d0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00d      	beq.n	8002cba <HAL_GPIO_Init+0x1de>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a43      	ldr	r2, [pc, #268]	@ (8002db0 <HAL_GPIO_Init+0x2d4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <HAL_GPIO_Init+0x1da>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a42      	ldr	r2, [pc, #264]	@ (8002db4 <HAL_GPIO_Init+0x2d8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_GPIO_Init+0x1d6>
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e006      	b.n	8002cc0 <HAL_GPIO_Init+0x1e4>
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	e004      	b.n	8002cc0 <HAL_GPIO_Init+0x1e4>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e002      	b.n	8002cc0 <HAL_GPIO_Init+0x1e4>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <HAL_GPIO_Init+0x1e4>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	0092      	lsls	r2, r2, #2
 8002cc8:	4093      	lsls	r3, r2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd0:	4935      	ldr	r1, [pc, #212]	@ (8002da8 <HAL_GPIO_Init+0x2cc>)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	089b      	lsrs	r3, r3, #2
 8002cd6:	3302      	adds	r3, #2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cde:	4b36      	ldr	r3, [pc, #216]	@ (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	2380      	movs	r3, #128	@ 0x80
 8002cf4:	035b      	lsls	r3, r3, #13
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d02:	4b2d      	ldr	r3, [pc, #180]	@ (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d08:	4b2b      	ldr	r3, [pc, #172]	@ (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	43da      	mvns	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	2380      	movs	r3, #128	@ 0x80
 8002d1e:	039b      	lsls	r3, r3, #14
 8002d20:	4013      	ands	r3, r2
 8002d22:	d003      	beq.n	8002d2c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d2c:	4b22      	ldr	r3, [pc, #136]	@ (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002d32:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	029b      	lsls	r3, r3, #10
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d003      	beq.n	8002d56 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d56:	4b18      	ldr	r3, [pc, #96]	@ (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43da      	mvns	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	025b      	lsls	r3, r3, #9
 8002d74:	4013      	ands	r3, r2
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d80:	4b0d      	ldr	r3, [pc, #52]	@ (8002db8 <HAL_GPIO_Init+0x2dc>)
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	40da      	lsrs	r2, r3
 8002d94:	1e13      	subs	r3, r2, #0
 8002d96:	d000      	beq.n	8002d9a <HAL_GPIO_Init+0x2be>
 8002d98:	e6a8      	b.n	8002aec <HAL_GPIO_Init+0x10>
  } 
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b006      	add	sp, #24
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40010000 	.word	0x40010000
 8002dac:	48000400 	.word	0x48000400
 8002db0:	48000800 	.word	0x48000800
 8002db4:	48000c00 	.word	0x48000c00
 8002db8:	40010400 	.word	0x40010400

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	0008      	movs	r0, r1
 8002dc6:	0011      	movs	r1, r2
 8002dc8:	1cbb      	adds	r3, r7, #2
 8002dca:	1c02      	adds	r2, r0, #0
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	1c7b      	adds	r3, r7, #1
 8002dd0:	1c0a      	adds	r2, r1, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dd4:	1c7b      	adds	r3, r7, #1
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ddc:	1cbb      	adds	r3, r7, #2
 8002dde:	881a      	ldrh	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de4:	e003      	b.n	8002dee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de6:	1cbb      	adds	r3, r7, #2
 8002de8:	881a      	ldrh	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b002      	add	sp, #8
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e301      	b.n	800340e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	d100      	bne.n	8002e16 <HAL_RCC_OscConfig+0x1e>
 8002e14:	e08d      	b.n	8002f32 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e16:	4bc3      	ldr	r3, [pc, #780]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d00e      	beq.n	8002e40 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e22:	4bc0      	ldr	r3, [pc, #768]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	220c      	movs	r2, #12
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d116      	bne.n	8002e5c <HAL_RCC_OscConfig+0x64>
 8002e2e:	4bbd      	ldr	r3, [pc, #756]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	2380      	movs	r3, #128	@ 0x80
 8002e34:	025b      	lsls	r3, r3, #9
 8002e36:	401a      	ands	r2, r3
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	025b      	lsls	r3, r3, #9
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d10d      	bne.n	8002e5c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	4bb8      	ldr	r3, [pc, #736]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	029b      	lsls	r3, r3, #10
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <HAL_RCC_OscConfig+0x56>
 8002e4c:	e070      	b.n	8002f30 <HAL_RCC_OscConfig+0x138>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d000      	beq.n	8002e58 <HAL_RCC_OscConfig+0x60>
 8002e56:	e06b      	b.n	8002f30 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e2d8      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_RCC_OscConfig+0x7c>
 8002e64:	4baf      	ldr	r3, [pc, #700]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4bae      	ldr	r3, [pc, #696]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e6a:	2180      	movs	r1, #128	@ 0x80
 8002e6c:	0249      	lsls	r1, r1, #9
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e02f      	b.n	8002ed4 <HAL_RCC_OscConfig+0xdc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x9e>
 8002e7c:	4ba9      	ldr	r3, [pc, #676]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4ba8      	ldr	r3, [pc, #672]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e82:	49a9      	ldr	r1, [pc, #676]	@ (8003128 <HAL_RCC_OscConfig+0x330>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	4ba6      	ldr	r3, [pc, #664]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4ba5      	ldr	r3, [pc, #660]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002e8e:	49a7      	ldr	r1, [pc, #668]	@ (800312c <HAL_RCC_OscConfig+0x334>)
 8002e90:	400a      	ands	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e01e      	b.n	8002ed4 <HAL_RCC_OscConfig+0xdc>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10e      	bne.n	8002ebc <HAL_RCC_OscConfig+0xc4>
 8002e9e:	4ba1      	ldr	r3, [pc, #644]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4ba0      	ldr	r3, [pc, #640]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002ea4:	2180      	movs	r1, #128	@ 0x80
 8002ea6:	02c9      	lsls	r1, r1, #11
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	4b9d      	ldr	r3, [pc, #628]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b9c      	ldr	r3, [pc, #624]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002eb2:	2180      	movs	r1, #128	@ 0x80
 8002eb4:	0249      	lsls	r1, r1, #9
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xdc>
 8002ebc:	4b99      	ldr	r3, [pc, #612]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b98      	ldr	r3, [pc, #608]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002ec2:	4999      	ldr	r1, [pc, #612]	@ (8003128 <HAL_RCC_OscConfig+0x330>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	4b96      	ldr	r3, [pc, #600]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b95      	ldr	r3, [pc, #596]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002ece:	4997      	ldr	r1, [pc, #604]	@ (800312c <HAL_RCC_OscConfig+0x334>)
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d014      	beq.n	8002f06 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff f85e 	bl	8001f9c <HAL_GetTick>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee6:	f7ff f859 	bl	8001f9c <HAL_GetTick>
 8002eea:	0002      	movs	r2, r0
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b64      	cmp	r3, #100	@ 0x64
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e28a      	b.n	800340e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	@ 0x80
 8002efe:	029b      	lsls	r3, r3, #10
 8002f00:	4013      	ands	r3, r2
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0xee>
 8002f04:	e015      	b.n	8002f32 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7ff f849 	bl	8001f9c <HAL_GetTick>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7ff f844 	bl	8001f9c <HAL_GetTick>
 8002f14:	0002      	movs	r2, r0
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	@ 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e275      	b.n	800340e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	4b80      	ldr	r3, [pc, #512]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	@ 0x80
 8002f28:	029b      	lsls	r3, r3, #10
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x118>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <HAL_RCC_OscConfig+0x146>
 8002f3c:	e069      	b.n	8003012 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f3e:	4b79      	ldr	r3, [pc, #484]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	220c      	movs	r2, #12
 8002f44:	4013      	ands	r3, r2
 8002f46:	d00b      	beq.n	8002f60 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f48:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	220c      	movs	r2, #12
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d11c      	bne.n	8002f8e <HAL_RCC_OscConfig+0x196>
 8002f54:	4b73      	ldr	r3, [pc, #460]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	025b      	lsls	r3, r3, #9
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d116      	bne.n	8002f8e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f60:	4b70      	ldr	r3, [pc, #448]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2202      	movs	r2, #2
 8002f66:	4013      	ands	r3, r2
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x17e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e24b      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b6b      	ldr	r3, [pc, #428]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	22f8      	movs	r2, #248	@ 0xf8
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	00da      	lsls	r2, r3, #3
 8002f86:	4b67      	ldr	r3, [pc, #412]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8c:	e041      	b.n	8003012 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d024      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f96:	4b63      	ldr	r3, [pc, #396]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b62      	ldr	r3, [pc, #392]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fffb 	bl	8001f9c <HAL_GetTick>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fe fff6 	bl	8001f9c <HAL_GetTick>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e227      	b.n	800340e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	4b59      	ldr	r3, [pc, #356]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d0f1      	beq.n	8002fac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b56      	ldr	r3, [pc, #344]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	22f8      	movs	r2, #248	@ 0xf8
 8002fce:	4393      	bics	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	00da      	lsls	r2, r3, #3
 8002fd8:	4b52      	ldr	r3, [pc, #328]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e018      	b.n	8003012 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe0:	4b50      	ldr	r3, [pc, #320]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b4f      	ldr	r3, [pc, #316]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	438a      	bics	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe ffd6 	bl	8001f9c <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7fe ffd1 	bl	8001f9c <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e202      	b.n	800340e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003008:	4b46      	ldr	r3, [pc, #280]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2202      	movs	r2, #2
 800300e:	4013      	ands	r3, r2
 8003010:	d1f1      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2208      	movs	r2, #8
 8003018:	4013      	ands	r3, r2
 800301a:	d036      	beq.n	800308a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d019      	beq.n	8003058 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003024:	4b3f      	ldr	r3, [pc, #252]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8003026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003028:	4b3e      	ldr	r3, [pc, #248]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 800302a:	2101      	movs	r1, #1
 800302c:	430a      	orrs	r2, r1
 800302e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003030:	f7fe ffb4 	bl	8001f9c <HAL_GetTick>
 8003034:	0003      	movs	r3, r0
 8003036:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800303a:	f7fe ffaf 	bl	8001f9c <HAL_GetTick>
 800303e:	0002      	movs	r2, r0
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e1e0      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304c:	4b35      	ldr	r3, [pc, #212]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	2202      	movs	r2, #2
 8003052:	4013      	ands	r3, r2
 8003054:	d0f1      	beq.n	800303a <HAL_RCC_OscConfig+0x242>
 8003056:	e018      	b.n	800308a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003058:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 800305a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800305c:	4b31      	ldr	r3, [pc, #196]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 800305e:	2101      	movs	r1, #1
 8003060:	438a      	bics	r2, r1
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003064:	f7fe ff9a 	bl	8001f9c <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800306e:	f7fe ff95 	bl	8001f9c <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1c6      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d1f1      	bne.n	800306e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2204      	movs	r2, #4
 8003090:	4013      	ands	r3, r2
 8003092:	d100      	bne.n	8003096 <HAL_RCC_OscConfig+0x29e>
 8003094:	e0b4      	b.n	8003200 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	201f      	movs	r0, #31
 8003098:	183b      	adds	r3, r7, r0
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b21      	ldr	r3, [pc, #132]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	055b      	lsls	r3, r3, #21
 80030a6:	4013      	ands	r3, r2
 80030a8:	d110      	bne.n	80030cc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 80030ac:	69da      	ldr	r2, [r3, #28]
 80030ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 80030b0:	2180      	movs	r1, #128	@ 0x80
 80030b2:	0549      	lsls	r1, r1, #21
 80030b4:	430a      	orrs	r2, r1
 80030b6:	61da      	str	r2, [r3, #28]
 80030b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	2380      	movs	r3, #128	@ 0x80
 80030be:	055b      	lsls	r3, r3, #21
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030c6:	183b      	adds	r3, r7, r0
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030cc:	4b18      	ldr	r3, [pc, #96]	@ (8003130 <HAL_RCC_OscConfig+0x338>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	2380      	movs	r3, #128	@ 0x80
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4013      	ands	r3, r2
 80030d6:	d11a      	bne.n	800310e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d8:	4b15      	ldr	r3, [pc, #84]	@ (8003130 <HAL_RCC_OscConfig+0x338>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <HAL_RCC_OscConfig+0x338>)
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	0049      	lsls	r1, r1, #1
 80030e2:	430a      	orrs	r2, r1
 80030e4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e6:	f7fe ff59 	bl	8001f9c <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f0:	f7fe ff54 	bl	8001f9c <HAL_GetTick>
 80030f4:	0002      	movs	r2, r0
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e185      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003102:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCC_OscConfig+0x338>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	2380      	movs	r3, #128	@ 0x80
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4013      	ands	r3, r2
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d10e      	bne.n	8003134 <HAL_RCC_OscConfig+0x33c>
 8003116:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	4b02      	ldr	r3, [pc, #8]	@ (8003124 <HAL_RCC_OscConfig+0x32c>)
 800311c:	2101      	movs	r1, #1
 800311e:	430a      	orrs	r2, r1
 8003120:	621a      	str	r2, [r3, #32]
 8003122:	e035      	b.n	8003190 <HAL_RCC_OscConfig+0x398>
 8003124:	40021000 	.word	0x40021000
 8003128:	fffeffff 	.word	0xfffeffff
 800312c:	fffbffff 	.word	0xfffbffff
 8003130:	40007000 	.word	0x40007000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0x35e>
 800313c:	4bb6      	ldr	r3, [pc, #728]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800313e:	6a1a      	ldr	r2, [r3, #32]
 8003140:	4bb5      	ldr	r3, [pc, #724]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003142:	2101      	movs	r1, #1
 8003144:	438a      	bics	r2, r1
 8003146:	621a      	str	r2, [r3, #32]
 8003148:	4bb3      	ldr	r3, [pc, #716]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800314a:	6a1a      	ldr	r2, [r3, #32]
 800314c:	4bb2      	ldr	r3, [pc, #712]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800314e:	2104      	movs	r1, #4
 8003150:	438a      	bics	r2, r1
 8003152:	621a      	str	r2, [r3, #32]
 8003154:	e01c      	b.n	8003190 <HAL_RCC_OscConfig+0x398>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b05      	cmp	r3, #5
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x380>
 800315e:	4bae      	ldr	r3, [pc, #696]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003160:	6a1a      	ldr	r2, [r3, #32]
 8003162:	4bad      	ldr	r3, [pc, #692]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003164:	2104      	movs	r1, #4
 8003166:	430a      	orrs	r2, r1
 8003168:	621a      	str	r2, [r3, #32]
 800316a:	4bab      	ldr	r3, [pc, #684]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800316c:	6a1a      	ldr	r2, [r3, #32]
 800316e:	4baa      	ldr	r3, [pc, #680]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003170:	2101      	movs	r1, #1
 8003172:	430a      	orrs	r2, r1
 8003174:	621a      	str	r2, [r3, #32]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0x398>
 8003178:	4ba7      	ldr	r3, [pc, #668]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	4ba6      	ldr	r3, [pc, #664]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800317e:	2101      	movs	r1, #1
 8003180:	438a      	bics	r2, r1
 8003182:	621a      	str	r2, [r3, #32]
 8003184:	4ba4      	ldr	r3, [pc, #656]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	4ba3      	ldr	r3, [pc, #652]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800318a:	2104      	movs	r1, #4
 800318c:	438a      	bics	r2, r1
 800318e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d014      	beq.n	80031c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003198:	f7fe ff00 	bl	8001f9c <HAL_GetTick>
 800319c:	0003      	movs	r3, r0
 800319e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	e009      	b.n	80031b6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe fefb 	bl	8001f9c <HAL_GetTick>
 80031a6:	0002      	movs	r2, r0
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	4a9b      	ldr	r2, [pc, #620]	@ (800341c <HAL_RCC_OscConfig+0x624>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e12b      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b6:	4b98      	ldr	r3, [pc, #608]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	2202      	movs	r2, #2
 80031bc:	4013      	ands	r3, r2
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
 80031c0:	e013      	b.n	80031ea <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7fe feeb 	bl	8001f9c <HAL_GetTick>
 80031c6:	0003      	movs	r3, r0
 80031c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ca:	e009      	b.n	80031e0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe fee6 	bl	8001f9c <HAL_GetTick>
 80031d0:	0002      	movs	r2, r0
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	4a91      	ldr	r2, [pc, #580]	@ (800341c <HAL_RCC_OscConfig+0x624>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e116      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e0:	4b8d      	ldr	r3, [pc, #564]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	2202      	movs	r2, #2
 80031e6:	4013      	ands	r3, r2
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031ea:	231f      	movs	r3, #31
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d105      	bne.n	8003200 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031f4:	4b88      	ldr	r3, [pc, #544]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	4b87      	ldr	r3, [pc, #540]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80031fa:	4989      	ldr	r1, [pc, #548]	@ (8003420 <HAL_RCC_OscConfig+0x628>)
 80031fc:	400a      	ands	r2, r1
 80031fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2210      	movs	r2, #16
 8003206:	4013      	ands	r3, r2
 8003208:	d063      	beq.n	80032d2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d12a      	bne.n	8003268 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003212:	4b81      	ldr	r3, [pc, #516]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003216:	4b80      	ldr	r3, [pc, #512]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003218:	2104      	movs	r1, #4
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800321e:	4b7e      	ldr	r3, [pc, #504]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003222:	4b7d      	ldr	r3, [pc, #500]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003224:	2101      	movs	r1, #1
 8003226:	430a      	orrs	r2, r1
 8003228:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe feb7 	bl	8001f9c <HAL_GetTick>
 800322e:	0003      	movs	r3, r0
 8003230:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003234:	f7fe feb2 	bl	8001f9c <HAL_GetTick>
 8003238:	0002      	movs	r2, r0
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e0e3      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003246:	4b74      	ldr	r3, [pc, #464]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800324a:	2202      	movs	r2, #2
 800324c:	4013      	ands	r3, r2
 800324e:	d0f1      	beq.n	8003234 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003250:	4b71      	ldr	r3, [pc, #452]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003254:	22f8      	movs	r2, #248	@ 0xf8
 8003256:	4393      	bics	r3, r2
 8003258:	0019      	movs	r1, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	00da      	lsls	r2, r3, #3
 8003260:	4b6d      	ldr	r3, [pc, #436]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003262:	430a      	orrs	r2, r1
 8003264:	635a      	str	r2, [r3, #52]	@ 0x34
 8003266:	e034      	b.n	80032d2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	3305      	adds	r3, #5
 800326e:	d111      	bne.n	8003294 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003270:	4b69      	ldr	r3, [pc, #420]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003274:	4b68      	ldr	r3, [pc, #416]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003276:	2104      	movs	r1, #4
 8003278:	438a      	bics	r2, r1
 800327a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800327c:	4b66      	ldr	r3, [pc, #408]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800327e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003280:	22f8      	movs	r2, #248	@ 0xf8
 8003282:	4393      	bics	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	00da      	lsls	r2, r3, #3
 800328c:	4b62      	ldr	r3, [pc, #392]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800328e:	430a      	orrs	r2, r1
 8003290:	635a      	str	r2, [r3, #52]	@ 0x34
 8003292:	e01e      	b.n	80032d2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003294:	4b60      	ldr	r3, [pc, #384]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003298:	4b5f      	ldr	r3, [pc, #380]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800329a:	2104      	movs	r1, #4
 800329c:	430a      	orrs	r2, r1
 800329e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80032a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80032a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a4:	4b5c      	ldr	r3, [pc, #368]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	438a      	bics	r2, r1
 80032aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ac:	f7fe fe76 	bl	8001f9c <HAL_GetTick>
 80032b0:	0003      	movs	r3, r0
 80032b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80032b6:	f7fe fe71 	bl	8001f9c <HAL_GetTick>
 80032ba:	0002      	movs	r2, r0
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e0a2      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032c8:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80032ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032cc:	2202      	movs	r2, #2
 80032ce:	4013      	ands	r3, r2
 80032d0:	d1f1      	bne.n	80032b6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d100      	bne.n	80032dc <HAL_RCC_OscConfig+0x4e4>
 80032da:	e097      	b.n	800340c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	220c      	movs	r2, #12
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d100      	bne.n	80032ea <HAL_RCC_OscConfig+0x4f2>
 80032e8:	e06b      	b.n	80033c2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d14c      	bne.n	800338c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f2:	4b49      	ldr	r3, [pc, #292]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	4b48      	ldr	r3, [pc, #288]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80032f8:	494a      	ldr	r1, [pc, #296]	@ (8003424 <HAL_RCC_OscConfig+0x62c>)
 80032fa:	400a      	ands	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fe4d 	bl	8001f9c <HAL_GetTick>
 8003302:	0003      	movs	r3, r0
 8003304:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe fe48 	bl	8001f9c <HAL_GetTick>
 800330c:	0002      	movs	r2, r0
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e079      	b.n	800340e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	4b3f      	ldr	r3, [pc, #252]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	049b      	lsls	r3, r3, #18
 8003322:	4013      	ands	r3, r2
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003326:	4b3c      	ldr	r3, [pc, #240]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332a:	220f      	movs	r2, #15
 800332c:	4393      	bics	r3, r2
 800332e:	0019      	movs	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003334:	4b38      	ldr	r3, [pc, #224]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003336:	430a      	orrs	r2, r1
 8003338:	62da      	str	r2, [r3, #44]	@ 0x2c
 800333a:	4b37      	ldr	r3, [pc, #220]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a3a      	ldr	r2, [pc, #232]	@ (8003428 <HAL_RCC_OscConfig+0x630>)
 8003340:	4013      	ands	r3, r2
 8003342:	0019      	movs	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	431a      	orrs	r2, r3
 800334e:	4b32      	ldr	r3, [pc, #200]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003354:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800335a:	2180      	movs	r1, #128	@ 0x80
 800335c:	0449      	lsls	r1, r1, #17
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fe1b 	bl	8001f9c <HAL_GetTick>
 8003366:	0003      	movs	r3, r0
 8003368:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fe fe16 	bl	8001f9c <HAL_GetTick>
 8003370:	0002      	movs	r2, r0
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e047      	b.n	800340e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	@ 0x80
 8003384:	049b      	lsls	r3, r3, #18
 8003386:	4013      	ands	r3, r2
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x574>
 800338a:	e03f      	b.n	800340c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b21      	ldr	r3, [pc, #132]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 8003392:	4924      	ldr	r1, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x62c>)
 8003394:	400a      	ands	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7fe fe00 	bl	8001f9c <HAL_GetTick>
 800339c:	0003      	movs	r3, r0
 800339e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe fdfb 	bl	8001f9c <HAL_GetTick>
 80033a6:	0002      	movs	r2, r0
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e02c      	b.n	800340e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b4:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2380      	movs	r3, #128	@ 0x80
 80033ba:	049b      	lsls	r3, r3, #18
 80033bc:	4013      	ands	r3, r2
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x5aa>
 80033c0:	e024      	b.n	800340c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e01f      	b.n	800340e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80033ce:	4b12      	ldr	r3, [pc, #72]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <HAL_RCC_OscConfig+0x620>)
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	2380      	movs	r3, #128	@ 0x80
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	401a      	ands	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d10e      	bne.n	8003408 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	220f      	movs	r2, #15
 80033ee:	401a      	ands	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	23f0      	movs	r3, #240	@ 0xf0
 80033fc:	039b      	lsls	r3, r3, #14
 80033fe:	401a      	ands	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b008      	add	sp, #32
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	40021000 	.word	0x40021000
 800341c:	00001388 	.word	0x00001388
 8003420:	efffffff 	.word	0xefffffff
 8003424:	feffffff 	.word	0xfeffffff
 8003428:	ffc2ffff 	.word	0xffc2ffff

0800342c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d101      	bne.n	8003440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0b3      	b.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003440:	4b5b      	ldr	r3, [pc, #364]	@ (80035b0 <HAL_RCC_ClockConfig+0x184>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d911      	bls.n	8003472 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b58      	ldr	r3, [pc, #352]	@ (80035b0 <HAL_RCC_ClockConfig+0x184>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2201      	movs	r2, #1
 8003454:	4393      	bics	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	4b55      	ldr	r3, [pc, #340]	@ (80035b0 <HAL_RCC_ClockConfig+0x184>)
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003460:	4b53      	ldr	r3, [pc, #332]	@ (80035b0 <HAL_RCC_ClockConfig+0x184>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	4013      	ands	r3, r2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d001      	beq.n	8003472 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e09a      	b.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2202      	movs	r2, #2
 8003478:	4013      	ands	r3, r2
 800347a:	d015      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2204      	movs	r2, #4
 8003482:	4013      	ands	r3, r2
 8003484:	d006      	beq.n	8003494 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003486:	4b4b      	ldr	r3, [pc, #300]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 800348c:	21e0      	movs	r1, #224	@ 0xe0
 800348e:	00c9      	lsls	r1, r1, #3
 8003490:	430a      	orrs	r2, r1
 8003492:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003494:	4b47      	ldr	r3, [pc, #284]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	22f0      	movs	r2, #240	@ 0xf0
 800349a:	4393      	bics	r3, r2
 800349c:	0019      	movs	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	4b44      	ldr	r3, [pc, #272]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2201      	movs	r2, #1
 80034ae:	4013      	ands	r3, r2
 80034b0:	d040      	beq.n	8003534 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d107      	bne.n	80034ca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b3e      	ldr	r3, [pc, #248]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	029b      	lsls	r3, r3, #10
 80034c2:	4013      	ands	r3, r2
 80034c4:	d114      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e06e      	b.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d107      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b38      	ldr	r3, [pc, #224]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	049b      	lsls	r3, r3, #18
 80034da:	4013      	ands	r3, r2
 80034dc:	d108      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e062      	b.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e2:	4b34      	ldr	r3, [pc, #208]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2202      	movs	r2, #2
 80034e8:	4013      	ands	r3, r2
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e05b      	b.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f0:	4b30      	ldr	r3, [pc, #192]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4393      	bics	r3, r2
 80034f8:	0019      	movs	r1, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	4b2d      	ldr	r3, [pc, #180]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fe fd4a 	bl	8001f9c <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350c:	e009      	b.n	8003522 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350e:	f7fe fd45 	bl	8001f9c <HAL_GetTick>
 8003512:	0002      	movs	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <HAL_RCC_ClockConfig+0x18c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e042      	b.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b24      	ldr	r3, [pc, #144]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	220c      	movs	r2, #12
 8003528:	401a      	ands	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1ec      	bne.n	800350e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b1e      	ldr	r3, [pc, #120]	@ (80035b0 <HAL_RCC_ClockConfig+0x184>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2201      	movs	r2, #1
 800353a:	4013      	ands	r3, r2
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d211      	bcs.n	8003566 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <HAL_RCC_ClockConfig+0x184>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	4393      	bics	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <HAL_RCC_ClockConfig+0x184>)
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003554:	4b16      	ldr	r3, [pc, #88]	@ (80035b0 <HAL_RCC_ClockConfig+0x184>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2201      	movs	r2, #1
 800355a:	4013      	ands	r3, r2
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d001      	beq.n	8003566 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e020      	b.n	80035a8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2204      	movs	r2, #4
 800356c:	4013      	ands	r3, r2
 800356e:	d009      	beq.n	8003584 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003570:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a11      	ldr	r2, [pc, #68]	@ (80035bc <HAL_RCC_ClockConfig+0x190>)
 8003576:	4013      	ands	r3, r2
 8003578:	0019      	movs	r1, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	4b0d      	ldr	r3, [pc, #52]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003584:	f000 f820 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8003588:	0001      	movs	r1, r0
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <HAL_RCC_ClockConfig+0x188>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	220f      	movs	r2, #15
 8003592:	4013      	ands	r3, r2
 8003594:	4a0a      	ldr	r2, [pc, #40]	@ (80035c0 <HAL_RCC_ClockConfig+0x194>)
 8003596:	5cd3      	ldrb	r3, [r2, r3]
 8003598:	000a      	movs	r2, r1
 800359a:	40da      	lsrs	r2, r3
 800359c:	4b09      	ldr	r3, [pc, #36]	@ (80035c4 <HAL_RCC_ClockConfig+0x198>)
 800359e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7fe fcb5 	bl	8001f10 <HAL_InitTick>
  
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b004      	add	sp, #16
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	00001388 	.word	0x00001388
 80035bc:	fffff8ff 	.word	0xfffff8ff
 80035c0:	08004ea4 	.word	0x08004ea4
 80035c4:	20000000 	.word	0x20000000

080035c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80035e2:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	220c      	movs	r2, #12
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x30>
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x36>
 80035f6:	e02c      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003668 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035fa:	613b      	str	r3, [r7, #16]
      break;
 80035fc:	e02c      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	0c9b      	lsrs	r3, r3, #18
 8003602:	220f      	movs	r2, #15
 8003604:	4013      	ands	r3, r2
 8003606:	4a19      	ldr	r2, [pc, #100]	@ (800366c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003608:	5cd3      	ldrb	r3, [r2, r3]
 800360a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800360c:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x9c>)
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	220f      	movs	r2, #15
 8003612:	4013      	ands	r3, r2
 8003614:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003616:	5cd3      	ldrb	r3, [r2, r3]
 8003618:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	2380      	movs	r3, #128	@ 0x80
 800361e:	025b      	lsls	r3, r3, #9
 8003620:	4013      	ands	r3, r2
 8003622:	d009      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	4810      	ldr	r0, [pc, #64]	@ (8003668 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003628:	f7fc fd6e 	bl	8000108 <__udivsi3>
 800362c:	0003      	movs	r3, r0
 800362e:	001a      	movs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4353      	muls	r3, r2
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e009      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	000a      	movs	r2, r1
 800363c:	0152      	lsls	r2, r2, #5
 800363e:	1a52      	subs	r2, r2, r1
 8003640:	0193      	lsls	r3, r2, #6
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	185b      	adds	r3, r3, r1
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	613b      	str	r3, [r7, #16]
      break;
 8003650:	e002      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003652:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003654:	613b      	str	r3, [r7, #16]
      break;
 8003656:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003658:	693b      	ldr	r3, [r7, #16]
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b006      	add	sp, #24
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	40021000 	.word	0x40021000
 8003668:	007a1200 	.word	0x007a1200
 800366c:	08004ebc 	.word	0x08004ebc
 8003670:	08004ecc 	.word	0x08004ecc

08003674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b02      	ldr	r3, [pc, #8]	@ (8003684 <HAL_RCC_GetHCLKFreq+0x10>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	0018      	movs	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800368c:	f7ff fff2 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003690:	0001      	movs	r1, r0
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	2207      	movs	r2, #7
 800369a:	4013      	ands	r3, r2
 800369c:	4a04      	ldr	r2, [pc, #16]	@ (80036b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800369e:	5cd3      	ldrb	r3, [r2, r3]
 80036a0:	40d9      	lsrs	r1, r3
 80036a2:	000b      	movs	r3, r1
}    
 80036a4:	0018      	movs	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			@ (mov r8, r8)
 80036ac:	40021000 	.word	0x40021000
 80036b0:	08004eb4 	.word	0x08004eb4

080036b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e042      	b.n	800374c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	223d      	movs	r2, #61	@ 0x3d
 80036ca:	5c9b      	ldrb	r3, [r3, r2]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	223c      	movs	r2, #60	@ 0x3c
 80036d6:	2100      	movs	r1, #0
 80036d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fe fadb 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	223d      	movs	r2, #61	@ 0x3d
 80036e6:	2102      	movs	r1, #2
 80036e8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	0019      	movs	r1, r3
 80036f4:	0010      	movs	r0, r2
 80036f6:	f000 fc33 	bl	8003f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2246      	movs	r2, #70	@ 0x46
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	223e      	movs	r2, #62	@ 0x3e
 8003706:	2101      	movs	r1, #1
 8003708:	5499      	strb	r1, [r3, r2]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	223f      	movs	r2, #63	@ 0x3f
 800370e:	2101      	movs	r1, #1
 8003710:	5499      	strb	r1, [r3, r2]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2240      	movs	r2, #64	@ 0x40
 8003716:	2101      	movs	r1, #1
 8003718:	5499      	strb	r1, [r3, r2]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2241      	movs	r2, #65	@ 0x41
 800371e:	2101      	movs	r1, #1
 8003720:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2242      	movs	r2, #66	@ 0x42
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2243      	movs	r2, #67	@ 0x43
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2244      	movs	r2, #68	@ 0x44
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2245      	movs	r2, #69	@ 0x45
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	223d      	movs	r2, #61	@ 0x3d
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	223d      	movs	r2, #61	@ 0x3d
 8003760:	5c9b      	ldrb	r3, [r3, r2]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d001      	beq.n	800376c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e035      	b.n	80037d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	223d      	movs	r2, #61	@ 0x3d
 8003770:	2102      	movs	r1, #2
 8003772:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a15      	ldr	r2, [pc, #84]	@ (80037e0 <HAL_TIM_Base_Start_IT+0x8c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_TIM_Base_Start_IT+0x4e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a14      	ldr	r2, [pc, #80]	@ (80037e4 <HAL_TIM_Base_Start_IT+0x90>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIM_Base_Start_IT+0x4e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a12      	ldr	r2, [pc, #72]	@ (80037e8 <HAL_TIM_Base_Start_IT+0x94>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d111      	bne.n	80037c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2207      	movs	r2, #7
 80037aa:	4013      	ands	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b06      	cmp	r3, #6
 80037b2:	d010      	beq.n	80037d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	e007      	b.n	80037d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2101      	movs	r1, #1
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40012c00 	.word	0x40012c00
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40014000 	.word	0x40014000

080037ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e042      	b.n	8003884 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223d      	movs	r2, #61	@ 0x3d
 8003802:	5c9b      	ldrb	r3, [r3, r2]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d107      	bne.n	800381a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	223c      	movs	r2, #60	@ 0x3c
 800380e:	2100      	movs	r1, #0
 8003810:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 f839 	bl	800388c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	223d      	movs	r2, #61	@ 0x3d
 800381e:	2102      	movs	r1, #2
 8003820:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3304      	adds	r3, #4
 800382a:	0019      	movs	r1, r3
 800382c:	0010      	movs	r0, r2
 800382e:	f000 fb97 	bl	8003f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2246      	movs	r2, #70	@ 0x46
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	223e      	movs	r2, #62	@ 0x3e
 800383e:	2101      	movs	r1, #1
 8003840:	5499      	strb	r1, [r3, r2]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	223f      	movs	r2, #63	@ 0x3f
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2240      	movs	r2, #64	@ 0x40
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2241      	movs	r2, #65	@ 0x41
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2242      	movs	r2, #66	@ 0x42
 800385e:	2101      	movs	r1, #1
 8003860:	5499      	strb	r1, [r3, r2]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2243      	movs	r2, #67	@ 0x43
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2244      	movs	r2, #68	@ 0x44
 800386e:	2101      	movs	r1, #1
 8003870:	5499      	strb	r1, [r3, r2]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2245      	movs	r2, #69	@ 0x45
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	223d      	movs	r2, #61	@ 0x3d
 800387e:	2101      	movs	r1, #1
 8003880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003894:	46c0      	nop			@ (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d108      	bne.n	80038be <HAL_TIM_PWM_Start+0x22>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	223e      	movs	r2, #62	@ 0x3e
 80038b0:	5c9b      	ldrb	r3, [r3, r2]
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	1e5a      	subs	r2, r3, #1
 80038b8:	4193      	sbcs	r3, r2
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	e01f      	b.n	80038fe <HAL_TIM_PWM_Start+0x62>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d108      	bne.n	80038d6 <HAL_TIM_PWM_Start+0x3a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	223f      	movs	r2, #63	@ 0x3f
 80038c8:	5c9b      	ldrb	r3, [r3, r2]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	1e5a      	subs	r2, r3, #1
 80038d0:	4193      	sbcs	r3, r2
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e013      	b.n	80038fe <HAL_TIM_PWM_Start+0x62>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d108      	bne.n	80038ee <HAL_TIM_PWM_Start+0x52>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2240      	movs	r2, #64	@ 0x40
 80038e0:	5c9b      	ldrb	r3, [r3, r2]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	1e5a      	subs	r2, r3, #1
 80038e8:	4193      	sbcs	r3, r2
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	e007      	b.n	80038fe <HAL_TIM_PWM_Start+0x62>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2241      	movs	r2, #65	@ 0x41
 80038f2:	5c9b      	ldrb	r3, [r3, r2]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	1e5a      	subs	r2, r3, #1
 80038fa:	4193      	sbcs	r3, r2
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06e      	b.n	80039e4 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <HAL_TIM_PWM_Start+0x7a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	223e      	movs	r2, #62	@ 0x3e
 8003910:	2102      	movs	r1, #2
 8003912:	5499      	strb	r1, [r3, r2]
 8003914:	e013      	b.n	800393e <HAL_TIM_PWM_Start+0xa2>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b04      	cmp	r3, #4
 800391a:	d104      	bne.n	8003926 <HAL_TIM_PWM_Start+0x8a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	223f      	movs	r2, #63	@ 0x3f
 8003920:	2102      	movs	r1, #2
 8003922:	5499      	strb	r1, [r3, r2]
 8003924:	e00b      	b.n	800393e <HAL_TIM_PWM_Start+0xa2>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d104      	bne.n	8003936 <HAL_TIM_PWM_Start+0x9a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2240      	movs	r2, #64	@ 0x40
 8003930:	2102      	movs	r1, #2
 8003932:	5499      	strb	r1, [r3, r2]
 8003934:	e003      	b.n	800393e <HAL_TIM_PWM_Start+0xa2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2241      	movs	r2, #65	@ 0x41
 800393a:	2102      	movs	r1, #2
 800393c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6839      	ldr	r1, [r7, #0]
 8003944:	2201      	movs	r2, #1
 8003946:	0018      	movs	r0, r3
 8003948:	f000 fe24 	bl	8004594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a26      	ldr	r2, [pc, #152]	@ (80039ec <HAL_TIM_PWM_Start+0x150>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_TIM_PWM_Start+0xd8>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a25      	ldr	r2, [pc, #148]	@ (80039f0 <HAL_TIM_PWM_Start+0x154>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_TIM_PWM_Start+0xd8>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a23      	ldr	r2, [pc, #140]	@ (80039f4 <HAL_TIM_PWM_Start+0x158>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIM_PWM_Start+0xd8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a22      	ldr	r2, [pc, #136]	@ (80039f8 <HAL_TIM_PWM_Start+0x15c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d101      	bne.n	8003978 <HAL_TIM_PWM_Start+0xdc>
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_TIM_PWM_Start+0xde>
 8003978:	2300      	movs	r3, #0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2180      	movs	r1, #128	@ 0x80
 800398a:	0209      	lsls	r1, r1, #8
 800398c:	430a      	orrs	r2, r1
 800398e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a15      	ldr	r2, [pc, #84]	@ (80039ec <HAL_TIM_PWM_Start+0x150>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_TIM_PWM_Start+0x112>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a17      	ldr	r2, [pc, #92]	@ (80039fc <HAL_TIM_PWM_Start+0x160>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_TIM_PWM_Start+0x112>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a11      	ldr	r2, [pc, #68]	@ (80039f0 <HAL_TIM_PWM_Start+0x154>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d111      	bne.n	80039d2 <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2207      	movs	r2, #7
 80039b6:	4013      	ands	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2b06      	cmp	r3, #6
 80039be:	d010      	beq.n	80039e2 <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2101      	movs	r1, #1
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d0:	e007      	b.n	80039e2 <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b004      	add	sp, #16
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40012c00 	.word	0x40012c00
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40014400 	.word	0x40014400
 80039f8:	40014800 	.word	0x40014800
 80039fc:	40000400 	.word	0x40000400

08003a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d021      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2202      	movs	r2, #2
 8003a24:	4013      	ands	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	4252      	negs	r2, r2
 8003a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	4013      	ands	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	0018      	movs	r0, r3
 8003a48:	f000 fa72 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e007      	b.n	8003a5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 fa65 	bl	8003f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f000 fa71 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2204      	movs	r2, #4
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d022      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	4013      	ands	r3, r2
 8003a72:	d01e      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2205      	movs	r2, #5
 8003a7a:	4252      	negs	r2, r2
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2202      	movs	r2, #2
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	23c0      	movs	r3, #192	@ 0xc0
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0018      	movs	r0, r3
 8003a96:	f000 fa4b 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003a9a:	e007      	b.n	8003aac <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 fa3e 	bl	8003f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 fa4a 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d021      	beq.n	8003afe <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2208      	movs	r2, #8
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2209      	movs	r2, #9
 8003ac8:	4252      	negs	r2, r2
 8003aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2204      	movs	r2, #4
 8003ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	4013      	ands	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f000 fa25 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003ae6:	e007      	b.n	8003af8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 fa18 	bl	8003f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 fa24 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2210      	movs	r2, #16
 8003b02:	4013      	ands	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2210      	movs	r2, #16
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d01e      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2211      	movs	r2, #17
 8003b14:	4252      	negs	r2, r2
 8003b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2208      	movs	r2, #8
 8003b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	23c0      	movs	r3, #192	@ 0xc0
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 f9fe 	bl	8003f30 <HAL_TIM_IC_CaptureCallback>
 8003b34:	e007      	b.n	8003b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f9f1 	bl	8003f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f000 f9fd 	bl	8003f40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	d00c      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2201      	movs	r2, #1
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d008      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2202      	movs	r2, #2
 8003b62:	4252      	negs	r2, r2
 8003b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 f9d1 	bl	8003f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	4013      	ands	r3, r2
 8003b74:	d00c      	beq.n	8003b90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2280      	movs	r2, #128	@ 0x80
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d008      	beq.n	8003b90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2281      	movs	r2, #129	@ 0x81
 8003b84:	4252      	negs	r2, r2
 8003b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 fd86 	bl	800469c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2240      	movs	r2, #64	@ 0x40
 8003b94:	4013      	ands	r3, r2
 8003b96:	d00c      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2240      	movs	r2, #64	@ 0x40
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	d008      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2241      	movs	r2, #65	@ 0x41
 8003ba6:	4252      	negs	r2, r2
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f9cf 	bl	8003f50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d008      	beq.n	8003bd4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2221      	movs	r2, #33	@ 0x21
 8003bc8:	4252      	negs	r2, r2
 8003bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f000 fd5c 	bl	800468c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd4:	46c0      	nop			@ (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b004      	add	sp, #16
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2317      	movs	r3, #23
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	223c      	movs	r2, #60	@ 0x3c
 8003bf4:	5c9b      	ldrb	r3, [r3, r2]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_TIM_PWM_ConfigChannel+0x22>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e0ad      	b.n	8003d5a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	223c      	movs	r2, #60	@ 0x3c
 8003c02:	2101      	movs	r1, #1
 8003c04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	d100      	bne.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003c0c:	e076      	b.n	8003cfc <HAL_TIM_PWM_ConfigChannel+0x120>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d900      	bls.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003c14:	e095      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d04e      	beq.n	8003cba <HAL_TIM_PWM_ConfigChannel+0xde>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d900      	bls.n	8003c24 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003c22:	e08e      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d021      	beq.n	8003c74 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003c30:	e087      	b.n	8003d42 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	0011      	movs	r1, r2
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f000 fa14 	bl	8004068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699a      	ldr	r2, [r3, #24]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2108      	movs	r1, #8
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2104      	movs	r1, #4
 8003c5c:	438a      	bics	r2, r1
 8003c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6999      	ldr	r1, [r3, #24]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	619a      	str	r2, [r3, #24]
      break;
 8003c72:	e06b      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f000 fa7b 	bl	8004178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699a      	ldr	r2, [r3, #24]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2180      	movs	r1, #128	@ 0x80
 8003c8e:	0109      	lsls	r1, r1, #4
 8003c90:	430a      	orrs	r2, r1
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4931      	ldr	r1, [pc, #196]	@ (8003d64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003ca0:	400a      	ands	r2, r1
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	619a      	str	r2, [r3, #24]
      break;
 8003cb8:	e048      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f000 fadc 	bl	8004280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2108      	movs	r1, #8
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	438a      	bics	r2, r1
 8003ce6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69d9      	ldr	r1, [r3, #28]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	61da      	str	r2, [r3, #28]
      break;
 8003cfa:	e027      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	0011      	movs	r1, r2
 8003d04:	0018      	movs	r0, r3
 8003d06:	f000 fb41 	bl	800438c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2180      	movs	r1, #128	@ 0x80
 8003d16:	0109      	lsls	r1, r1, #4
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	490f      	ldr	r1, [pc, #60]	@ (8003d64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69d9      	ldr	r1, [r3, #28]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	021a      	lsls	r2, r3, #8
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	61da      	str	r2, [r3, #28]
      break;
 8003d40:	e004      	b.n	8003d4c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003d42:	2317      	movs	r3, #23
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
      break;
 8003d4a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	223c      	movs	r2, #60	@ 0x3c
 8003d50:	2100      	movs	r1, #0
 8003d52:	5499      	strb	r1, [r3, r2]

  return status;
 8003d54:	2317      	movs	r3, #23
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	781b      	ldrb	r3, [r3, #0]
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	fffffbff 	.word	0xfffffbff

08003d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	230f      	movs	r3, #15
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	2200      	movs	r2, #0
 8003d78:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	223c      	movs	r2, #60	@ 0x3c
 8003d7e:	5c9b      	ldrb	r3, [r3, r2]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <HAL_TIM_ConfigClockSource+0x20>
 8003d84:	2302      	movs	r3, #2
 8003d86:	e0bc      	b.n	8003f02 <HAL_TIM_ConfigClockSource+0x19a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	223c      	movs	r2, #60	@ 0x3c
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	223d      	movs	r2, #61	@ 0x3d
 8003d94:	2102      	movs	r1, #2
 8003d96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2277      	movs	r2, #119	@ 0x77
 8003da4:	4393      	bics	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4a58      	ldr	r2, [pc, #352]	@ (8003f0c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2280      	movs	r2, #128	@ 0x80
 8003dbe:	0192      	lsls	r2, r2, #6
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d040      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0xde>
 8003dc4:	2280      	movs	r2, #128	@ 0x80
 8003dc6:	0192      	lsls	r2, r2, #6
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d900      	bls.n	8003dce <HAL_TIM_ConfigClockSource+0x66>
 8003dcc:	e088      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003dce:	2280      	movs	r2, #128	@ 0x80
 8003dd0:	0152      	lsls	r2, r2, #5
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d100      	bne.n	8003dd8 <HAL_TIM_ConfigClockSource+0x70>
 8003dd6:	e088      	b.n	8003eea <HAL_TIM_ConfigClockSource+0x182>
 8003dd8:	2280      	movs	r2, #128	@ 0x80
 8003dda:	0152      	lsls	r2, r2, #5
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d900      	bls.n	8003de2 <HAL_TIM_ConfigClockSource+0x7a>
 8003de0:	e07e      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003de2:	2b70      	cmp	r3, #112	@ 0x70
 8003de4:	d018      	beq.n	8003e18 <HAL_TIM_ConfigClockSource+0xb0>
 8003de6:	d900      	bls.n	8003dea <HAL_TIM_ConfigClockSource+0x82>
 8003de8:	e07a      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003dea:	2b60      	cmp	r3, #96	@ 0x60
 8003dec:	d04f      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x126>
 8003dee:	d900      	bls.n	8003df2 <HAL_TIM_ConfigClockSource+0x8a>
 8003df0:	e076      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003df2:	2b50      	cmp	r3, #80	@ 0x50
 8003df4:	d03b      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x106>
 8003df6:	d900      	bls.n	8003dfa <HAL_TIM_ConfigClockSource+0x92>
 8003df8:	e072      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d057      	beq.n	8003eae <HAL_TIM_ConfigClockSource+0x146>
 8003dfe:	d900      	bls.n	8003e02 <HAL_TIM_ConfigClockSource+0x9a>
 8003e00:	e06e      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003e02:	2b30      	cmp	r3, #48	@ 0x30
 8003e04:	d063      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x166>
 8003e06:	d86b      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003e08:	2b20      	cmp	r3, #32
 8003e0a:	d060      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x166>
 8003e0c:	d868      	bhi.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d05d      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x166>
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d05b      	beq.n	8003ece <HAL_TIM_ConfigClockSource+0x166>
 8003e16:	e063      	b.n	8003ee0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e28:	f000 fb94 	bl	8004554 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2277      	movs	r2, #119	@ 0x77
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]
      break;
 8003e44:	e052      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e56:	f000 fb7d 	bl	8004554 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2180      	movs	r1, #128	@ 0x80
 8003e66:	01c9      	lsls	r1, r1, #7
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
      break;
 8003e6c:	e03e      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	f000 faf0 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2150      	movs	r1, #80	@ 0x50
 8003e86:	0018      	movs	r0, r3
 8003e88:	f000 fb4a 	bl	8004520 <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e02e      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	f000 fb0e 	bl	80044bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2160      	movs	r1, #96	@ 0x60
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 fb3a 	bl	8004520 <TIM_ITRx_SetConfig>
      break;
 8003eac:	e01e      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eba:	001a      	movs	r2, r3
 8003ebc:	f000 fad0 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2140      	movs	r1, #64	@ 0x40
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f000 fb2a 	bl	8004520 <TIM_ITRx_SetConfig>
      break;
 8003ecc:	e00e      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	0010      	movs	r0, r2
 8003eda:	f000 fb21 	bl	8004520 <TIM_ITRx_SetConfig>
      break;
 8003ede:	e005      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ee0:	230f      	movs	r3, #15
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	701a      	strb	r2, [r3, #0]
      break;
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003eea:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	223d      	movs	r2, #61	@ 0x3d
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	223c      	movs	r2, #60	@ 0x3c
 8003ef8:	2100      	movs	r1, #0
 8003efa:	5499      	strb	r1, [r3, r2]

  return status;
 8003efc:	230f      	movs	r3, #15
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	781b      	ldrb	r3, [r3, #0]
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	ffff00ff 	.word	0xffff00ff

08003f10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f18:	46c0      	nop			@ (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f28:	46c0      	nop			@ (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f38:	46c0      	nop			@ (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f48:	46c0      	nop			@ (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b002      	add	sp, #8
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a36      	ldr	r2, [pc, #216]	@ (800404c <TIM_Base_SetConfig+0xec>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x20>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a35      	ldr	r2, [pc, #212]	@ (8004050 <TIM_Base_SetConfig+0xf0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d108      	bne.n	8003f92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2270      	movs	r2, #112	@ 0x70
 8003f84:	4393      	bics	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2d      	ldr	r2, [pc, #180]	@ (800404c <TIM_Base_SetConfig+0xec>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004050 <TIM_Base_SetConfig+0xf0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00f      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <TIM_Base_SetConfig+0xf4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00b      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2a      	ldr	r2, [pc, #168]	@ (8004058 <TIM_Base_SetConfig+0xf8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d007      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a29      	ldr	r2, [pc, #164]	@ (800405c <TIM_Base_SetConfig+0xfc>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d003      	beq.n	8003fc2 <TIM_Base_SetConfig+0x62>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a28      	ldr	r2, [pc, #160]	@ (8004060 <TIM_Base_SetConfig+0x100>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d108      	bne.n	8003fd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	@ (8004064 <TIM_Base_SetConfig+0x104>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2280      	movs	r2, #128	@ 0x80
 8003fd8:	4393      	bics	r3, r2
 8003fda:	001a      	movs	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a13      	ldr	r2, [pc, #76]	@ (800404c <TIM_Base_SetConfig+0xec>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00b      	beq.n	800401a <TIM_Base_SetConfig+0xba>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a14      	ldr	r2, [pc, #80]	@ (8004058 <TIM_Base_SetConfig+0xf8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d007      	beq.n	800401a <TIM_Base_SetConfig+0xba>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a13      	ldr	r2, [pc, #76]	@ (800405c <TIM_Base_SetConfig+0xfc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d003      	beq.n	800401a <TIM_Base_SetConfig+0xba>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a12      	ldr	r2, [pc, #72]	@ (8004060 <TIM_Base_SetConfig+0x100>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d103      	bne.n	8004022 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691a      	ldr	r2, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2201      	movs	r2, #1
 800402e:	4013      	ands	r3, r2
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2201      	movs	r2, #1
 800403a:	4393      	bics	r3, r2
 800403c:	001a      	movs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]
  }
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b004      	add	sp, #16
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40000400 	.word	0x40000400
 8004054:	40002000 	.word	0x40002000
 8004058:	40014000 	.word	0x40014000
 800405c:	40014400 	.word	0x40014400
 8004060:	40014800 	.word	0x40014800
 8004064:	fffffcff 	.word	0xfffffcff

08004068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	2201      	movs	r2, #1
 800407e:	4393      	bics	r3, r2
 8004080:	001a      	movs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2270      	movs	r2, #112	@ 0x70
 8004096:	4393      	bics	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2203      	movs	r2, #3
 800409e:	4393      	bics	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2202      	movs	r2, #2
 80040b0:	4393      	bics	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a27      	ldr	r2, [pc, #156]	@ (8004160 <TIM_OC1_SetConfig+0xf8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d00b      	beq.n	80040de <TIM_OC1_SetConfig+0x76>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a26      	ldr	r2, [pc, #152]	@ (8004164 <TIM_OC1_SetConfig+0xfc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d007      	beq.n	80040de <TIM_OC1_SetConfig+0x76>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a25      	ldr	r2, [pc, #148]	@ (8004168 <TIM_OC1_SetConfig+0x100>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d003      	beq.n	80040de <TIM_OC1_SetConfig+0x76>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a24      	ldr	r2, [pc, #144]	@ (800416c <TIM_OC1_SetConfig+0x104>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10c      	bne.n	80040f8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2208      	movs	r2, #8
 80040e2:	4393      	bics	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2204      	movs	r2, #4
 80040f4:	4393      	bics	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a19      	ldr	r2, [pc, #100]	@ (8004160 <TIM_OC1_SetConfig+0xf8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00b      	beq.n	8004118 <TIM_OC1_SetConfig+0xb0>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a18      	ldr	r2, [pc, #96]	@ (8004164 <TIM_OC1_SetConfig+0xfc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d007      	beq.n	8004118 <TIM_OC1_SetConfig+0xb0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a17      	ldr	r2, [pc, #92]	@ (8004168 <TIM_OC1_SetConfig+0x100>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC1_SetConfig+0xb0>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a16      	ldr	r2, [pc, #88]	@ (800416c <TIM_OC1_SetConfig+0x104>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d111      	bne.n	800413c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4a15      	ldr	r2, [pc, #84]	@ (8004170 <TIM_OC1_SetConfig+0x108>)
 800411c:	4013      	ands	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <TIM_OC1_SetConfig+0x10c>)
 8004124:	4013      	ands	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b006      	add	sp, #24
 800415c:	bd80      	pop	{r7, pc}
 800415e:	46c0      	nop			@ (mov r8, r8)
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40014000 	.word	0x40014000
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800
 8004170:	fffffeff 	.word	0xfffffeff
 8004174:	fffffdff 	.word	0xfffffdff

08004178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	2210      	movs	r2, #16
 800418e:	4393      	bics	r3, r2
 8004190:	001a      	movs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004260 <TIM_OC2_SetConfig+0xe8>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004264 <TIM_OC2_SetConfig+0xec>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2220      	movs	r2, #32
 80041c2:	4393      	bics	r3, r2
 80041c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a24      	ldr	r2, [pc, #144]	@ (8004268 <TIM_OC2_SetConfig+0xf0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d10d      	bne.n	80041f6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2280      	movs	r2, #128	@ 0x80
 80041de:	4393      	bics	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2240      	movs	r2, #64	@ 0x40
 80041f2:	4393      	bics	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004268 <TIM_OC2_SetConfig+0xf0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d00b      	beq.n	8004216 <TIM_OC2_SetConfig+0x9e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1a      	ldr	r2, [pc, #104]	@ (800426c <TIM_OC2_SetConfig+0xf4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d007      	beq.n	8004216 <TIM_OC2_SetConfig+0x9e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a19      	ldr	r2, [pc, #100]	@ (8004270 <TIM_OC2_SetConfig+0xf8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d003      	beq.n	8004216 <TIM_OC2_SetConfig+0x9e>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a18      	ldr	r2, [pc, #96]	@ (8004274 <TIM_OC2_SetConfig+0xfc>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d113      	bne.n	800423e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4a17      	ldr	r2, [pc, #92]	@ (8004278 <TIM_OC2_SetConfig+0x100>)
 800421a:	4013      	ands	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4a16      	ldr	r2, [pc, #88]	@ (800427c <TIM_OC2_SetConfig+0x104>)
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4313      	orrs	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	46c0      	nop			@ (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b006      	add	sp, #24
 800425e:	bd80      	pop	{r7, pc}
 8004260:	ffff8fff 	.word	0xffff8fff
 8004264:	fffffcff 	.word	0xfffffcff
 8004268:	40012c00 	.word	0x40012c00
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800
 8004278:	fffffbff 	.word	0xfffffbff
 800427c:	fffff7ff 	.word	0xfffff7ff

08004280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4a33      	ldr	r2, [pc, #204]	@ (8004364 <TIM_OC3_SetConfig+0xe4>)
 8004296:	401a      	ands	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2270      	movs	r2, #112	@ 0x70
 80042ac:	4393      	bics	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2203      	movs	r2, #3
 80042b4:	4393      	bics	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	4a28      	ldr	r2, [pc, #160]	@ (8004368 <TIM_OC3_SetConfig+0xe8>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a24      	ldr	r2, [pc, #144]	@ (800436c <TIM_OC3_SetConfig+0xec>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10d      	bne.n	80042fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	4a23      	ldr	r2, [pc, #140]	@ (8004370 <TIM_OC3_SetConfig+0xf0>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004374 <TIM_OC3_SetConfig+0xf4>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a1b      	ldr	r2, [pc, #108]	@ (800436c <TIM_OC3_SetConfig+0xec>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_OC3_SetConfig+0x9a>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a1c      	ldr	r2, [pc, #112]	@ (8004378 <TIM_OC3_SetConfig+0xf8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_OC3_SetConfig+0x9a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1b      	ldr	r2, [pc, #108]	@ (800437c <TIM_OC3_SetConfig+0xfc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_OC3_SetConfig+0x9a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1a      	ldr	r2, [pc, #104]	@ (8004380 <TIM_OC3_SetConfig+0x100>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d113      	bne.n	8004342 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <TIM_OC3_SetConfig+0x104>)
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4a18      	ldr	r2, [pc, #96]	@ (8004388 <TIM_OC3_SetConfig+0x108>)
 8004326:	4013      	ands	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	621a      	str	r2, [r3, #32]
}
 800435c:	46c0      	nop			@ (mov r8, r8)
 800435e:	46bd      	mov	sp, r7
 8004360:	b006      	add	sp, #24
 8004362:	bd80      	pop	{r7, pc}
 8004364:	fffffeff 	.word	0xfffffeff
 8004368:	fffffdff 	.word	0xfffffdff
 800436c:	40012c00 	.word	0x40012c00
 8004370:	fffff7ff 	.word	0xfffff7ff
 8004374:	fffffbff 	.word	0xfffffbff
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800
 8004384:	ffffefff 	.word	0xffffefff
 8004388:	ffffdfff 	.word	0xffffdfff

0800438c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	4a26      	ldr	r2, [pc, #152]	@ (800443c <TIM_OC4_SetConfig+0xb0>)
 80043a2:	401a      	ands	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4a22      	ldr	r2, [pc, #136]	@ (8004440 <TIM_OC4_SetConfig+0xb4>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a21      	ldr	r2, [pc, #132]	@ (8004444 <TIM_OC4_SetConfig+0xb8>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	021b      	lsls	r3, r3, #8
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004448 <TIM_OC4_SetConfig+0xbc>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a19      	ldr	r2, [pc, #100]	@ (800444c <TIM_OC4_SetConfig+0xc0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00b      	beq.n	8004404 <TIM_OC4_SetConfig+0x78>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a18      	ldr	r2, [pc, #96]	@ (8004450 <TIM_OC4_SetConfig+0xc4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <TIM_OC4_SetConfig+0x78>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a17      	ldr	r2, [pc, #92]	@ (8004454 <TIM_OC4_SetConfig+0xc8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_OC4_SetConfig+0x78>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a16      	ldr	r2, [pc, #88]	@ (8004458 <TIM_OC4_SetConfig+0xcc>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d109      	bne.n	8004418 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	4a15      	ldr	r2, [pc, #84]	@ (800445c <TIM_OC4_SetConfig+0xd0>)
 8004408:	4013      	ands	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	019b      	lsls	r3, r3, #6
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	621a      	str	r2, [r3, #32]
}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	46bd      	mov	sp, r7
 8004436:	b006      	add	sp, #24
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	ffffefff 	.word	0xffffefff
 8004440:	ffff8fff 	.word	0xffff8fff
 8004444:	fffffcff 	.word	0xfffffcff
 8004448:	ffffdfff 	.word	0xffffdfff
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40014000 	.word	0x40014000
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800
 800445c:	ffffbfff 	.word	0xffffbfff

08004460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	2201      	movs	r2, #1
 8004478:	4393      	bics	r3, r2
 800447a:	001a      	movs	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	22f0      	movs	r2, #240	@ 0xf0
 800448a:	4393      	bics	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	220a      	movs	r2, #10
 800449c:	4393      	bics	r3, r2
 800449e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	621a      	str	r2, [r3, #32]
}
 80044b4:	46c0      	nop			@ (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b006      	add	sp, #24
 80044ba:	bd80      	pop	{r7, pc}

080044bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	2210      	movs	r2, #16
 80044d4:	4393      	bics	r3, r2
 80044d6:	001a      	movs	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <TIM_TI2_ConfigInputStage+0x60>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	22a0      	movs	r2, #160	@ 0xa0
 80044f8:	4393      	bics	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	46bd      	mov	sp, r7
 8004516:	b006      	add	sp, #24
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	ffff0fff 	.word	0xffff0fff

08004520 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2270      	movs	r2, #112	@ 0x70
 8004534:	4393      	bics	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	2207      	movs	r2, #7
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	609a      	str	r2, [r3, #8]
}
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	46bd      	mov	sp, r7
 800454e:	b004      	add	sp, #16
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4a09      	ldr	r2, [pc, #36]	@ (8004590 <TIM_ETR_SetConfig+0x3c>)
 800456c:	4013      	ands	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	021a      	lsls	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	431a      	orrs	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	46c0      	nop			@ (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	b006      	add	sp, #24
 800458e:	bd80      	pop	{r7, pc}
 8004590:	ffff00ff 	.word	0xffff00ff

08004594 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	221f      	movs	r2, #31
 80045a4:	4013      	ands	r3, r2
 80045a6:	2201      	movs	r2, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	0013      	movs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	43d2      	mvns	r2, r2
 80045b6:	401a      	ands	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	211f      	movs	r1, #31
 80045c4:	400b      	ands	r3, r1
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4099      	lsls	r1, r3
 80045ca:	000b      	movs	r3, r1
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	46bd      	mov	sp, r7
 80045d6:	b006      	add	sp, #24
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	223c      	movs	r2, #60	@ 0x3c
 80045ea:	5c9b      	ldrb	r3, [r3, r2]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d101      	bne.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f0:	2302      	movs	r3, #2
 80045f2:	e041      	b.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	223c      	movs	r2, #60	@ 0x3c
 80045f8:	2101      	movs	r1, #1
 80045fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	223d      	movs	r2, #61	@ 0x3d
 8004600:	2102      	movs	r1, #2
 8004602:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2270      	movs	r2, #112	@ 0x70
 8004618:	4393      	bics	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a13      	ldr	r2, [pc, #76]	@ (8004680 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d009      	beq.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a11      	ldr	r2, [pc, #68]	@ (8004684 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d004      	beq.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a10      	ldr	r2, [pc, #64]	@ (8004688 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d10c      	bne.n	8004666 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2280      	movs	r2, #128	@ 0x80
 8004650:	4393      	bics	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	4313      	orrs	r3, r2
 800465c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	223d      	movs	r2, #61	@ 0x3d
 800466a:	2101      	movs	r1, #1
 800466c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	223c      	movs	r2, #60	@ 0x3c
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b004      	add	sp, #16
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40000400 	.word	0x40000400
 8004688:	40014000 	.word	0x40014000

0800468c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004694:	46c0      	nop			@ (mov r8, r8)
 8004696:	46bd      	mov	sp, r7
 8004698:	b002      	add	sp, #8
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046a4:	46c0      	nop			@ (mov r8, r8)
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e044      	b.n	8004748 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d107      	bne.n	80046d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2278      	movs	r2, #120	@ 0x78
 80046ca:	2100      	movs	r1, #0
 80046cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	0018      	movs	r0, r3
 80046d2:	f7fd fb5b 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2224      	movs	r2, #36	@ 0x24
 80046da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2101      	movs	r1, #1
 80046e8:	438a      	bics	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 f96c 	bl	80049d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 f828 	bl	8004754 <UART_SetConfig>
 8004704:	0003      	movs	r3, r0
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e01c      	b.n	8004748 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	490d      	ldr	r1, [pc, #52]	@ (8004750 <HAL_UART_Init+0xa4>)
 800471a:	400a      	ands	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2108      	movs	r1, #8
 800472a:	438a      	bics	r2, r1
 800472c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2101      	movs	r1, #1
 800473a:	430a      	orrs	r2, r1
 800473c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0018      	movs	r0, r3
 8004742:	f000 f9fb 	bl	8004b3c <UART_CheckIdleState>
 8004746:	0003      	movs	r3, r0
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b002      	add	sp, #8
 800474e:	bd80      	pop	{r7, pc}
 8004750:	fffff7ff 	.word	0xfffff7ff

08004754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800475c:	231e      	movs	r3, #30
 800475e:	18fb      	adds	r3, r7, r3
 8004760:	2200      	movs	r2, #0
 8004762:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a8d      	ldr	r2, [pc, #564]	@ (80049b8 <UART_SetConfig+0x264>)
 8004784:	4013      	ands	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	430a      	orrs	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a88      	ldr	r2, [pc, #544]	@ (80049bc <UART_SetConfig+0x268>)
 800479a:	4013      	ands	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a7f      	ldr	r2, [pc, #508]	@ (80049c0 <UART_SetConfig+0x26c>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	0019      	movs	r1, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a7b      	ldr	r2, [pc, #492]	@ (80049c4 <UART_SetConfig+0x270>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d127      	bne.n	800482a <UART_SetConfig+0xd6>
 80047da:	4b7b      	ldr	r3, [pc, #492]	@ (80049c8 <UART_SetConfig+0x274>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047de:	2203      	movs	r2, #3
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d00d      	beq.n	8004802 <UART_SetConfig+0xae>
 80047e6:	d81b      	bhi.n	8004820 <UART_SetConfig+0xcc>
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d014      	beq.n	8004816 <UART_SetConfig+0xc2>
 80047ec:	d818      	bhi.n	8004820 <UART_SetConfig+0xcc>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <UART_SetConfig+0xa4>
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d00a      	beq.n	800480c <UART_SetConfig+0xb8>
 80047f6:	e013      	b.n	8004820 <UART_SetConfig+0xcc>
 80047f8:	231f      	movs	r3, #31
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e021      	b.n	8004846 <UART_SetConfig+0xf2>
 8004802:	231f      	movs	r3, #31
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2202      	movs	r2, #2
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e01c      	b.n	8004846 <UART_SetConfig+0xf2>
 800480c:	231f      	movs	r3, #31
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	2204      	movs	r2, #4
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e017      	b.n	8004846 <UART_SetConfig+0xf2>
 8004816:	231f      	movs	r3, #31
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	2208      	movs	r2, #8
 800481c:	701a      	strb	r2, [r3, #0]
 800481e:	e012      	b.n	8004846 <UART_SetConfig+0xf2>
 8004820:	231f      	movs	r3, #31
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2210      	movs	r2, #16
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	e00d      	b.n	8004846 <UART_SetConfig+0xf2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a67      	ldr	r2, [pc, #412]	@ (80049cc <UART_SetConfig+0x278>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d104      	bne.n	800483e <UART_SetConfig+0xea>
 8004834:	231f      	movs	r3, #31
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e003      	b.n	8004846 <UART_SetConfig+0xf2>
 800483e:	231f      	movs	r3, #31
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	2210      	movs	r2, #16
 8004844:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	2380      	movs	r3, #128	@ 0x80
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	429a      	cmp	r2, r3
 8004850:	d15c      	bne.n	800490c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004852:	231f      	movs	r3, #31
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b08      	cmp	r3, #8
 800485a:	d015      	beq.n	8004888 <UART_SetConfig+0x134>
 800485c:	dc18      	bgt.n	8004890 <UART_SetConfig+0x13c>
 800485e:	2b04      	cmp	r3, #4
 8004860:	d00d      	beq.n	800487e <UART_SetConfig+0x12a>
 8004862:	dc15      	bgt.n	8004890 <UART_SetConfig+0x13c>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <UART_SetConfig+0x11a>
 8004868:	2b02      	cmp	r3, #2
 800486a:	d005      	beq.n	8004878 <UART_SetConfig+0x124>
 800486c:	e010      	b.n	8004890 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800486e:	f7fe ff0b 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8004872:	0003      	movs	r3, r0
 8004874:	61bb      	str	r3, [r7, #24]
        break;
 8004876:	e012      	b.n	800489e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004878:	4b55      	ldr	r3, [pc, #340]	@ (80049d0 <UART_SetConfig+0x27c>)
 800487a:	61bb      	str	r3, [r7, #24]
        break;
 800487c:	e00f      	b.n	800489e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487e:	f7fe fea3 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 8004882:	0003      	movs	r3, r0
 8004884:	61bb      	str	r3, [r7, #24]
        break;
 8004886:	e00a      	b.n	800489e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004888:	2380      	movs	r3, #128	@ 0x80
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	61bb      	str	r3, [r7, #24]
        break;
 800488e:	e006      	b.n	800489e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004894:	231e      	movs	r3, #30
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	2201      	movs	r2, #1
 800489a:	701a      	strb	r2, [r3, #0]
        break;
 800489c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d100      	bne.n	80048a6 <UART_SetConfig+0x152>
 80048a4:	e07a      	b.n	800499c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	005a      	lsls	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	18d2      	adds	r2, r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	0019      	movs	r1, r3
 80048b8:	0010      	movs	r0, r2
 80048ba:	f7fb fc25 	bl	8000108 <__udivsi3>
 80048be:	0003      	movs	r3, r0
 80048c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b0f      	cmp	r3, #15
 80048c6:	d91c      	bls.n	8004902 <UART_SetConfig+0x1ae>
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	2380      	movs	r3, #128	@ 0x80
 80048cc:	025b      	lsls	r3, r3, #9
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d217      	bcs.n	8004902 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	200e      	movs	r0, #14
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	210f      	movs	r1, #15
 80048dc:	438a      	bics	r2, r1
 80048de:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2207      	movs	r2, #7
 80048e8:	4013      	ands	r3, r2
 80048ea:	b299      	uxth	r1, r3
 80048ec:	183b      	adds	r3, r7, r0
 80048ee:	183a      	adds	r2, r7, r0
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	183a      	adds	r2, r7, r0
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	60da      	str	r2, [r3, #12]
 8004900:	e04c      	b.n	800499c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004902:	231e      	movs	r3, #30
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e047      	b.n	800499c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800490c:	231f      	movs	r3, #31
 800490e:	18fb      	adds	r3, r7, r3
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b08      	cmp	r3, #8
 8004914:	d015      	beq.n	8004942 <UART_SetConfig+0x1ee>
 8004916:	dc18      	bgt.n	800494a <UART_SetConfig+0x1f6>
 8004918:	2b04      	cmp	r3, #4
 800491a:	d00d      	beq.n	8004938 <UART_SetConfig+0x1e4>
 800491c:	dc15      	bgt.n	800494a <UART_SetConfig+0x1f6>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <UART_SetConfig+0x1d4>
 8004922:	2b02      	cmp	r3, #2
 8004924:	d005      	beq.n	8004932 <UART_SetConfig+0x1de>
 8004926:	e010      	b.n	800494a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7fe feae 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 800492c:	0003      	movs	r3, r0
 800492e:	61bb      	str	r3, [r7, #24]
        break;
 8004930:	e012      	b.n	8004958 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004932:	4b27      	ldr	r3, [pc, #156]	@ (80049d0 <UART_SetConfig+0x27c>)
 8004934:	61bb      	str	r3, [r7, #24]
        break;
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004938:	f7fe fe46 	bl	80035c8 <HAL_RCC_GetSysClockFreq>
 800493c:	0003      	movs	r3, r0
 800493e:	61bb      	str	r3, [r7, #24]
        break;
 8004940:	e00a      	b.n	8004958 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	61bb      	str	r3, [r7, #24]
        break;
 8004948:	e006      	b.n	8004958 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800494e:	231e      	movs	r3, #30
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
        break;
 8004956:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01e      	beq.n	800499c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	085a      	lsrs	r2, r3, #1
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	18d2      	adds	r2, r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	0019      	movs	r1, r3
 800496e:	0010      	movs	r0, r2
 8004970:	f7fb fbca 	bl	8000108 <__udivsi3>
 8004974:	0003      	movs	r3, r0
 8004976:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	d90a      	bls.n	8004994 <UART_SetConfig+0x240>
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	2380      	movs	r3, #128	@ 0x80
 8004982:	025b      	lsls	r3, r3, #9
 8004984:	429a      	cmp	r2, r3
 8004986:	d205      	bcs.n	8004994 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60da      	str	r2, [r3, #12]
 8004992:	e003      	b.n	800499c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004994:	231e      	movs	r3, #30
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049a8:	231e      	movs	r3, #30
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	781b      	ldrb	r3, [r3, #0]
}
 80049ae:	0018      	movs	r0, r3
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b008      	add	sp, #32
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			@ (mov r8, r8)
 80049b8:	ffff69f3 	.word	0xffff69f3
 80049bc:	ffffcfff 	.word	0xffffcfff
 80049c0:	fffff4ff 	.word	0xfffff4ff
 80049c4:	40013800 	.word	0x40013800
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40004400 	.word	0x40004400
 80049d0:	007a1200 	.word	0x007a1200

080049d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e0:	2208      	movs	r2, #8
 80049e2:	4013      	ands	r3, r2
 80049e4:	d00b      	beq.n	80049fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004b18 <UART_AdvFeatureConfig+0x144>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	0019      	movs	r1, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	2201      	movs	r2, #1
 8004a04:	4013      	ands	r3, r2
 8004a06:	d00b      	beq.n	8004a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4a43      	ldr	r2, [pc, #268]	@ (8004b1c <UART_AdvFeatureConfig+0x148>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	0019      	movs	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	2202      	movs	r2, #2
 8004a26:	4013      	ands	r3, r2
 8004a28:	d00b      	beq.n	8004a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a3b      	ldr	r2, [pc, #236]	@ (8004b20 <UART_AdvFeatureConfig+0x14c>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	0019      	movs	r1, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	2204      	movs	r2, #4
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4a34      	ldr	r2, [pc, #208]	@ (8004b24 <UART_AdvFeatureConfig+0x150>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	0019      	movs	r1, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	2210      	movs	r2, #16
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d00b      	beq.n	8004a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <UART_AdvFeatureConfig+0x154>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d00b      	beq.n	8004aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	4a25      	ldr	r2, [pc, #148]	@ (8004b2c <UART_AdvFeatureConfig+0x158>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	2240      	movs	r2, #64	@ 0x40
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d01d      	beq.n	8004aee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <UART_AdvFeatureConfig+0x15c>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	0019      	movs	r1, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ace:	2380      	movs	r3, #128	@ 0x80
 8004ad0:	035b      	lsls	r3, r3, #13
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d10b      	bne.n	8004aee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4a15      	ldr	r2, [pc, #84]	@ (8004b34 <UART_AdvFeatureConfig+0x160>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	2280      	movs	r2, #128	@ 0x80
 8004af4:	4013      	ands	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	4a0e      	ldr	r2, [pc, #56]	@ (8004b38 <UART_AdvFeatureConfig+0x164>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	605a      	str	r2, [r3, #4]
  }
}
 8004b10:	46c0      	nop			@ (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b002      	add	sp, #8
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	ffff7fff 	.word	0xffff7fff
 8004b1c:	fffdffff 	.word	0xfffdffff
 8004b20:	fffeffff 	.word	0xfffeffff
 8004b24:	fffbffff 	.word	0xfffbffff
 8004b28:	ffffefff 	.word	0xffffefff
 8004b2c:	ffffdfff 	.word	0xffffdfff
 8004b30:	ffefffff 	.word	0xffefffff
 8004b34:	ff9fffff 	.word	0xff9fffff
 8004b38:	fff7ffff 	.word	0xfff7ffff

08004b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b092      	sub	sp, #72	@ 0x48
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2284      	movs	r2, #132	@ 0x84
 8004b48:	2100      	movs	r1, #0
 8004b4a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b4c:	f7fd fa26 	bl	8001f9c <HAL_GetTick>
 8004b50:	0003      	movs	r3, r0
 8004b52:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d12c      	bne.n	8004bbc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b64:	2280      	movs	r2, #128	@ 0x80
 8004b66:	0391      	lsls	r1, r2, #14
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4a46      	ldr	r2, [pc, #280]	@ (8004c84 <UART_CheckIdleState+0x148>)
 8004b6c:	9200      	str	r2, [sp, #0]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f000 f88c 	bl	8004c8c <UART_WaitOnFlagUntilTimeout>
 8004b74:	1e03      	subs	r3, r0, #0
 8004b76:	d021      	beq.n	8004bbc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b78:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b82:	2301      	movs	r3, #1
 8004b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	f383 8810 	msr	PRIMASK, r3
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2180      	movs	r1, #128	@ 0x80
 8004b9a:	438a      	bics	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba4:	f383 8810 	msr	PRIMASK, r3
}
 8004ba8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2278      	movs	r2, #120	@ 0x78
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e05f      	b.n	8004c7c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d146      	bne.n	8004c58 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bcc:	2280      	movs	r2, #128	@ 0x80
 8004bce:	03d1      	lsls	r1, r2, #15
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c84 <UART_CheckIdleState+0x148>)
 8004bd4:	9200      	str	r2, [sp, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f000 f858 	bl	8004c8c <UART_WaitOnFlagUntilTimeout>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d03b      	beq.n	8004c58 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be0:	f3ef 8310 	mrs	r3, PRIMASK
 8004be4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004be6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bea:	2301      	movs	r3, #1
 8004bec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f383 8810 	msr	PRIMASK, r3
}
 8004bf4:	46c0      	nop			@ (mov r8, r8)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4921      	ldr	r1, [pc, #132]	@ (8004c88 <UART_CheckIdleState+0x14c>)
 8004c02:	400a      	ands	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f383 8810 	msr	PRIMASK, r3
}
 8004c10:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c12:	f3ef 8310 	mrs	r3, PRIMASK
 8004c16:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c18:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	f383 8810 	msr	PRIMASK, r3
}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2101      	movs	r1, #1
 8004c34:	438a      	bics	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f383 8810 	msr	PRIMASK, r3
}
 8004c42:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2280      	movs	r2, #128	@ 0x80
 8004c48:	2120      	movs	r1, #32
 8004c4a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2278      	movs	r2, #120	@ 0x78
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e011      	b.n	8004c7c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2280      	movs	r2, #128	@ 0x80
 8004c62:	2120      	movs	r1, #32
 8004c64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2278      	movs	r2, #120	@ 0x78
 8004c76:	2100      	movs	r1, #0
 8004c78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b010      	add	sp, #64	@ 0x40
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	01ffffff 	.word	0x01ffffff
 8004c88:	fffffedf 	.word	0xfffffedf

08004c8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	603b      	str	r3, [r7, #0]
 8004c98:	1dfb      	adds	r3, r7, #7
 8004c9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9c:	e051      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	d04e      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca4:	f7fd f97a 	bl	8001f9c <HAL_GetTick>
 8004ca8:	0002      	movs	r2, r0
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d302      	bcc.n	8004cba <UART_WaitOnFlagUntilTimeout+0x2e>
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e051      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d03b      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b80      	cmp	r3, #128	@ 0x80
 8004cce:	d038      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d035      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	2208      	movs	r2, #8
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d111      	bne.n	8004d08 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2208      	movs	r2, #8
 8004cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 f83c 	bl	8004d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2284      	movs	r2, #132	@ 0x84
 8004cf8:	2108      	movs	r1, #8
 8004cfa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2278      	movs	r2, #120	@ 0x78
 8004d00:	2100      	movs	r1, #0
 8004d02:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e02c      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69da      	ldr	r2, [r3, #28]
 8004d0e:	2380      	movs	r3, #128	@ 0x80
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	401a      	ands	r2, r3
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d112      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2280      	movs	r2, #128	@ 0x80
 8004d22:	0112      	lsls	r2, r2, #4
 8004d24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 f81f 	bl	8004d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2284      	movs	r2, #132	@ 0x84
 8004d32:	2120      	movs	r1, #32
 8004d34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2278      	movs	r2, #120	@ 0x78
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	425a      	negs	r2, r3
 8004d52:	4153      	adcs	r3, r2
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	001a      	movs	r2, r3
 8004d58:	1dfb      	adds	r3, r7, #7
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d09e      	beq.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b004      	add	sp, #16
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08e      	sub	sp, #56	@ 0x38
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d74:	f3ef 8310 	mrs	r3, PRIMASK
 8004d78:	617b      	str	r3, [r7, #20]
  return(result);
 8004d7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f383 8810 	msr	PRIMASK, r3
}
 8004d88:	46c0      	nop			@ (mov r8, r8)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4926      	ldr	r1, [pc, #152]	@ (8004e30 <UART_EndRxTransfer+0xc4>)
 8004d96:	400a      	ands	r2, r1
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f383 8810 	msr	PRIMASK, r3
}
 8004da4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da6:	f3ef 8310 	mrs	r3, PRIMASK
 8004daa:	623b      	str	r3, [r7, #32]
  return(result);
 8004dac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db0:	2301      	movs	r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			@ (mov r8, r8)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	438a      	bics	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd2:	f383 8810 	msr	PRIMASK, r3
}
 8004dd6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d118      	bne.n	8004e12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de0:	f3ef 8310 	mrs	r3, PRIMASK
 8004de4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dea:	2301      	movs	r3, #1
 8004dec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f383 8810 	msr	PRIMASK, r3
}
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2110      	movs	r1, #16
 8004e02:	438a      	bics	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f383 8810 	msr	PRIMASK, r3
}
 8004e10:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2280      	movs	r2, #128	@ 0x80
 8004e16:	2120      	movs	r1, #32
 8004e18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e26:	46c0      	nop			@ (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b00e      	add	sp, #56	@ 0x38
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	fffffedf 	.word	0xfffffedf

08004e34 <memset>:
 8004e34:	0003      	movs	r3, r0
 8004e36:	1882      	adds	r2, r0, r2
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	7019      	strb	r1, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <__libc_init_array>:
 8004e44:	b570      	push	{r4, r5, r6, lr}
 8004e46:	2600      	movs	r6, #0
 8004e48:	4c0c      	ldr	r4, [pc, #48]	@ (8004e7c <__libc_init_array+0x38>)
 8004e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8004e80 <__libc_init_array+0x3c>)
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	42a6      	cmp	r6, r4
 8004e52:	d109      	bne.n	8004e68 <__libc_init_array+0x24>
 8004e54:	2600      	movs	r6, #0
 8004e56:	f000 f819 	bl	8004e8c <_init>
 8004e5a:	4c0a      	ldr	r4, [pc, #40]	@ (8004e84 <__libc_init_array+0x40>)
 8004e5c:	4d0a      	ldr	r5, [pc, #40]	@ (8004e88 <__libc_init_array+0x44>)
 8004e5e:	1b64      	subs	r4, r4, r5
 8004e60:	10a4      	asrs	r4, r4, #2
 8004e62:	42a6      	cmp	r6, r4
 8004e64:	d105      	bne.n	8004e72 <__libc_init_array+0x2e>
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	00b3      	lsls	r3, r6, #2
 8004e6a:	58eb      	ldr	r3, [r5, r3]
 8004e6c:	4798      	blx	r3
 8004e6e:	3601      	adds	r6, #1
 8004e70:	e7ee      	b.n	8004e50 <__libc_init_array+0xc>
 8004e72:	00b3      	lsls	r3, r6, #2
 8004e74:	58eb      	ldr	r3, [r5, r3]
 8004e76:	4798      	blx	r3
 8004e78:	3601      	adds	r6, #1
 8004e7a:	e7f2      	b.n	8004e62 <__libc_init_array+0x1e>
 8004e7c:	08004edc 	.word	0x08004edc
 8004e80:	08004edc 	.word	0x08004edc
 8004e84:	08004ee0 	.word	0x08004ee0
 8004e88:	08004edc 	.word	0x08004edc

08004e8c <_init>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr

08004e98 <_fini>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr
